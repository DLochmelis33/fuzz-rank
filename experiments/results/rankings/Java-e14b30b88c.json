[
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::multiply(int[][], int[][])",
            "com.thealgorithms.backtracking.FloodFill::floodFill(int[][], int, int, int, int)",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::boundaryFill(int[][], int, int, int, int)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::isValidPostfixExpression(java.lang.String)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insert(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearch(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::delete(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int, int[][])",
            "com.thealgorithms.others.RabinKarp::searchPat(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteFixup(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::multiply(int[][], int[][])",
            "com.thealgorithms.backtracking.FloodFill::floodFill(int[][], int, int, int, int)",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::boundaryFill(int[][], int, int, int, int)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::isValidPostfixExpression(java.lang.String)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insert(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearch(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::delete(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int, int[][])",
            "com.thealgorithms.others.RabinKarp::searchPat(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteFixup(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.divideandconquer.ClosestPair::closestPair(com.thealgorithms.divideandconquer.ClosestPair.Location[], int)",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::evaluateTurnAroundTime()",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BellmanFord::go()",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::networkFlow(int, int)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::floydwarshall(int[][])",
            "com.thealgorithms.sorts.CycleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::calculateMaxOfMin(int[], int)",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::calc(double)",
            "com.thealgorithms.others.TopKWords.CountWords::getDictionary()",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String, int[][])",
            "com.thealgorithms.maths.FibonacciJavaStreams::calculate(java.math.BigDecimal)",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.divideandconquer.SkylineAlgorithm::produceSubSkyLines(java.util.ArrayList)",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(com.thealgorithms.datastructures.trees.AVLSimple.Node, int)",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursive::delete(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.conversions.RgbHsvConversion::getRgbBySection(double, double, double, double)",
            "com.thealgorithms.sorts.DualPivotQuickSort::partition(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.SkylineProblem::mergeSkyline(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::infix2PostFix(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::subSet(int[])",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.misc.InverseOfMatrix::gaussian(double[][], int[])",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::solveKnapsackRecursive(int, int[], int[], int, int[][])",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::explore(int, int, char[][], com.thealgorithms.misc.TrieNode, boolean[][], java.util.Set)",
            "com.thealgorithms.sorts.WiggleSort::triColorSort(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(com.thealgorithms.geometry.GrahamScan.Point, com.thealgorithms.geometry.GrahamScan.Point)",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.conversions.RgbHsvConversion::rgbToHsv(int, int, int)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.sorts.CircleSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.StringMatchFiniteAutomata::getNextState(java.lang.String, int, int, int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Sudoku::solveSudoku(int[][], int)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexBU(java.lang.String, java.lang.String)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.ciphers.HillCipher::encrypt(java.lang.String)",
            "com.thealgorithms.searches.TernarySearch::ternarySearch(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.others.BFPRT::bfprt(int[], int, int, int)",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Point, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::getPostfixToInfix(java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMapCuckooHashing::insertKey2HashTable(int)",
            "com.thealgorithms.others.MiniMaxAlgorithm::miniMax(int, boolean, int, boolean)",
            "com.thealgorithms.datastructures.trees.AVLTree::insert(int)",
            "com.thealgorithms.datastructures.caches.LFUCache::addNodeWithUpdatedFrequency(com.thealgorithms.datastructures.caches.LFUCache.Node)",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnCompsUtil(int, int[], int[], boolean[], java.util.Stack, java.util.List)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearchIter(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.searches.QuickSelect::partition(java.util.List, int, int, int, int)",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::addEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::fixTree(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::multiply(int[][], int[][])",
            "com.thealgorithms.backtracking.FloodFill::floodFill(int[][], int, int, int, int)",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::boundaryFill(int[][], int, int, int, int)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::isValidPostfixExpression(java.lang.String)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insert(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearch(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::delete(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int, int[][])",
            "com.thealgorithms.others.RabinKarp::searchPat(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteFixup(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.divideandconquer.ClosestPair::closestPair(com.thealgorithms.divideandconquer.ClosestPair.Location[], int)",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::evaluateTurnAroundTime()",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BellmanFord::go()",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::networkFlow(int, int)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::floydwarshall(int[][])",
            "com.thealgorithms.sorts.CycleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::calculateMaxOfMin(int[], int)",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::calc(double)",
            "com.thealgorithms.others.TopKWords.CountWords::getDictionary()",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String, int[][])",
            "com.thealgorithms.maths.FibonacciJavaStreams::calculate(java.math.BigDecimal)",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.divideandconquer.SkylineAlgorithm::produceSubSkyLines(java.util.ArrayList)",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(com.thealgorithms.datastructures.trees.AVLSimple.Node, int)",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursive::delete(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.conversions.RgbHsvConversion::getRgbBySection(double, double, double, double)",
            "com.thealgorithms.sorts.DualPivotQuickSort::partition(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.SkylineProblem::mergeSkyline(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::infix2PostFix(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::subSet(int[])",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.misc.InverseOfMatrix::gaussian(double[][], int[])",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::solveKnapsackRecursive(int, int[], int[], int, int[][])",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::explore(int, int, char[][], com.thealgorithms.misc.TrieNode, boolean[][], java.util.Set)",
            "com.thealgorithms.sorts.WiggleSort::triColorSort(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(com.thealgorithms.geometry.GrahamScan.Point, com.thealgorithms.geometry.GrahamScan.Point)",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.conversions.RgbHsvConversion::rgbToHsv(int, int, int)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.sorts.CircleSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.StringMatchFiniteAutomata::getNextState(java.lang.String, int, int, int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Sudoku::solveSudoku(int[][], int)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexBU(java.lang.String, java.lang.String)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.ciphers.HillCipher::encrypt(java.lang.String)",
            "com.thealgorithms.searches.TernarySearch::ternarySearch(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.others.BFPRT::bfprt(int[], int, int, int)",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Point, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::getPostfixToInfix(java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMapCuckooHashing::insertKey2HashTable(int)",
            "com.thealgorithms.others.MiniMaxAlgorithm::miniMax(int, boolean, int, boolean)",
            "com.thealgorithms.datastructures.trees.AVLTree::insert(int)",
            "com.thealgorithms.datastructures.caches.LFUCache::addNodeWithUpdatedFrequency(com.thealgorithms.datastructures.caches.LFUCache.Node)",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnCompsUtil(int, int[], int[], boolean[], java.util.Stack, java.util.List)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearchIter(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.searches.QuickSelect::partition(java.util.List, int, int, int, int)",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::addEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::fixTree(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.ClosestPair::bruteForce(com.thealgorithms.divideandconquer.ClosestPair.Location[])",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::sink()",
            "com.thealgorithms.ciphers.HillCipher::determinant(int[][], int)",
            "com.thealgorithms.maths.DeterminantOfMatrix::determinant(int[][], int)",
            "com.thealgorithms.others.KochSnowflake::main(java.lang.String[])",
            "com.thealgorithms.others.BankersAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.others.BankersAlgorithm::checkSafeSystem(int[], int[], int[][], int[][], int, int)",
            "com.thealgorithms.ciphers.HillCipher::decrypt(java.lang.String)",
            "com.thealgorithms.backtracking.MazeRecursion::setWay2(int[][], int, int)",
            "com.thealgorithms.backtracking.MazeRecursion::setWay(int[][], int, int)",
            "com.thealgorithms.sorts.MergeSortRecursive::sort(java.util.List, java.util.List)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::findNode(com.thealgorithms.datastructures.trees.RedBlackBST.Node, com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.dynamicprogramming.MatrixChainRecursiveTopDownMemoisation::Lookup_Chain(int[][], int[], int, int)",
            "com.thealgorithms.searches.QuickSelect::selectIndex(java.util.List, int, int, int)",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence::recursiveLPS(java.lang.String, java.lang.String)",
            "com.thealgorithms.maths.SumOfArithmeticSeries::main(java.lang.String[])",
            "com.thealgorithms.sorts.WiggleSort::wiggleSort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.graphs.Cycle::dfs(java.lang.Integer, java.lang.Integer, java.util.ArrayList)",
            "com.thealgorithms.others.Mandelbrot::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.VerticalOrderTraversal::verticalTraversal(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.graphs.Graphs::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MaxHeap::deleteElement(int)",
            "com.thealgorithms.datastructures.heaps.MinHeap::deleteElement(int)",
            "com.thealgorithms.strings.Solution::longestPalindrome(java.lang.String)",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::isBalancedIterative(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced.BinaryTree)",
            "com.thealgorithms.divideandconquer.SkylineAlgorithm::produceFinalSkyLine(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.geometry.GrahamScan::<init>(com.thealgorithms.geometry.GrahamScan.Point[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubstring::LPS(java.lang.String)",
            "com.thealgorithms.conversions.AnyBaseToAnyBase::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EggDropping::minTrials(int, int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::main(java.lang.String[])",
            "com.thealgorithms.others.PerlinNoise::generatePerlinNoise(int, int, int, float, long)",
            "com.thealgorithms.sorts.CountingSort::main(java.lang.String[])",
            "com.thealgorithms.searches.SaddlebackSearch::find(int[][], int, int, int)",
            "com.thealgorithms.others.Trieac::main(java.lang.String[])",
            "com.thealgorithms.searches.QuickSelect::pivot(java.util.List, int, int)",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::bipartite(int, java.util.ArrayList, int[], int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::delete(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.MergeSort::merge(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.sorts.TimSort::merge(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.ciphers.Caesar::encode(java.lang.String, int)",
            "com.thealgorithms.ciphers.Caesar::decode(java.lang.String, int)",
            "com.thealgorithms.maths.PythagoreanTriple::main(java.lang.String[])",
            "com.thealgorithms.strings.HorspoolSearch::firstOccurrence(java.lang.String, java.lang.String, boolean)",
            "com.thealgorithms.maths.ParseInteger::parseInt(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::breadthFirstOrder(int)",
            "com.thealgorithms.datastructures.hashmap.hashing.Intersection::intersection(int[], int[])",
            "com.thealgorithms.backtracking.NQueens::getSolution(int, java.util.List, int[], int)",
            "com.thealgorithms.others.PerlinNoise::main(java.lang.String[])",
            "com.thealgorithms.strings.ValidParentheses::isValid(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::getLCS(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.SubsetSum::subsetSum(int[], int)",
            "com.thealgorithms.datastructures.stacks.StackArrayList::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.PalindromicPartitioning::minimalpartitions(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.ConnectedComponent::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.MatrixGraphs::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BruteForceKnapsack::knapSack(int, int[], int[], int)",
            "com.thealgorithms.backtracking.PowerSum::Sum(int, int, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::find(int)",
            "com.thealgorithms.maths.KaprekarNumbers::isKaprekarNumber(long)",
            "com.thealgorithms.maths.PowRecursion::main(java.lang.String[])",
            "com.thealgorithms.sorts.HeapSort::siftDown(java.lang.Comparable[], int, int)",
            "com.thealgorithms.maths.Mode::mode(int[])",
            "com.thealgorithms.others.Mandelbrot::getImage(int, int, double, double, double, int, boolean)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::main(java.lang.String[])",
            "com.thealgorithms.misc.ThreeSumProblem::TwoPointer(int[], int)",
            "com.thealgorithms.searches.MonteCarloTreeSearch::getPromisingNode(com.thealgorithms.searches.MonteCarloTreeSearch.Node)",
            "com.thealgorithms.ciphers.AES::scheduleCore(java.math.BigInteger, int)",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::sortTable(java.lang.Object[][])",
            "com.thealgorithms.datastructures.lists.SkipList::toString()",
            "com.thealgorithms.dynamicprogramming.ShortestSuperSequence::lcs(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.dynamicprogramming.LongestValidParentheses::getLongestValidParentheses(java.lang.String)",
            "com.thealgorithms.others.LowestBasePalindrome::lowestBasePalindrome(int)",
            "com.thealgorithms.maths.FFTBluestein::fftBluestein(java.util.ArrayList, boolean)",
            "com.thealgorithms.maths.MagicSquare::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.DP::findWays(int, int, int)",
            "com.thealgorithms.misc.InverseOfMatrix::invert(double[][])",
            "com.thealgorithms.datastructures.trees.KDTree::findMin(com.thealgorithms.datastructures.trees.KDTree.Node, int)",
            "com.thealgorithms.datastructures.trees.KDTree::findMax(com.thealgorithms.datastructures.trees.KDTree.Node, int)",
            "com.thealgorithms.searches.BinarySearch::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.searches.LowerBound::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.sorts.SlowSort::sort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.datastructures.trees.SegmentTree::getSumTree(int, int, int, int, int)",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::storeAllPathsUtil(java.lang.Integer, java.lang.Integer, boolean[], java.util.List)",
            "com.thealgorithms.backtracking.KnightsTour::solve(int, int, int)",
            "com.thealgorithms.backtracking.WordSearch::doDFS(int, int, int)",
            "com.thealgorithms.conversions.AnyBaseToDecimal::main(java.lang.String[])",
            "com.thealgorithms.searches.OrderAgnosticBinarySearch::BinSearchAlgo(int[], int, int, int)",
            "com.thealgorithms.strings.CheckAnagrams::isAnagrams(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::multiply(int[][], int[][])",
            "com.thealgorithms.backtracking.FloodFill::floodFill(int[][], int, int, int, int)",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::boundaryFill(int[][], int, int, int, int)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::isValidPostfixExpression(java.lang.String)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insert(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearch(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::delete(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int, int[][])",
            "com.thealgorithms.others.RabinKarp::searchPat(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteFixup(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.divideandconquer.ClosestPair::closestPair(com.thealgorithms.divideandconquer.ClosestPair.Location[], int)",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::evaluateTurnAroundTime()",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BellmanFord::go()",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::networkFlow(int, int)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::floydwarshall(int[][])",
            "com.thealgorithms.sorts.CycleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::calculateMaxOfMin(int[], int)",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::calc(double)",
            "com.thealgorithms.others.TopKWords.CountWords::getDictionary()",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String, int[][])",
            "com.thealgorithms.maths.FibonacciJavaStreams::calculate(java.math.BigDecimal)",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.divideandconquer.SkylineAlgorithm::produceSubSkyLines(java.util.ArrayList)",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(com.thealgorithms.datastructures.trees.AVLSimple.Node, int)",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursive::delete(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.conversions.RgbHsvConversion::getRgbBySection(double, double, double, double)",
            "com.thealgorithms.sorts.DualPivotQuickSort::partition(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.SkylineProblem::mergeSkyline(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::infix2PostFix(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::subSet(int[])",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.misc.InverseOfMatrix::gaussian(double[][], int[])",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::solveKnapsackRecursive(int, int[], int[], int, int[][])",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::explore(int, int, char[][], com.thealgorithms.misc.TrieNode, boolean[][], java.util.Set)",
            "com.thealgorithms.sorts.WiggleSort::triColorSort(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(com.thealgorithms.geometry.GrahamScan.Point, com.thealgorithms.geometry.GrahamScan.Point)",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.conversions.RgbHsvConversion::rgbToHsv(int, int, int)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.sorts.CircleSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.StringMatchFiniteAutomata::getNextState(java.lang.String, int, int, int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Sudoku::solveSudoku(int[][], int)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexBU(java.lang.String, java.lang.String)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.ciphers.HillCipher::encrypt(java.lang.String)",
            "com.thealgorithms.searches.TernarySearch::ternarySearch(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.others.BFPRT::bfprt(int[], int, int, int)",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Point, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::getPostfixToInfix(java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMapCuckooHashing::insertKey2HashTable(int)",
            "com.thealgorithms.others.MiniMaxAlgorithm::miniMax(int, boolean, int, boolean)",
            "com.thealgorithms.datastructures.trees.AVLTree::insert(int)",
            "com.thealgorithms.datastructures.caches.LFUCache::addNodeWithUpdatedFrequency(com.thealgorithms.datastructures.caches.LFUCache.Node)",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnCompsUtil(int, int[], int[], boolean[], java.util.Stack, java.util.List)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearchIter(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.searches.QuickSelect::partition(java.util.List, int, int, int, int)",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::addEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::fixTree(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.ClosestPair::bruteForce(com.thealgorithms.divideandconquer.ClosestPair.Location[])",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::sink()",
            "com.thealgorithms.ciphers.HillCipher::determinant(int[][], int)",
            "com.thealgorithms.maths.DeterminantOfMatrix::determinant(int[][], int)",
            "com.thealgorithms.others.KochSnowflake::main(java.lang.String[])",
            "com.thealgorithms.others.BankersAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.others.BankersAlgorithm::checkSafeSystem(int[], int[], int[][], int[][], int, int)",
            "com.thealgorithms.ciphers.HillCipher::decrypt(java.lang.String)",
            "com.thealgorithms.backtracking.MazeRecursion::setWay2(int[][], int, int)",
            "com.thealgorithms.backtracking.MazeRecursion::setWay(int[][], int, int)",
            "com.thealgorithms.sorts.MergeSortRecursive::sort(java.util.List, java.util.List)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::findNode(com.thealgorithms.datastructures.trees.RedBlackBST.Node, com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.dynamicprogramming.MatrixChainRecursiveTopDownMemoisation::Lookup_Chain(int[][], int[], int, int)",
            "com.thealgorithms.searches.QuickSelect::selectIndex(java.util.List, int, int, int)",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence::recursiveLPS(java.lang.String, java.lang.String)",
            "com.thealgorithms.maths.SumOfArithmeticSeries::main(java.lang.String[])",
            "com.thealgorithms.sorts.WiggleSort::wiggleSort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.graphs.Cycle::dfs(java.lang.Integer, java.lang.Integer, java.util.ArrayList)",
            "com.thealgorithms.others.Mandelbrot::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.VerticalOrderTraversal::verticalTraversal(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.graphs.Graphs::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MaxHeap::deleteElement(int)",
            "com.thealgorithms.datastructures.heaps.MinHeap::deleteElement(int)",
            "com.thealgorithms.strings.Solution::longestPalindrome(java.lang.String)",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::isBalancedIterative(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced.BinaryTree)",
            "com.thealgorithms.divideandconquer.SkylineAlgorithm::produceFinalSkyLine(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.geometry.GrahamScan::<init>(com.thealgorithms.geometry.GrahamScan.Point[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubstring::LPS(java.lang.String)",
            "com.thealgorithms.conversions.AnyBaseToAnyBase::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EggDropping::minTrials(int, int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::main(java.lang.String[])",
            "com.thealgorithms.others.PerlinNoise::generatePerlinNoise(int, int, int, float, long)",
            "com.thealgorithms.sorts.CountingSort::main(java.lang.String[])",
            "com.thealgorithms.searches.SaddlebackSearch::find(int[][], int, int, int)",
            "com.thealgorithms.others.Trieac::main(java.lang.String[])",
            "com.thealgorithms.searches.QuickSelect::pivot(java.util.List, int, int)",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::bipartite(int, java.util.ArrayList, int[], int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::delete(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.MergeSort::merge(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.sorts.TimSort::merge(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.ciphers.Caesar::encode(java.lang.String, int)",
            "com.thealgorithms.ciphers.Caesar::decode(java.lang.String, int)",
            "com.thealgorithms.maths.PythagoreanTriple::main(java.lang.String[])",
            "com.thealgorithms.strings.HorspoolSearch::firstOccurrence(java.lang.String, java.lang.String, boolean)",
            "com.thealgorithms.maths.ParseInteger::parseInt(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::breadthFirstOrder(int)",
            "com.thealgorithms.datastructures.hashmap.hashing.Intersection::intersection(int[], int[])",
            "com.thealgorithms.backtracking.NQueens::getSolution(int, java.util.List, int[], int)",
            "com.thealgorithms.others.PerlinNoise::main(java.lang.String[])",
            "com.thealgorithms.strings.ValidParentheses::isValid(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::getLCS(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.SubsetSum::subsetSum(int[], int)",
            "com.thealgorithms.datastructures.stacks.StackArrayList::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.PalindromicPartitioning::minimalpartitions(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.ConnectedComponent::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.MatrixGraphs::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BruteForceKnapsack::knapSack(int, int[], int[], int)",
            "com.thealgorithms.backtracking.PowerSum::Sum(int, int, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::find(int)",
            "com.thealgorithms.maths.KaprekarNumbers::isKaprekarNumber(long)",
            "com.thealgorithms.maths.PowRecursion::main(java.lang.String[])",
            "com.thealgorithms.sorts.HeapSort::siftDown(java.lang.Comparable[], int, int)",
            "com.thealgorithms.maths.Mode::mode(int[])",
            "com.thealgorithms.others.Mandelbrot::getImage(int, int, double, double, double, int, boolean)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::main(java.lang.String[])",
            "com.thealgorithms.misc.ThreeSumProblem::TwoPointer(int[], int)",
            "com.thealgorithms.searches.MonteCarloTreeSearch::getPromisingNode(com.thealgorithms.searches.MonteCarloTreeSearch.Node)",
            "com.thealgorithms.ciphers.AES::scheduleCore(java.math.BigInteger, int)",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::sortTable(java.lang.Object[][])",
            "com.thealgorithms.datastructures.lists.SkipList::toString()",
            "com.thealgorithms.dynamicprogramming.ShortestSuperSequence::lcs(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.dynamicprogramming.LongestValidParentheses::getLongestValidParentheses(java.lang.String)",
            "com.thealgorithms.others.LowestBasePalindrome::lowestBasePalindrome(int)",
            "com.thealgorithms.maths.FFTBluestein::fftBluestein(java.util.ArrayList, boolean)",
            "com.thealgorithms.maths.MagicSquare::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.DP::findWays(int, int, int)",
            "com.thealgorithms.misc.InverseOfMatrix::invert(double[][])",
            "com.thealgorithms.datastructures.trees.KDTree::findMin(com.thealgorithms.datastructures.trees.KDTree.Node, int)",
            "com.thealgorithms.datastructures.trees.KDTree::findMax(com.thealgorithms.datastructures.trees.KDTree.Node, int)",
            "com.thealgorithms.searches.BinarySearch::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.searches.LowerBound::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.sorts.SlowSort::sort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.datastructures.trees.SegmentTree::getSumTree(int, int, int, int, int)",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::storeAllPathsUtil(java.lang.Integer, java.lang.Integer, boolean[], java.util.List)",
            "com.thealgorithms.backtracking.KnightsTour::solve(int, int, int)",
            "com.thealgorithms.backtracking.WordSearch::doDFS(int, int, int)",
            "com.thealgorithms.conversions.AnyBaseToDecimal::main(java.lang.String[])",
            "com.thealgorithms.searches.OrderAgnosticBinarySearch::BinSearchAlgo(int[], int, int, int)",
            "com.thealgorithms.strings.CheckAnagrams::isAnagrams(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Graph.Vertex::equals(java.lang.Object)",
            "com.thealgorithms.datastructures.stacks.BalancedBrackets::isBalanced(java.lang.String)",
            "com.thealgorithms.searches.HowManyTimesRotated::rotated(int[])",
            "com.thealgorithms.datastructures.heaps.MaxHeap::toggleDown(int)",
            "com.thealgorithms.datastructures.heaps.MinHeap::toggleDown(int)",
            "com.thealgorithms.others.KMP::KMPmatcher(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.A_Star::aStar(int, int, com.thealgorithms.datastructures.graphs.A_Star.Graph, int[])",
            "com.thealgorithms.others.Sudoku::isSafe(int[][], int, int, int)",
            "com.thealgorithms.strings.zigZagPattern.zigZagPattern::encode(java.lang.String, int)",
            "com.thealgorithms.maths.FFT::fft(java.util.ArrayList, boolean)",
            "com.thealgorithms.misc.WordBoggle::getNeighbors(int, int, char[][])",
            "com.thealgorithms.dynamicprogramming.LongestAlternatingSubsequence::AlternatingLength(int[], int)",
            "com.thealgorithms.searches.DepthFirstSearch::main(java.lang.String[])",
            "com.thealgorithms.sorts.MergeSortNoExtraSpace::merge_sort(int[], int, int, int)",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::updateRange(int, int, int, com.thealgorithms.datastructures.trees.LazySegmentTree.Node)",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::isBipartite(int, java.util.ArrayList)",
            "com.thealgorithms.others.Trieac::printAutoSuggestions(com.thealgorithms.others.Trieac.TrieNode, java.lang.String)",
            "com.thealgorithms.datastructures.lists.CursorLinkedList::remove(java.lang.Object)",
            "com.thealgorithms.datastructures.trees.AVLTree::rebalance(com.thealgorithms.datastructures.trees.AVLTree.Node)",
            "com.thealgorithms.datastructures.graphs.Graph::addEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.searches.FibonacciSearch::find(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.datastructures.lists.SkipList::add(java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.LevelOrderTraversal::traverse(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.others.BFPRT::insertionSort(int[], int, int)",
            "com.thealgorithms.sorts.BubbleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack::knapSack(int, int[], int[], int)",
            "com.thealgorithms.sorts.InsertionSort::sentinelSort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.trees.ZigzagTraversal::traverse(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.sorts.CocktailShakerSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.graphs.dijkstras::dijkstra(int[][], int)",
            "com.thealgorithms.others.StackPostfixNotation::postfixEvaluate(java.lang.String)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::search(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.KDTree::build(com.thealgorithms.datastructures.trees.KDTree.Point[], int)",
            "com.thealgorithms.dynamicprogramming.WineProblem::WPTD(int[], int, int, int[][])",
            "com.thealgorithms.others.QueueUsingTwoStacks::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.SegmentTree::updateTree(int, int, int, int, int)",
            "com.thealgorithms.sorts.IntrospectiveSort::introSort(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::insert(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.searches.IterativeTernarySearch::find(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.sorts.BitonicSort::bitonicMerge(int[], int, int, int)",
            "com.thealgorithms.dynamicprogramming.LongestIncreasingSubsequence::LIS(int[])",
            "com.thealgorithms.maths.Pow::main(java.lang.String[])",
            "com.thealgorithms.others.BFPRT::partition(int[], int, int, int)",
            "com.thealgorithms.sorts.DutchNationalFlagSort::dutch_national_flag_sort(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.backtracking.Combination::backtracking(java.lang.Object[], int, java.util.TreeSet, java.util.List)",
            "com.thealgorithms.sorts.IntrospectiveSort::heapify(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.datastructures.hashmap.hashing.MajorityElement::majority(int[])",
            "com.thealgorithms.searches.sortOrderAgnosticBinarySearch::find(int[], int)",
            "com.thealgorithms.strings.Anagrams::approach2(java.lang.String, java.lang.String)",
            "com.thealgorithms.backtracking.WordSearch::exist(char[][], java.lang.String)",
            "com.thealgorithms.datastructures.lists.MergeSortedArrayList::merge(java.util.List, java.util.List, java.util.List)",
            "com.thealgorithms.datastructures.trees.AVLTree::delete(com.thealgorithms.datastructures.trees.AVLTree.Node)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::swapNodes(int, int)",
            "com.thealgorithms.dynamicprogramming.Knapsack::knapSack(int, int[], int[], int)",
            "com.thealgorithms.misc.ThreeSumProblem::BruteForce(int[], int)",
            "com.thealgorithms.sorts.OddEvenSort::oddEvenSort(int[])",
            "com.thealgorithms.maths.Gaussian::valueOfGaussian(int, double[][], double[][])",
            "com.thealgorithms.others.Rotate::rotate(int[][])",
            "com.thealgorithms.sorts.BucketSort::bucketSort(int[])",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::matrixChainOrder()",
            "com.thealgorithms.datastructures.lists.Link::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.DP::main(java.lang.String[])",
            "com.thealgorithms.maths.MatrixUtil::multiply(java.math.BigDecimal[][], java.math.BigDecimal[][])",
            "com.thealgorithms.sorts.TopologicalSort::sort(com.thealgorithms.sorts.TopologicalSort.Graph, com.thealgorithms.sorts.TopologicalSort.Vertex, java.util.LinkedList)",
            "com.thealgorithms.datastructures.trees.CeilInBinarySearchTree::getCeil(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.others.TowerOfHanoi::shift(int, java.lang.String, java.lang.String, java.lang.String)",
            "com.thealgorithms.sorts.BitonicSort::bitonicSort(int[], int, int, int)",
            "com.thealgorithms.sorts.DualPivotQuickSort::dualPivotQuicksort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::isBalancedRecursive(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced.BTNode, int, boolean[])",
            "com.thealgorithms.sorts.StoogeSort::sort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.conversions.RgbHsvConversion::hsvToRgb(double, double, double)",
            "com.thealgorithms.sorts.IntrospectiveSort::partition(java.lang.Comparable[], int, int)",
            "com.thealgorithms.strings.Anagrams::approach3(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.Main::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.Tree::printTopView()",
            "com.thealgorithms.maths.MobiusFunction::mobius(int)",
            "com.thealgorithms.ciphers.DES::feistel(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Graph::<init>(com.thealgorithms.others.Graph.Edge[])",
            "com.thealgorithms.maths.SimpsonIntegration::simpsonsMethod(int, double, double)",
            "com.thealgorithms.others.Graph::dijkstra(java.util.NavigableSet)",
            "com.thealgorithms.maths.SumOfDigits::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::main(java.lang.String[])",
            "com.thealgorithms.datastructures.queues.GenericArrayListQueue::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.CoinChange::minimumCoins(int[], int)",
            "com.thealgorithms.sorts.PigeonholeSort::sort(java.lang.Integer[])",
            "com.thealgorithms.datastructures.queues.CircularQueue::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursive::search(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.datastructures.trees.Main::nearestRightKey(com.thealgorithms.datastructures.trees.NRKTree, int)",
            "com.thealgorithms.searches.UpperBound::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.datastructures.trees.KDTree::insert(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Point, int)",
            "com.thealgorithms.searches.BinarySearch::main(java.lang.String[])",
            "com.thealgorithms.searches.ExponentialSearch::main(java.lang.String[])",
            "com.thealgorithms.searches.IterativeBinarySearch::main(java.lang.String[])",
            "com.thealgorithms.searches.IterativeTernarySearch::main(java.lang.String[])",
            "com.thealgorithms.searches.TernarySearch::main(java.lang.String[])",
            "com.thealgorithms.ciphers.AES::keyExpansion(java.math.BigInteger)",
            "com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder::createTree(java.lang.Integer[], java.lang.Integer[], int, int, int)",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::getRange(int, int, com.thealgorithms.datastructures.trees.LazySegmentTree.Node)",
            "com.thealgorithms.dynamicprogramming.BoardPath::bpRS(int, int, int[])",
            "com.thealgorithms.maths.EulerMethod::eulerFull(double, double, double, double, java.util.function.BiFunction)",
            "com.thealgorithms.backtracking.KnightsTour::orphanDetected(int, int, int)",
            "com.thealgorithms.datastructures.hashmap.hashing.LinearProbingHashMap::put(java.lang.Comparable, java.lang.Object)",
            "com.thealgorithms.datastructures.heaps.LeftistHeap::merge(com.thealgorithms.datastructures.heaps.LeftistHeap.Node, com.thealgorithms.datastructures.heaps.LeftistHeap.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::insert(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.searches.BinarySearch2dArray::binarySearch(int[][], int, int, int, int)",
            "com.thealgorithms.ciphers.Vigenere::encrypt(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.Vigenere::decrypt(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.lists.LinkOperations::insertElementByIndex(int, int, com.thealgorithms.datastructures.lists.DoublyLinkedList)",
            "com.thealgorithms.others.Graph::dijkstra(java.lang.String)",
            "com.thealgorithms.strings.Anagrams::approach4(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.HamiltonianCycle::isPathFound(int)",
            "com.thealgorithms.datastructures.stacks.DecimalToAnyUsingStack::main(java.lang.String[])",
            "com.thealgorithms.ciphers.DES::decrypt(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.Kruskal::kruskal(java.util.HashSet[])",
            "com.thealgorithms.datastructures.stacks.DuplicateBrackets::check(java.lang.String)",
            "com.thealgorithms.maths.PrimeFactorization::pfactors(int)",
            "com.thealgorithms.datastructures.graphs.TopologicalSort::topSortOrder()",
            "com.thealgorithms.misc.ThreeSumProblem::Hashmap(int[], int)",
            "com.thealgorithms.datastructures.graphs.PrimMST::primMST(int[][])",
            "com.thealgorithms.scheduling.SJFScheduling::scheduleProcesses()",
            "com.thealgorithms.sorts.ShellSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder::createTreeOptimized(java.lang.Integer[], java.util.Map, int, int, int)",
            "com.thealgorithms.datastructures.caches.LRUCache::put(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.datastructures.caches.MRUCache::put(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.searches.InterpolationSearch::main(java.lang.String[])",
            "com.thealgorithms.sorts.MergeSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.sorts.Task::task(int[], int, int)",
            "com.thealgorithms.datastructures.trees.LevelOrderTraversal::printGivenLevel(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.datastructures.caches.LRUCache::moveNodeToLast(com.thealgorithms.datastructures.caches.LRUCache.Entry)",
            "com.thealgorithms.datastructures.caches.MRUCache::moveEntryToLast(com.thealgorithms.datastructures.caches.MRUCache.Entry)",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::depthFirstOrder(int, boolean[], java.util.List)",
            "com.thealgorithms.datastructures.trees.CheckBinaryTreeIsValidBST::isBSTUtil(com.thealgorithms.datastructures.trees.BinaryTree.Node, int, int)",
            "com.thealgorithms.strings.PermuteString::generatePermutation(java.lang.String, int, int)",
            "com.thealgorithms.datastructures.lists.SkipList::contains(java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.PostOrderTraversal::iterativePostOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.PreOrderTraversal::iterativePreOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.sorts.BubbleSortRecursion::bubbleSort(java.lang.Comparable[], int)",
            "com.thealgorithms.datastructures.heaps.GenericHeap::downHeapify(int)",
            "com.thealgorithms.datastructures.queues.Deques::main(java.lang.String[])",
            "com.thealgorithms.others.BFPRT::getMinKNumsByBFPRT(int[], int)",
            "com.thealgorithms.datastructures.hashmap.hashing.LinearProbingHashMap::delete(java.lang.Comparable)",
            "com.thealgorithms.sorts.StrandSort::strandSort(java.util.LinkedList)",
            "com.thealgorithms.maths.NonRepeatingElement::main(java.lang.String[])",
            "com.thealgorithms.sorts.CombSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.sorts.SelectionSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.others.CRC16::crc16(java.lang.String)",
            "com.thealgorithms.others.CRCAlgorithm::changeMess()",
            "com.thealgorithms.others.SieveOfEratosthenes::findPrimesTill(int)",
            "com.thealgorithms.backtracking.KnightsTour::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.maths.MatrixUtil::operate(java.math.BigDecimal[][], java.math.BigDecimal[][], java.util.function.BiFunction)",
            "com.thealgorithms.divideandconquer.ClosestPair::yQuickSort(com.thealgorithms.divideandconquer.ClosestPair.Location[], int, int)",
            "com.thealgorithms.divideandconquer.ClosestPair::xQuickSort(com.thealgorithms.divideandconquer.ClosestPair.Location[], int, int)",
            "com.thealgorithms.sorts.QuickSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.maths.CircularConvolutionFFT::fftCircularConvolution(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.maths.ConvolutionFFT::convolutionFFT(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.maths.VampireNumber::isVampireNumber(int, int, boolean)",
            "com.thealgorithms.others.KochSnowflake::GetImage(java.util.ArrayList, int, int)",
            "com.thealgorithms.searches.BreadthFirstSearch::search(com.thealgorithms.searches.DepthFirstSearch.Node, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::removeEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMap.LinkedList::findKey(int)",
            "com.thealgorithms.datastructures.trees.LCA::dfs(java.util.ArrayList, int, int, int[], int[])",
            "com.thealgorithms.dynamicprogramming.Sum_Of_Subset::subsetSum(int[], int, int)",
            "com.thealgorithms.searches.ExponentialSearch::find(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.searches.MonteCarloTreeSearch::monteCarloTreeSearch(com.thealgorithms.searches.MonteCarloTreeSearch.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::getLessThan(int[], int, int, int)",
            "com.thealgorithms.others.Trieac::suggestionsRec(com.thealgorithms.others.Trieac.TrieNode, java.lang.String)",
            "com.thealgorithms.sorts.GnomeSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.strings.Anagrams::approach5(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubCipher::encode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubCipher::decode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubstitutionCipher::decode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubstitutionCipher::encode(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.heaps.FibonacciHeap::fromBuckets(com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode[])",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::lcsString(java.lang.String, java.lang.String, int[][])",
            "com.thealgorithms.maths.Mode::main(java.lang.String[])",
            "com.thealgorithms.misc.ColorContrastRatio::test()",
            "com.thealgorithms.ciphers.Polybius::findLocationByCharacter(char)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::multiply(int[][], int[][])",
            "com.thealgorithms.backtracking.FloodFill::floodFill(int[][], int, int, int, int)",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::boundaryFill(int[][], int, int, int, int)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::isValidPostfixExpression(java.lang.String)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insert(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearch(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::delete(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int, int[][])",
            "com.thealgorithms.others.RabinKarp::searchPat(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteFixup(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::multiply(int[][], int[][])",
            "com.thealgorithms.backtracking.FloodFill::floodFill(int[][], int, int, int, int)",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::boundaryFill(int[][], int, int, int, int)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::isValidPostfixExpression(java.lang.String)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insert(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearch(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::delete(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int, int[][])",
            "com.thealgorithms.others.RabinKarp::searchPat(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteFixup(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.divideandconquer.ClosestPair::closestPair(com.thealgorithms.divideandconquer.ClosestPair.Location[], int)",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::evaluateTurnAroundTime()",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BellmanFord::go()",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::networkFlow(int, int)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::floydwarshall(int[][])",
            "com.thealgorithms.sorts.CycleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::calculateMaxOfMin(int[], int)",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::calc(double)",
            "com.thealgorithms.others.TopKWords.CountWords::getDictionary()",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String, int[][])",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.divideandconquer.SkylineAlgorithm::produceSubSkyLines(java.util.ArrayList)",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(com.thealgorithms.datastructures.trees.AVLSimple.Node, int)",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursive::delete(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.sorts.DualPivotQuickSort::partition(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.SkylineProblem::mergeSkyline(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::infix2PostFix(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::subSet(int[])",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.misc.InverseOfMatrix::gaussian(double[][], int[])",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::solveKnapsackRecursive(int, int[], int[], int, int[][])",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::explore(int, int, char[][], com.thealgorithms.misc.TrieNode, boolean[][], java.util.Set)",
            "com.thealgorithms.sorts.WiggleSort::triColorSort(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(com.thealgorithms.geometry.GrahamScan.Point, com.thealgorithms.geometry.GrahamScan.Point)",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.sorts.CircleSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.StringMatchFiniteAutomata::getNextState(java.lang.String, int, int, int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Sudoku::solveSudoku(int[][], int)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexBU(java.lang.String, java.lang.String)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.ciphers.HillCipher::encrypt(java.lang.String)",
            "com.thealgorithms.searches.TernarySearch::ternarySearch(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.others.BFPRT::bfprt(int[], int, int, int)",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Point, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::getPostfixToInfix(java.lang.String)",
            "com.thealgorithms.others.MiniMaxAlgorithm::miniMax(int, boolean, int, boolean)",
            "com.thealgorithms.datastructures.trees.AVLTree::insert(int)",
            "com.thealgorithms.datastructures.caches.LFUCache::addNodeWithUpdatedFrequency(com.thealgorithms.datastructures.caches.LFUCache.Node)",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnCompsUtil(int, int[], int[], boolean[], java.util.Stack, java.util.List)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearchIter(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.searches.QuickSelect::partition(java.util.List, int, int, int, int)",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::addEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::multiply(int[][], int[][])",
            "com.thealgorithms.backtracking.FloodFill::floodFill(int[][], int, int, int, int)",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::boundaryFill(int[][], int, int, int, int)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::isValidPostfixExpression(java.lang.String)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insert(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearch(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::delete(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int, int[][])",
            "com.thealgorithms.others.RabinKarp::searchPat(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteFixup(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.divideandconquer.ClosestPair::closestPair(com.thealgorithms.divideandconquer.ClosestPair.Location[], int)",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::evaluateTurnAroundTime()",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BellmanFord::go()",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::networkFlow(int, int)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::floydwarshall(int[][])",
            "com.thealgorithms.sorts.CycleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::calculateMaxOfMin(int[], int)",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::calc(double)",
            "com.thealgorithms.others.TopKWords.CountWords::getDictionary()",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String, int[][])",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.divideandconquer.SkylineAlgorithm::produceSubSkyLines(java.util.ArrayList)",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(com.thealgorithms.datastructures.trees.AVLSimple.Node, int)",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursive::delete(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.sorts.DualPivotQuickSort::partition(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.SkylineProblem::mergeSkyline(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::infix2PostFix(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::subSet(int[])",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.misc.InverseOfMatrix::gaussian(double[][], int[])",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::solveKnapsackRecursive(int, int[], int[], int, int[][])",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::explore(int, int, char[][], com.thealgorithms.misc.TrieNode, boolean[][], java.util.Set)",
            "com.thealgorithms.sorts.WiggleSort::triColorSort(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(com.thealgorithms.geometry.GrahamScan.Point, com.thealgorithms.geometry.GrahamScan.Point)",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.sorts.CircleSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.StringMatchFiniteAutomata::getNextState(java.lang.String, int, int, int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Sudoku::solveSudoku(int[][], int)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexBU(java.lang.String, java.lang.String)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.ciphers.HillCipher::encrypt(java.lang.String)",
            "com.thealgorithms.searches.TernarySearch::ternarySearch(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.others.BFPRT::bfprt(int[], int, int, int)",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Point, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::getPostfixToInfix(java.lang.String)",
            "com.thealgorithms.others.MiniMaxAlgorithm::miniMax(int, boolean, int, boolean)",
            "com.thealgorithms.datastructures.trees.AVLTree::insert(int)",
            "com.thealgorithms.datastructures.caches.LFUCache::addNodeWithUpdatedFrequency(com.thealgorithms.datastructures.caches.LFUCache.Node)",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnCompsUtil(int, int[], int[], boolean[], java.util.Stack, java.util.List)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearchIter(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.searches.QuickSelect::partition(java.util.List, int, int, int, int)",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::addEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::sink()",
            "com.thealgorithms.maths.DeterminantOfMatrix::determinant(int[][], int)",
            "com.thealgorithms.others.KochSnowflake::main(java.lang.String[])",
            "com.thealgorithms.others.BankersAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.ciphers.HillCipher::decrypt(java.lang.String)",
            "com.thealgorithms.sorts.MergeSortRecursive::sort(java.util.List, java.util.List)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::findNode(com.thealgorithms.datastructures.trees.RedBlackBST.Node, com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.dynamicprogramming.MatrixChainRecursiveTopDownMemoisation::Lookup_Chain(int[][], int[], int, int)",
            "com.thealgorithms.searches.QuickSelect::selectIndex(java.util.List, int, int, int)",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence::recursiveLPS(java.lang.String, java.lang.String)",
            "com.thealgorithms.maths.SumOfArithmeticSeries::main(java.lang.String[])",
            "com.thealgorithms.sorts.WiggleSort::wiggleSort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.graphs.Cycle::dfs(java.lang.Integer, java.lang.Integer, java.util.ArrayList)",
            "com.thealgorithms.others.Mandelbrot::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.VerticalOrderTraversal::verticalTraversal(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.graphs.Graphs::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MaxHeap::deleteElement(int)",
            "com.thealgorithms.datastructures.heaps.MinHeap::deleteElement(int)",
            "com.thealgorithms.strings.Solution::longestPalindrome(java.lang.String)",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::isBalancedIterative(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced.BinaryTree)",
            "com.thealgorithms.geometry.GrahamScan::<init>(com.thealgorithms.geometry.GrahamScan.Point[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubstring::LPS(java.lang.String)",
            "com.thealgorithms.conversions.AnyBaseToAnyBase::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EggDropping::minTrials(int, int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::main(java.lang.String[])",
            "com.thealgorithms.others.PerlinNoise::generatePerlinNoise(int, int, int, float, long)",
            "com.thealgorithms.sorts.CountingSort::main(java.lang.String[])",
            "com.thealgorithms.searches.SaddlebackSearch::find(int[][], int, int, int)",
            "com.thealgorithms.others.Trieac::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::bipartite(int, java.util.ArrayList, int[], int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::delete(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.MergeSort::merge(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.sorts.TimSort::merge(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.ciphers.Caesar::encode(java.lang.String, int)",
            "com.thealgorithms.ciphers.Caesar::decode(java.lang.String, int)",
            "com.thealgorithms.maths.PythagoreanTriple::main(java.lang.String[])",
            "com.thealgorithms.strings.HorspoolSearch::firstOccurrence(java.lang.String, java.lang.String, boolean)",
            "com.thealgorithms.maths.ParseInteger::parseInt(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::breadthFirstOrder(int)",
            "com.thealgorithms.datastructures.hashmap.hashing.Intersection::intersection(int[], int[])",
            "com.thealgorithms.backtracking.NQueens::getSolution(int, java.util.List, int[], int)",
            "com.thealgorithms.others.PerlinNoise::main(java.lang.String[])",
            "com.thealgorithms.strings.ValidParentheses::isValid(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::getLCS(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.SubsetSum::subsetSum(int[], int)",
            "com.thealgorithms.datastructures.stacks.StackArrayList::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.PalindromicPartitioning::minimalpartitions(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.ConnectedComponent::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.MatrixGraphs::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BruteForceKnapsack::knapSack(int, int[], int[], int)",
            "com.thealgorithms.backtracking.PowerSum::Sum(int, int, int)",
            "com.thealgorithms.maths.KaprekarNumbers::isKaprekarNumber(long)",
            "com.thealgorithms.maths.PowRecursion::main(java.lang.String[])",
            "com.thealgorithms.sorts.HeapSort::siftDown(java.lang.Comparable[], int, int)",
            "com.thealgorithms.maths.Mode::mode(int[])",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::main(java.lang.String[])",
            "com.thealgorithms.misc.ThreeSumProblem::TwoPointer(int[], int)",
            "com.thealgorithms.searches.MonteCarloTreeSearch::getPromisingNode(com.thealgorithms.searches.MonteCarloTreeSearch.Node)",
            "com.thealgorithms.ciphers.AES::scheduleCore(java.math.BigInteger, int)",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::sortTable(java.lang.Object[][])",
            "com.thealgorithms.datastructures.lists.SkipList::toString()",
            "com.thealgorithms.dynamicprogramming.ShortestSuperSequence::lcs(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.dynamicprogramming.LongestValidParentheses::getLongestValidParentheses(java.lang.String)",
            "com.thealgorithms.others.LowestBasePalindrome::lowestBasePalindrome(int)",
            "com.thealgorithms.maths.FFTBluestein::fftBluestein(java.util.ArrayList, boolean)",
            "com.thealgorithms.maths.MagicSquare::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.DP::findWays(int, int, int)",
            "com.thealgorithms.misc.InverseOfMatrix::invert(double[][])",
            "com.thealgorithms.datastructures.trees.KDTree::findMax(com.thealgorithms.datastructures.trees.KDTree.Node, int)",
            "com.thealgorithms.searches.BinarySearch::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.searches.LowerBound::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.sorts.SlowSort::sort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.datastructures.trees.SegmentTree::getSumTree(int, int, int, int, int)",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::storeAllPathsUtil(java.lang.Integer, java.lang.Integer, boolean[], java.util.List)",
            "com.thealgorithms.backtracking.KnightsTour::solve(int, int, int)",
            "com.thealgorithms.backtracking.WordSearch::doDFS(int, int, int)",
            "com.thealgorithms.conversions.AnyBaseToDecimal::main(java.lang.String[])",
            "com.thealgorithms.searches.OrderAgnosticBinarySearch::BinSearchAlgo(int[], int, int, int)",
            "com.thealgorithms.strings.CheckAnagrams::isAnagrams(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::multiply(int[][], int[][])",
            "com.thealgorithms.backtracking.FloodFill::floodFill(int[][], int, int, int, int)",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::boundaryFill(int[][], int, int, int, int)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::isValidPostfixExpression(java.lang.String)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insert(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearch(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::delete(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int, int[][])",
            "com.thealgorithms.others.RabinKarp::searchPat(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteFixup(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.divideandconquer.ClosestPair::closestPair(com.thealgorithms.divideandconquer.ClosestPair.Location[], int)",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::evaluateTurnAroundTime()",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BellmanFord::go()",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::networkFlow(int, int)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::floydwarshall(int[][])",
            "com.thealgorithms.sorts.CycleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::calculateMaxOfMin(int[], int)",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::calc(double)",
            "com.thealgorithms.others.TopKWords.CountWords::getDictionary()",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String, int[][])",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.divideandconquer.SkylineAlgorithm::produceSubSkyLines(java.util.ArrayList)",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(com.thealgorithms.datastructures.trees.AVLSimple.Node, int)",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursive::delete(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.sorts.DualPivotQuickSort::partition(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.SkylineProblem::mergeSkyline(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::infix2PostFix(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::subSet(int[])",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.misc.InverseOfMatrix::gaussian(double[][], int[])",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::solveKnapsackRecursive(int, int[], int[], int, int[][])",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::explore(int, int, char[][], com.thealgorithms.misc.TrieNode, boolean[][], java.util.Set)",
            "com.thealgorithms.sorts.WiggleSort::triColorSort(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(com.thealgorithms.geometry.GrahamScan.Point, com.thealgorithms.geometry.GrahamScan.Point)",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.sorts.CircleSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.StringMatchFiniteAutomata::getNextState(java.lang.String, int, int, int)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Sudoku::solveSudoku(int[][], int)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexBU(java.lang.String, java.lang.String)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.ciphers.HillCipher::encrypt(java.lang.String)",
            "com.thealgorithms.searches.TernarySearch::ternarySearch(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.others.BFPRT::bfprt(int[], int, int, int)",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Point, com.thealgorithms.datastructures.trees.KDTree.Node)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::getPostfixToInfix(java.lang.String)",
            "com.thealgorithms.others.MiniMaxAlgorithm::miniMax(int, boolean, int, boolean)",
            "com.thealgorithms.datastructures.trees.AVLTree::insert(int)",
            "com.thealgorithms.datastructures.caches.LFUCache::addNodeWithUpdatedFrequency(com.thealgorithms.datastructures.caches.LFUCache.Node)",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnCompsUtil(int, int[], int[], boolean[], java.util.Stack, java.util.List)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearchIter(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.searches.QuickSelect::partition(java.util.List, int, int, int, int)",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::addEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::sink()",
            "com.thealgorithms.maths.DeterminantOfMatrix::determinant(int[][], int)",
            "com.thealgorithms.others.KochSnowflake::main(java.lang.String[])",
            "com.thealgorithms.others.BankersAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.ciphers.HillCipher::decrypt(java.lang.String)",
            "com.thealgorithms.sorts.MergeSortRecursive::sort(java.util.List, java.util.List)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::findNode(com.thealgorithms.datastructures.trees.RedBlackBST.Node, com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.dynamicprogramming.MatrixChainRecursiveTopDownMemoisation::Lookup_Chain(int[][], int[], int, int)",
            "com.thealgorithms.searches.QuickSelect::selectIndex(java.util.List, int, int, int)",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence::recursiveLPS(java.lang.String, java.lang.String)",
            "com.thealgorithms.maths.SumOfArithmeticSeries::main(java.lang.String[])",
            "com.thealgorithms.sorts.WiggleSort::wiggleSort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.graphs.Cycle::dfs(java.lang.Integer, java.lang.Integer, java.util.ArrayList)",
            "com.thealgorithms.others.Mandelbrot::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.VerticalOrderTraversal::verticalTraversal(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.graphs.Graphs::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MaxHeap::deleteElement(int)",
            "com.thealgorithms.datastructures.heaps.MinHeap::deleteElement(int)",
            "com.thealgorithms.strings.Solution::longestPalindrome(java.lang.String)",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::isBalancedIterative(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced.BinaryTree)",
            "com.thealgorithms.geometry.GrahamScan::<init>(com.thealgorithms.geometry.GrahamScan.Point[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubstring::LPS(java.lang.String)",
            "com.thealgorithms.conversions.AnyBaseToAnyBase::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EggDropping::minTrials(int, int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::main(java.lang.String[])",
            "com.thealgorithms.others.PerlinNoise::generatePerlinNoise(int, int, int, float, long)",
            "com.thealgorithms.sorts.CountingSort::main(java.lang.String[])",
            "com.thealgorithms.searches.SaddlebackSearch::find(int[][], int, int, int)",
            "com.thealgorithms.others.Trieac::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::bipartite(int, java.util.ArrayList, int[], int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::delete(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.sorts.MergeSort::merge(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.sorts.TimSort::merge(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.ciphers.Caesar::encode(java.lang.String, int)",
            "com.thealgorithms.ciphers.Caesar::decode(java.lang.String, int)",
            "com.thealgorithms.maths.PythagoreanTriple::main(java.lang.String[])",
            "com.thealgorithms.strings.HorspoolSearch::firstOccurrence(java.lang.String, java.lang.String, boolean)",
            "com.thealgorithms.maths.ParseInteger::parseInt(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::breadthFirstOrder(int)",
            "com.thealgorithms.datastructures.hashmap.hashing.Intersection::intersection(int[], int[])",
            "com.thealgorithms.backtracking.NQueens::getSolution(int, java.util.List, int[], int)",
            "com.thealgorithms.others.PerlinNoise::main(java.lang.String[])",
            "com.thealgorithms.strings.ValidParentheses::isValid(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::getLCS(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.SubsetSum::subsetSum(int[], int)",
            "com.thealgorithms.datastructures.stacks.StackArrayList::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.PalindromicPartitioning::minimalpartitions(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.ConnectedComponent::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.MatrixGraphs::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BruteForceKnapsack::knapSack(int, int[], int[], int)",
            "com.thealgorithms.backtracking.PowerSum::Sum(int, int, int)",
            "com.thealgorithms.maths.KaprekarNumbers::isKaprekarNumber(long)",
            "com.thealgorithms.maths.PowRecursion::main(java.lang.String[])",
            "com.thealgorithms.sorts.HeapSort::siftDown(java.lang.Comparable[], int, int)",
            "com.thealgorithms.maths.Mode::mode(int[])",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::main(java.lang.String[])",
            "com.thealgorithms.misc.ThreeSumProblem::TwoPointer(int[], int)",
            "com.thealgorithms.searches.MonteCarloTreeSearch::getPromisingNode(com.thealgorithms.searches.MonteCarloTreeSearch.Node)",
            "com.thealgorithms.ciphers.AES::scheduleCore(java.math.BigInteger, int)",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::sortTable(java.lang.Object[][])",
            "com.thealgorithms.datastructures.lists.SkipList::toString()",
            "com.thealgorithms.dynamicprogramming.ShortestSuperSequence::lcs(java.lang.String, java.lang.String, int, int)",
            "com.thealgorithms.dynamicprogramming.LongestValidParentheses::getLongestValidParentheses(java.lang.String)",
            "com.thealgorithms.others.LowestBasePalindrome::lowestBasePalindrome(int)",
            "com.thealgorithms.maths.FFTBluestein::fftBluestein(java.util.ArrayList, boolean)",
            "com.thealgorithms.maths.MagicSquare::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.DP::findWays(int, int, int)",
            "com.thealgorithms.misc.InverseOfMatrix::invert(double[][])",
            "com.thealgorithms.datastructures.trees.KDTree::findMax(com.thealgorithms.datastructures.trees.KDTree.Node, int)",
            "com.thealgorithms.searches.BinarySearch::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.searches.LowerBound::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.sorts.SlowSort::sort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.datastructures.trees.SegmentTree::getSumTree(int, int, int, int, int)",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::storeAllPathsUtil(java.lang.Integer, java.lang.Integer, boolean[], java.util.List)",
            "com.thealgorithms.backtracking.KnightsTour::solve(int, int, int)",
            "com.thealgorithms.backtracking.WordSearch::doDFS(int, int, int)",
            "com.thealgorithms.conversions.AnyBaseToDecimal::main(java.lang.String[])",
            "com.thealgorithms.searches.OrderAgnosticBinarySearch::BinSearchAlgo(int[], int, int, int)",
            "com.thealgorithms.strings.CheckAnagrams::isAnagrams(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Graph.Vertex::equals(java.lang.Object)",
            "com.thealgorithms.searches.HowManyTimesRotated::rotated(int[])",
            "com.thealgorithms.others.KMP::KMPmatcher(java.lang.String, java.lang.String)",
            "com.thealgorithms.strings.zigZagPattern.zigZagPattern::encode(java.lang.String, int)",
            "com.thealgorithms.dynamicprogramming.LongestAlternatingSubsequence::AlternatingLength(int[], int)",
            "com.thealgorithms.searches.DepthFirstSearch::main(java.lang.String[])",
            "com.thealgorithms.sorts.MergeSortNoExtraSpace::merge_sort(int[], int, int, int)",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::updateRange(int, int, int, com.thealgorithms.datastructures.trees.LazySegmentTree.Node)",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::isBipartite(int, java.util.ArrayList)",
            "com.thealgorithms.datastructures.lists.CursorLinkedList::remove(java.lang.Object)",
            "com.thealgorithms.searches.FibonacciSearch::find(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.datastructures.lists.SkipList::add(java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.LevelOrderTraversal::traverse(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.sorts.BubbleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack::knapSack(int, int[], int[], int)",
            "com.thealgorithms.sorts.InsertionSort::sentinelSort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.trees.ZigzagTraversal::traverse(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.sorts.CocktailShakerSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.graphs.dijkstras::dijkstra(int[][], int)",
            "com.thealgorithms.others.StackPostfixNotation::postfixEvaluate(java.lang.String)",
            "com.thealgorithms.datastructures.trees.KDTree::build(com.thealgorithms.datastructures.trees.KDTree.Point[], int)",
            "com.thealgorithms.dynamicprogramming.WineProblem::WPTD(int[], int, int, int[][])",
            "com.thealgorithms.others.QueueUsingTwoStacks::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.SegmentTree::updateTree(int, int, int, int, int)",
            "com.thealgorithms.sorts.IntrospectiveSort::introSort(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.searches.IterativeTernarySearch::find(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.sorts.BitonicSort::bitonicMerge(int[], int, int, int)",
            "com.thealgorithms.dynamicprogramming.LongestIncreasingSubsequence::LIS(int[])",
            "com.thealgorithms.maths.Pow::main(java.lang.String[])",
            "com.thealgorithms.sorts.DutchNationalFlagSort::dutch_national_flag_sort(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.backtracking.Combination::backtracking(java.lang.Object[], int, java.util.TreeSet, java.util.List)",
            "com.thealgorithms.datastructures.hashmap.hashing.MajorityElement::majority(int[])",
            "com.thealgorithms.searches.sortOrderAgnosticBinarySearch::find(int[], int)",
            "com.thealgorithms.strings.Anagrams::approach2(java.lang.String, java.lang.String)",
            "com.thealgorithms.backtracking.WordSearch::exist(char[][], java.lang.String)",
            "com.thealgorithms.datastructures.lists.MergeSortedArrayList::merge(java.util.List, java.util.List, java.util.List)",
            "com.thealgorithms.datastructures.trees.AVLTree::delete(com.thealgorithms.datastructures.trees.AVLTree.Node)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::swapNodes(int, int)",
            "com.thealgorithms.dynamicprogramming.Knapsack::knapSack(int, int[], int[], int)",
            "com.thealgorithms.misc.ThreeSumProblem::BruteForce(int[], int)",
            "com.thealgorithms.sorts.OddEvenSort::oddEvenSort(int[])",
            "com.thealgorithms.maths.Gaussian::valueOfGaussian(int, double[][], double[][])",
            "com.thealgorithms.others.Rotate::rotate(int[][])",
            "com.thealgorithms.sorts.BucketSort::bucketSort(int[])",
            "com.thealgorithms.datastructures.lists.Link::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.DP::main(java.lang.String[])",
            "com.thealgorithms.maths.MatrixUtil::multiply(java.math.BigDecimal[][], java.math.BigDecimal[][])",
            "com.thealgorithms.sorts.TopologicalSort::sort(com.thealgorithms.sorts.TopologicalSort.Graph, com.thealgorithms.sorts.TopologicalSort.Vertex, java.util.LinkedList)",
            "com.thealgorithms.datastructures.trees.CeilInBinarySearchTree::getCeil(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.others.TowerOfHanoi::shift(int, java.lang.String, java.lang.String, java.lang.String)",
            "com.thealgorithms.sorts.BitonicSort::bitonicSort(int[], int, int, int)",
            "com.thealgorithms.sorts.DualPivotQuickSort::dualPivotQuicksort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::isBalancedRecursive(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced.BTNode, int, boolean[])",
            "com.thealgorithms.sorts.StoogeSort::sort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.strings.Anagrams::approach3(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.Main::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.Tree::printTopView()",
            "com.thealgorithms.maths.MobiusFunction::mobius(int)",
            "com.thealgorithms.ciphers.DES::feistel(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Graph::<init>(com.thealgorithms.others.Graph.Edge[])",
            "com.thealgorithms.maths.SimpsonIntegration::simpsonsMethod(int, double, double)",
            "com.thealgorithms.others.Graph::dijkstra(java.util.NavigableSet)",
            "com.thealgorithms.maths.SumOfDigits::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::main(java.lang.String[])",
            "com.thealgorithms.datastructures.queues.GenericArrayListQueue::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.CoinChange::minimumCoins(int[], int)",
            "com.thealgorithms.sorts.PigeonholeSort::sort(java.lang.Integer[])",
            "com.thealgorithms.datastructures.queues.CircularQueue::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursive::search(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.datastructures.trees.Main::nearestRightKey(com.thealgorithms.datastructures.trees.NRKTree, int)",
            "com.thealgorithms.searches.UpperBound::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.datastructures.trees.KDTree::insert(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Point, int)",
            "com.thealgorithms.searches.BinarySearch::main(java.lang.String[])",
            "com.thealgorithms.searches.ExponentialSearch::main(java.lang.String[])",
            "com.thealgorithms.searches.IterativeBinarySearch::main(java.lang.String[])",
            "com.thealgorithms.searches.IterativeTernarySearch::main(java.lang.String[])",
            "com.thealgorithms.searches.TernarySearch::main(java.lang.String[])",
            "com.thealgorithms.ciphers.AES::keyExpansion(java.math.BigInteger)",
            "com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder::createTree(java.lang.Integer[], java.lang.Integer[], int, int, int)",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::getRange(int, int, com.thealgorithms.datastructures.trees.LazySegmentTree.Node)",
            "com.thealgorithms.dynamicprogramming.BoardPath::bpRS(int, int, int[])",
            "com.thealgorithms.datastructures.hashmap.hashing.LinearProbingHashMap::put(java.lang.Comparable, java.lang.Object)",
            "com.thealgorithms.datastructures.heaps.LeftistHeap::merge(com.thealgorithms.datastructures.heaps.LeftistHeap.Node, com.thealgorithms.datastructures.heaps.LeftistHeap.Node)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::insert(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.ciphers.Vigenere::encrypt(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.Vigenere::decrypt(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.Graph::dijkstra(java.lang.String)",
            "com.thealgorithms.strings.Anagrams::approach4(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.HamiltonianCycle::isPathFound(int)",
            "com.thealgorithms.datastructures.stacks.DecimalToAnyUsingStack::main(java.lang.String[])",
            "com.thealgorithms.ciphers.DES::decrypt(java.lang.String)",
            "com.thealgorithms.datastructures.stacks.DuplicateBrackets::check(java.lang.String)",
            "com.thealgorithms.maths.PrimeFactorization::pfactors(int)",
            "com.thealgorithms.datastructures.graphs.TopologicalSort::topSortOrder()",
            "com.thealgorithms.misc.ThreeSumProblem::Hashmap(int[], int)",
            "com.thealgorithms.datastructures.graphs.PrimMST::primMST(int[][])",
            "com.thealgorithms.scheduling.SJFScheduling::scheduleProcesses()",
            "com.thealgorithms.sorts.ShellSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder::createTreeOptimized(java.lang.Integer[], java.util.Map, int, int, int)",
            "com.thealgorithms.datastructures.caches.LRUCache::put(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.datastructures.caches.MRUCache::put(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.searches.InterpolationSearch::main(java.lang.String[])",
            "com.thealgorithms.sorts.MergeSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.datastructures.trees.LevelOrderTraversal::printGivenLevel(com.thealgorithms.datastructures.trees.BinaryTree.Node, int)",
            "com.thealgorithms.datastructures.trees.CheckBinaryTreeIsValidBST::isBSTUtil(com.thealgorithms.datastructures.trees.BinaryTree.Node, int, int)",
            "com.thealgorithms.strings.PermuteString::generatePermutation(java.lang.String, int, int)",
            "com.thealgorithms.datastructures.lists.SkipList::contains(java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.PostOrderTraversal::iterativePostOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.PreOrderTraversal::iterativePreOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.sorts.BubbleSortRecursion::bubbleSort(java.lang.Comparable[], int)",
            "com.thealgorithms.datastructures.heaps.GenericHeap::downHeapify(int)",
            "com.thealgorithms.datastructures.queues.Deques::main(java.lang.String[])",
            "com.thealgorithms.others.BFPRT::getMinKNumsByBFPRT(int[], int)",
            "com.thealgorithms.datastructures.hashmap.hashing.LinearProbingHashMap::delete(java.lang.Comparable)",
            "com.thealgorithms.sorts.StrandSort::strandSort(java.util.LinkedList)",
            "com.thealgorithms.maths.NonRepeatingElement::main(java.lang.String[])",
            "com.thealgorithms.sorts.CombSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.sorts.SelectionSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.others.CRC16::crc16(java.lang.String)",
            "com.thealgorithms.others.CRCAlgorithm::changeMess()",
            "com.thealgorithms.others.SieveOfEratosthenes::findPrimesTill(int)",
            "com.thealgorithms.backtracking.KnightsTour::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.maths.MatrixUtil::operate(java.math.BigDecimal[][], java.math.BigDecimal[][], java.util.function.BiFunction)",
            "com.thealgorithms.sorts.QuickSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.maths.CircularConvolutionFFT::fftCircularConvolution(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.maths.VampireNumber::isVampireNumber(int, int, boolean)",
            "com.thealgorithms.searches.BreadthFirstSearch::search(com.thealgorithms.searches.DepthFirstSearch.Node, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::removeEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMap.LinkedList::findKey(int)",
            "com.thealgorithms.datastructures.trees.LCA::dfs(java.util.ArrayList, int, int, int[], int[])",
            "com.thealgorithms.dynamicprogramming.Sum_Of_Subset::subsetSum(int[], int, int)",
            "com.thealgorithms.searches.MonteCarloTreeSearch::monteCarloTreeSearch(com.thealgorithms.searches.MonteCarloTreeSearch.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::getLessThan(int[], int, int, int)",
            "com.thealgorithms.sorts.GnomeSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.strings.Anagrams::approach5(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubCipher::encode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubCipher::decode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubstitutionCipher::decode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubstitutionCipher::encode(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.heaps.FibonacciHeap::fromBuckets(com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode[])",
            "com.thealgorithms.maths.Mode::main(java.lang.String[])",
            "com.thealgorithms.misc.ColorContrastRatio::test()",
            "com.thealgorithms.ciphers.Polybius::findLocationByCharacter(char)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insertDemo()",
            "com.thealgorithms.others.RabinKarp::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteDemo()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.thealgorithms.sorts.SortAlgorithm::sort(java.util.List)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insertDemo()",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::main(java.lang.String[])",
            "com.thealgorithms.others.RabinKarp::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::scheduleProcesses()",
            "com.thealgorithms.datastructures.graphs.BellmanFord::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::main(java.lang.String[])",
            "com.thealgorithms.others.TopKWords::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(int)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::remove(int)",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::knapSack(int, int[], int[], int)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.others.Sudoku::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.others.MiniMaxAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLTree::main(java.lang.String[])",
            "com.thealgorithms.datastructures.caches.LFUCache::put(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnectedComponents(int, java.util.List)",
            "com.thealgorithms.datastructures.graphs.Graphs::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteDemo()",
            "com.thealgorithms.misc.InverseOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::main(java.lang.String[])",
            "com.thealgorithms.ciphers.HillCipher::main(java.lang.String[])",
            "com.thealgorithms.searches.TernarySearch::main(java.lang.String[])",
            "com.thealgorithms.misc.RangeInSortedArray::main(java.lang.String[])",
            "com.thealgorithms.others.SkylineProblem::main(java.lang.String[])",
            "com.thealgorithms.others.StringMatchFiniteAutomata::main(java.lang.String[])",
            "com.thealgorithms.others.BFPRT::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.thealgorithms.sorts.SortAlgorithm::sort(java.util.List)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteDemo()",
            "com.thealgorithms.ciphers.HillCipher::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.others.BankersAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.others.Mandelbrot::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Graphs::main(java.lang.String[])",
            "com.thealgorithms.others.PerlinNoise::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.MatrixGraphs::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insertDemo()",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::main(java.lang.String[])",
            "com.thealgorithms.misc.InverseOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.others.KochSnowflake::main(java.lang.String[])",
            "com.thealgorithms.maths.SumOfArithmeticSeries::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.VerticalOrderTraversal::verticalTraversal(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.geometry.GrahamScan::<init>(com.thealgorithms.geometry.GrahamScan.Point[])",
            "com.thealgorithms.conversions.AnyBaseToAnyBase::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::main(java.lang.String[])",
            "com.thealgorithms.sorts.CountingSort::main(java.lang.String[])",
            "com.thealgorithms.others.Trieac::main(java.lang.String[])",
            "com.thealgorithms.ciphers.Caesar::encode(java.lang.String, int)",
            "com.thealgorithms.maths.PythagoreanTriple::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.Intersection::intersection(int[], int[])",
            "com.thealgorithms.strings.ValidParentheses::isValid(java.lang.String)",
            "com.thealgorithms.datastructures.stacks.StackArrayList::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.ConnectedComponent::main(java.lang.String[])",
            "com.thealgorithms.maths.PowRecursion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SkipList::toString()",
            "com.thealgorithms.dynamicprogramming.LongestValidParentheses::getLongestValidParentheses(java.lang.String)",
            "com.thealgorithms.maths.MagicSquare::main(java.lang.String[])",
            "com.thealgorithms.conversions.AnyBaseToDecimal::main(java.lang.String[])",
            "com.thealgorithms.searches.OrderAgnosticBinarySearch::BinSearchAlgo(int[], int, int, int)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::main(java.lang.String[])",
            "com.thealgorithms.others.RabinKarp::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::scheduleProcesses()",
            "com.thealgorithms.datastructures.graphs.BellmanFord::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::main(java.lang.String[])",
            "com.thealgorithms.others.TopKWords::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(int)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::remove(int)",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::knapSack(int, int[], int[], int)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.others.Sudoku::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.others.MiniMaxAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLTree::main(java.lang.String[])",
            "com.thealgorithms.datastructures.caches.LFUCache::get(java.lang.Object)",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnectedComponents(int, java.util.List)",
            "com.thealgorithms.maths.DeterminantOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.strings.LongestPalindromicSubstring::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubstring::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EggDropping::main(java.lang.String[])",
            "com.thealgorithms.searches.SaddlebackSearch::main(java.lang.String[])",
            "com.thealgorithms.ciphers.Caesar::bruteforce(java.lang.String)",
            "com.thealgorithms.strings.HorspoolSearch::findFirstInsensitive(java.lang.String, java.lang.String)",
            "com.thealgorithms.maths.ParseInteger::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.PartitionProblem::partition(int[])",
            "com.thealgorithms.dynamicprogramming.PalindromicPartitioning::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BruteForceKnapsack::main(java.lang.String[])",
            "com.thealgorithms.backtracking.PowerSum::powSum(int, int)",
            "com.thealgorithms.maths.KaprekarNumbers::kaprekarNumberInRange(long, long)",
            "com.thealgorithms.maths.Mode::main(java.lang.String[])",
            "com.thealgorithms.misc.ThreeSumProblem::main(java.lang.String[])",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::encrpyter(java.lang.String, java.lang.String, java.lang.String)",
            "com.thealgorithms.others.LowestBasePalindrome::main(java.lang.String[])",
            "com.thealgorithms.maths.CircularConvolutionFFT::fftCircularConvolution(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.dynamicprogramming.DP::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::findMax(int)",
            "com.thealgorithms.datastructures.trees.SegmentTree::getSum(int, int)",
            "com.thealgorithms.backtracking.KnightsTour::main(java.lang.String[])",
            "com.thealgorithms.backtracking.WordSearch::exist(char[][], java.lang.String)",
            "com.thealgorithms.strings.CheckAnagrams::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::main(java.lang.String[])",
            "com.thealgorithms.searches.TernarySearch::main(java.lang.String[])",
            "com.thealgorithms.misc.RangeInSortedArray::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.MatrixChainRecursiveTopDownMemoisation::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Cycles::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MaxHeap::getElement()",
            "com.thealgorithms.datastructures.heaps.MinHeap::getElement()",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::main(java.lang.String[])",
            "com.thealgorithms.backtracking.NQueens::main(java.lang.String[])",
            "com.thealgorithms.searches.MonteCarloTreeSearch::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.ShortestSuperSequence::main(java.lang.String[])",
            "com.thealgorithms.searches.BinarySearch::main(java.lang.String[])",
            "com.thealgorithms.searches.LowerBound::main(java.lang.String[])",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::allPathsFromSourceToTarget(int, int[][], int, int)",
            "com.thealgorithms.others.SkylineProblem::main(java.lang.String[])",
            "com.thealgorithms.others.StringMatchFiniteAutomata::main(java.lang.String[])",
            "com.thealgorithms.others.BFPRT::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::main(java.lang.String[])",
            "com.thealgorithms.sorts.App::main(java.lang.String[])",
            "com.thealgorithms.ciphers.AES::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.thealgorithms.sorts.SortAlgorithm::sort(java.util.List)",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.maths.CircularConvolutionFFT::fftCircularConvolution(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.others.BFPRT::main(java.lang.String[])",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.others.Trieac::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.MatrixGraphs::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::main(java.lang.String[])",
            "com.thealgorithms.backtracking.KnightsTour::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteDemo()",
            "com.thealgorithms.misc.ThreeSumProblem::main(java.lang.String[])",
            "com.thealgorithms.strings.Anagrams::main(java.lang.String[])",
            "com.thealgorithms.others.Dijkstra::main(java.lang.String[])",
            "com.thealgorithms.ciphers.HillCipher::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.others.KochSnowflake::main(java.lang.String[])",
            "com.thealgorithms.others.BankersAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.others.Mandelbrot::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Graphs::main(java.lang.String[])",
            "com.thealgorithms.others.PerlinNoise::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.ConnectedComponent::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::main(java.lang.String[])",
            "com.thealgorithms.backtracking.WordSearch::exist(char[][], java.lang.String)",
            "com.thealgorithms.datastructures.lists.Link::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.DP::main(java.lang.String[])",
            "com.thealgorithms.searches.BinarySearch::main(java.lang.String[])",
            "com.thealgorithms.searches.ExponentialSearch::main(java.lang.String[])",
            "com.thealgorithms.searches.IterativeTernarySearch::main(java.lang.String[])",
            "com.thealgorithms.searches.TernarySearch::main(java.lang.String[])",
            "com.thealgorithms.ciphers.DES::decrypt(java.lang.String)",
            "com.thealgorithms.datastructures.caches.LRUCache::put(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.datastructures.caches.MRUCache::put(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.maths.Mode::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insertDemo()",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::main(java.lang.String[])",
            "com.thealgorithms.others.Sudoku::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLTree::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::main(java.lang.String[])",
            "com.thealgorithms.misc.InverseOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.maths.MatrixUtil::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.LinearProbingHashMap::delete(java.lang.Object)",
            "com.thealgorithms.searches.MonteCarloTreeSearch::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MaxHeap::getElement()",
            "com.thealgorithms.datastructures.heaps.MinHeap::getElement()",
            "com.thealgorithms.sorts.BitonicSort::main(java.lang.String[])",
            "com.thealgorithms.ciphers.AES::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.maths.SumOfArithmeticSeries::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.VerticalOrderTraversal::verticalTraversal(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.geometry.GrahamScan::<init>(com.thealgorithms.geometry.GrahamScan.Point[])",
            "com.thealgorithms.conversions.AnyBaseToAnyBase::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::main(java.lang.String[])",
            "com.thealgorithms.sorts.CountingSort::main(java.lang.String[])",
            "com.thealgorithms.ciphers.Caesar::encode(java.lang.String, int)",
            "com.thealgorithms.maths.PythagoreanTriple::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.Intersection::intersection(int[], int[])",
            "com.thealgorithms.strings.ValidParentheses::isValid(java.lang.String)",
            "com.thealgorithms.datastructures.stacks.StackArrayList::main(java.lang.String[])",
            "com.thealgorithms.maths.PowRecursion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SkipList::toString()",
            "com.thealgorithms.dynamicprogramming.LongestValidParentheses::getLongestValidParentheses(java.lang.String)",
            "com.thealgorithms.maths.MagicSquare::main(java.lang.String[])",
            "com.thealgorithms.conversions.AnyBaseToDecimal::main(java.lang.String[])",
            "com.thealgorithms.searches.OrderAgnosticBinarySearch::BinSearchAlgo(int[], int, int, int)",
            "com.thealgorithms.strings.zigZagPattern.zigZagPattern::encode(java.lang.String, int)",
            "com.thealgorithms.searches.DepthFirstSearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SkipList::add(java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.LevelOrderTraversal::traverse(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.sorts.InsertionSort::sentinelSort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.trees.ZigzagTraversal::traverse(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.others.QueueUsingTwoStacks::main(java.lang.String[])",
            "com.thealgorithms.maths.Pow::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.MajorityElement::majority(int[])",
            "com.thealgorithms.searches.sortOrderAgnosticBinarySearch::find(int[], int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::swapNodes(int, int)",
            "com.thealgorithms.datastructures.hashmap.hashing.Main::main(java.lang.String[])",
            "com.thealgorithms.maths.MobiusFunction::mobius(int)",
            "com.thealgorithms.maths.SumOfDigits::main(java.lang.String[])",
            "com.thealgorithms.datastructures.queues.GenericArrayListQueue::main(java.lang.String[])",
            "com.thealgorithms.datastructures.queues.CircularQueue::main(java.lang.String[])",
            "com.thealgorithms.searches.IterativeBinarySearch::main(java.lang.String[])",
            "com.thealgorithms.ciphers.Vigenere::encrypt(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.Vigenere::decrypt(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.stacks.DecimalToAnyUsingStack::main(java.lang.String[])",
            "com.thealgorithms.scheduling.SJFScheduling::scheduleProcesses()",
            "com.thealgorithms.searches.InterpolationSearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SkipList::contains(java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.PostOrderTraversal::iterativePostOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.PreOrderTraversal::iterativePreOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.queues.Deques::main(java.lang.String[])",
            "com.thealgorithms.sorts.StrandSort::strandSort(java.util.LinkedList)",
            "com.thealgorithms.maths.NonRepeatingElement::main(java.lang.String[])",
            "com.thealgorithms.others.CRCAlgorithm::changeMess()",
            "com.thealgorithms.searches.BreadthFirstSearch::search(com.thealgorithms.searches.DepthFirstSearch.Node, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::removeEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMap.LinkedList::findKey(int)",
            "com.thealgorithms.strings.Anagrams::approach5(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubCipher::encode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubCipher::decode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubstitutionCipher::decode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubstitutionCipher::encode(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::main(java.lang.String[])",
            "com.thealgorithms.others.RabinKarp::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::scheduleProcesses()",
            "com.thealgorithms.datastructures.graphs.BellmanFord::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::main(java.lang.String[])",
            "com.thealgorithms.others.TopKWords::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(int)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::remove(int)",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::knapSack(int, int[], int[], int)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.others.MiniMaxAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.datastructures.caches.LFUCache::get(java.lang.Object)",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnectedComponents(int, java.util.List)",
            "com.thealgorithms.maths.DeterminantOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.strings.LongestPalindromicSubstring::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubstring::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EggDropping::main(java.lang.String[])",
            "com.thealgorithms.searches.SaddlebackSearch::main(java.lang.String[])",
            "com.thealgorithms.ciphers.Caesar::bruteforce(java.lang.String)",
            "com.thealgorithms.strings.HorspoolSearch::findFirstInsensitive(java.lang.String, java.lang.String)",
            "com.thealgorithms.maths.ParseInteger::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.PartitionProblem::partition(int[])",
            "com.thealgorithms.dynamicprogramming.PalindromicPartitioning::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BruteForceKnapsack::main(java.lang.String[])",
            "com.thealgorithms.backtracking.PowerSum::powSum(int, int)",
            "com.thealgorithms.maths.KaprekarNumbers::kaprekarNumberInRange(long, long)",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::encrpyter(java.lang.String, java.lang.String, java.lang.String)",
            "com.thealgorithms.others.LowestBasePalindrome::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::findMax(int)",
            "com.thealgorithms.datastructures.trees.SegmentTree::getSum(int, int)",
            "com.thealgorithms.strings.CheckAnagrams::main(java.lang.String[])",
            "com.thealgorithms.searches.HowManyTimesRotated::main(java.lang.String[])",
            "com.thealgorithms.others.KMP::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestAlternatingSubsequence::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::updateRange(int, int, int)",
            "com.thealgorithms.datastructures.lists.CursorLinkedList::removeByIndex(int)",
            "com.thealgorithms.searches.FibonacciSearch::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.dijkstras::main(java.lang.String[])",
            "com.thealgorithms.others.StackPostfixNotation::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::<init>(com.thealgorithms.datastructures.trees.KDTree.Point[])",
            "com.thealgorithms.dynamicprogramming.WineProblem::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.SegmentTree::update(int, int)",
            "com.thealgorithms.dynamicprogramming.LongestIncreasingSubsequence::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.MergeSortedArrayList::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLTree::delete(int)",
            "com.thealgorithms.dynamicprogramming.Knapsack::main(java.lang.String[])",
            "com.thealgorithms.sorts.OddEvenSort::main(java.lang.String[])",
            "com.thealgorithms.maths.Gaussian::gaussian(int, java.util.ArrayList)",
            "com.thealgorithms.others.Rotate_by_90_degree::main(java.lang.String[])",
            "com.thealgorithms.sorts.BucketSort::main(java.lang.String[])",
            "com.thealgorithms.sorts.TopologicalSort::lambda.sort.0(java.util.LinkedList, com.thealgorithms.sorts.TopologicalSort.Graph, java.lang.String, com.thealgorithms.sorts.TopologicalSort.Vertex)",
            "com.thealgorithms.others.TowerOfHanoi::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.PrintTopViewofTree::main(java.lang.String[])",
            "com.thealgorithms.maths.SimpsonIntegration::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.CoinChange::main(java.lang.String[])",
            "com.thealgorithms.sorts.PigeonholeSort::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursive::find(int)",
            "com.thealgorithms.datastructures.trees.Main::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::insert(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder::createTree(java.lang.Integer[], java.lang.Integer[])",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::getRange(int, int)",
            "com.thealgorithms.datastructures.heaps.LeftistHeap::insert(int)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::add(int)",
            "com.thealgorithms.datastructures.graphs.HamiltonianCycle::findHamiltonianCycle(int[][])",
            "com.thealgorithms.datastructures.stacks.DuplicateBrackets::main(java.lang.String[])",
            "com.thealgorithms.maths.LiouvilleLambdaFunction::liouvilleLambda(int)",
            "com.thealgorithms.datastructures.graphs.KahnsAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.PrimMST::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder::createTreeOptimized(java.lang.Integer[], java.lang.Integer[])",
            "com.thealgorithms.datastructures.trees.CheckBinaryTreeIsValidBST::isBST(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.strings.PermuteString::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.GenericHeap::remove()",
            "com.thealgorithms.others.CRC16::main(java.lang.String[])",
            "com.thealgorithms.others.SieveOfEratosthenes::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.LCA::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.Sum_Of_Subset::main(java.lang.String[])",
            "com.thealgorithms.misc.RangeInSortedArray::getCountLessThan(int[], int)",
            "com.thealgorithms.misc.ColorContrastRatio::main(java.lang.String[])",
            "com.thealgorithms.ciphers.Polybius::encrypt(java.lang.String)",
            "com.thealgorithms.misc.RangeInSortedArray::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.MatrixChainRecursiveTopDownMemoisation::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Cycles::main(java.lang.String[])",
            "com.thealgorithms.backtracking.NQueens::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.ShortestSuperSequence::main(java.lang.String[])",
            "com.thealgorithms.searches.LowerBound::main(java.lang.String[])",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::allPathsFromSourceToTarget(int, int[][], int, int)",
            "com.thealgorithms.sorts.MergeSortNoExtraSpace::main(java.lang.String[])",
            "com.thealgorithms.backtracking.ArrayCombination::combination(int, int)",
            "com.thealgorithms.searches.UpperBound::main(java.lang.String[])",
            "com.thealgorithms.maths.VampireNumber::main(java.lang.String[])",
            "com.thealgorithms.others.SkylineProblem::main(java.lang.String[])",
            "com.thealgorithms.others.StringMatchFiniteAutomata::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::main(java.lang.String[])",
            "com.thealgorithms.sorts.App::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.FibonacciHeap::delete(com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::main(java.lang.String[])",
            "com.thealgorithms.others.RabinKarp::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insertDemo()",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteDemo()",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::remove(int)",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::knapSack(int, int[], int[], int)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insertDemo()",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.datastructures.caches.LFUCache::get(java.lang.Object)",
            "com.thealgorithms.sorts.SortAlgorithm::sort(java.util.List)",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::main(java.lang.String[])",
            "com.thealgorithms.misc.RangeInSortedArray::main(java.lang.String[])",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::main(java.lang.String[])",
            "com.thealgorithms.others.Sudoku::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.others.RabinKarp::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(int)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.misc.InverseOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.others.StringMatchFiniteAutomata::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::main(java.lang.String[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.others.BFPRT::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnectedComponents(int, java.util.List)",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.ciphers.HillCipher::main(java.lang.String[])",
            "com.thealgorithms.searches.TernarySearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.others.MiniMaxAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Graphs::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::scheduleProcesses()",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteDemo()",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLTree::main(java.lang.String[])",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::main(java.lang.String[])",
            "com.thealgorithms.others.SkylineProblem::main(java.lang.String[])",
            "com.thealgorithms.others.TopKWords::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::main(java.lang.String[])",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.sorts.SortAlgorithm::sort(java.util.List)",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.searches.OrderAgnosticBinarySearch::BinSearchAlgo(int[], int, int, int)",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.ciphers.HillCipher::main(java.lang.String[])",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.others.BankersAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteDemo()",
            "com.thealgorithms.datastructures.trees.SegmentTree::getSum(int, int)",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::main(java.lang.String[])",
            "com.thealgorithms.misc.InverseOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.strings.ValidParentheses::isValid(java.lang.String)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::remove(int)",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::knapSack(int, int[], int[], int)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.dynamicprogramming.DP::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insertDemo()",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.others.PerlinNoise::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestValidParentheses::getLongestValidParentheses(java.lang.String)",
            "com.thealgorithms.datastructures.caches.LFUCache::get(java.lang.Object)",
            "com.thealgorithms.dynamicprogramming.EggDropping::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BruteForceKnapsack::main(java.lang.String[])",
            "com.thealgorithms.backtracking.PowerSum::powSum(int, int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainRecursiveTopDownMemoisation::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Graphs::main(java.lang.String[])",
            "com.thealgorithms.others.Mandelbrot::main(java.lang.String[])",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.PythagoreanTriple::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.SubsetSum::main(java.lang.String[])",
            "com.thealgorithms.backtracking.WordSearch::exist(char[][], java.lang.String)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.SumOfArithmeticSeries::main(java.lang.String[])",
            "com.thealgorithms.maths.MagicSquare::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String)",
            "com.thealgorithms.maths.DeterminantOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubstring::main(java.lang.String[])",
            "com.thealgorithms.searches.SaddlebackSearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.MatrixGraphs::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.maths.PowRecursion::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::main(java.lang.String[])",
            "com.thealgorithms.misc.RangeInSortedArray::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.ShortestSuperSequence::main(java.lang.String[])",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.ciphers.Caesar::encode(java.lang.String, int)",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::main(java.lang.String[])",
            "com.thealgorithms.others.Sudoku::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.PalindromicPartitioning::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::findMax(int)",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.others.RabinKarp::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(int)",
            "com.thealgorithms.ciphers.Caesar::bruteforce(java.lang.String)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.maths.ParseInteger::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence::main(java.lang.String[])",
            "com.thealgorithms.others.Trieac::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.Intersection::intersection(int[], int[])",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.others.StringMatchFiniteAutomata::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.geometry.GrahamScan::<init>(com.thealgorithms.geometry.GrahamScan.Point[])",
            "com.thealgorithms.datastructures.graphs.BellmanFord::main(java.lang.String[])",
            "com.thealgorithms.strings.LongestPalindromicSubstring::main(java.lang.String[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.conversions.AnyBaseToDecimal::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::main(java.lang.String[])",
            "com.thealgorithms.backtracking.NQueens::main(java.lang.String[])",
            "com.thealgorithms.others.BFPRT::main(java.lang.String[])",
            "com.thealgorithms.others.LowestBasePalindrome::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SkipList::toString()",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnectedComponents(int, java.util.List)",
            "com.thealgorithms.strings.HorspoolSearch::findFirstInsensitive(java.lang.String, java.lang.String)",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.searches.TernarySearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.VerticalOrderTraversal::verticalTraversal(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.conversions.AnyBaseToAnyBase::main(java.lang.String[])",
            "com.thealgorithms.others.MiniMaxAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.searches.LowerBound::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::scheduleProcesses()",
            "com.thealgorithms.maths.KaprekarNumbers::kaprekarNumberInRange(long, long)",
            "com.thealgorithms.searches.BinarySearch::main(java.lang.String[])",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::encrpyter(java.lang.String, java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::main(java.lang.String[])",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::allPathsFromSourceToTarget(int, int[][], int, int)",
            "com.thealgorithms.sorts.App::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.StackArrayList::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLTree::main(java.lang.String[])",
            "com.thealgorithms.strings.CheckAnagrams::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MaxHeap::getElement()",
            "com.thealgorithms.datastructures.heaps.MinHeap::getElement()",
            "com.thealgorithms.backtracking.KnightsTour::main(java.lang.String[])",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Cycles::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.ConnectedComponent::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::main(java.lang.String[])",
            "com.thealgorithms.maths.Mode::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::main(java.lang.String[])",
            "com.thealgorithms.misc.ThreeSumProblem::main(java.lang.String[])",
            "com.thealgorithms.others.SkylineProblem::main(java.lang.String[])",
            "com.thealgorithms.others.TopKWords::main(java.lang.String[])",
            "com.thealgorithms.searches.MonteCarloTreeSearch::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.maths.CircularConvolutionFFT::fftCircularConvolution(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.sorts.CountingSort::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::main(java.lang.String[])",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.others.KochSnowflake::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::main(java.lang.String[])",
            "com.thealgorithms.ciphers.AES::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.thealgorithms.sorts.SortAlgorithm::sort(java.util.List)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.backtracking.MazeRecursion::mazeRecursion()",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.dynamicprogramming.DP::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.ClosestPair::main(java.lang.String[])",
            "com.thealgorithms.others.BFPRT::main(java.lang.String[])",
            "com.thealgorithms.conversions.RgbHsvConversion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTIterative::remove(int)",
            "com.thealgorithms.searches.OrderAgnosticBinarySearch::BinSearchAlgo(int[], int, int, int)",
            "com.thealgorithms.searches.sortOrderAgnosticBinarySearch::find(int[], int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::swapNodes(int, int)",
            "com.thealgorithms.others.Trieac::main(java.lang.String[])",
            "com.thealgorithms.backtracking.WordSearch::exist(char[][], java.lang.String)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.ciphers.HillCipher::main(java.lang.String[])",
            "com.thealgorithms.maths.CircularConvolutionFFT::fftCircularConvolution(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.sorts.BeadSort::sort(int[])",
            "com.thealgorithms.others.BankersAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.others.Sudoku::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteDemo()",
            "com.thealgorithms.datastructures.trees.SegmentTree::getSum(int, int)",
            "com.thealgorithms.datastructures.trees.SegmentTree::update(int, int)",
            "com.thealgorithms.datastructures.heaps.LeftistHeap::merge(com.thealgorithms.datastructures.heaps.LeftistHeap)",
            "com.thealgorithms.datastructures.trees.CheckBinaryTreeIsValidBST::isBST(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::main(java.lang.String[])",
            "com.thealgorithms.strings.Anagrams::main(java.lang.String[])",
            "com.thealgorithms.backtracking.KnightsTour::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::main(java.lang.String[])",
            "com.thealgorithms.misc.InverseOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLTree::delete(int)",
            "com.thealgorithms.sorts.BitonicSort::main(java.lang.String[])",
            "com.thealgorithms.misc.ThreeSumProblem::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.MatrixGraphs::main(java.lang.String[])",
            "com.thealgorithms.strings.ValidParentheses::isValid(java.lang.String)",
            "com.thealgorithms.strings.Anagrams::approach5(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::remove(int)",
            "com.thealgorithms.dynamicprogramming.KnapsackMemoization::knapSack(int, int[], int[], int)",
            "com.thealgorithms.geometry.GrahamScan.Point.PolarOrder::compare(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::find(int)",
            "com.thealgorithms.datastructures.graphs.HamiltonianCycle::findHamiltonianCycle(int[][])",
            "com.thealgorithms.dynamicprogramming.Sum_Of_Subset::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.LinearProbingHashMap::delete(java.lang.Object)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insertDemo()",
            "com.thealgorithms.others.Dijkstra::main(java.lang.String[])",
            "com.thealgorithms.searches.IterativeTernarySearch::main(java.lang.String[])",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.searches.RabinKarpAlgorithm::search(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.others.PerlinNoise::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestValidParentheses::getLongestValidParentheses(java.lang.String)",
            "com.thealgorithms.strings.zigZagPattern.zigZagPattern::encode(java.lang.String, int)",
            "com.thealgorithms.sorts.InsertionSort::sentinelSort(java.lang.Comparable[])",
            "com.thealgorithms.maths.MobiusFunction::mobius(int)",
            "com.thealgorithms.searches.TernarySearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMap.LinkedList::findKey(int)",
            "com.thealgorithms.datastructures.caches.LFUCache::get(java.lang.Object)",
            "com.thealgorithms.dynamicprogramming.EggDropping::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BruteForceKnapsack::main(java.lang.String[])",
            "com.thealgorithms.backtracking.PowerSum::powSum(int, int)",
            "com.thealgorithms.dynamicprogramming.LongestAlternatingSubsequence::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.CoinChange::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BSTRecursive::add(int)",
            "com.thealgorithms.misc.RangeInSortedArray::getCountLessThan(int[], int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainRecursiveTopDownMemoisation::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Graphs::main(java.lang.String[])",
            "com.thealgorithms.others.Mandelbrot::main(java.lang.String[])",
            "com.thealgorithms.searches.BinarySearch::main(java.lang.String[])",
            "com.thealgorithms.searches.ExponentialSearch::main(java.lang.String[])",
            "com.thealgorithms.maths.MatrixUtil::main(java.lang.String[])",
            "com.thealgorithms.maths.FibonacciJavaStreams::main(java.lang.String[])",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::show(int, int, com.thealgorithms.datastructures.graphs.BellmanFord.Edge[])",
            "com.thealgorithms.misc.matrixTranspose::main(java.lang.String[])",
            "com.thealgorithms.maths.PythagoreanTriple::main(java.lang.String[])",
            "com.thealgorithms.datastructures.caches.LRUCache::put(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.datastructures.caches.MRUCache::put(java.lang.Object, java.lang.Object)",
            "com.thealgorithms.dynamicprogramming.SubsetSum::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.Knapsack::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MaxHeap::getElement()",
            "com.thealgorithms.datastructures.heaps.MinHeap::getElement()",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::main(java.lang.String[])",
            "com.thealgorithms.sorts.LinkListSort::isSorted(int[], int)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.Link::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::delete(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.datastructures.graphs.ConnectedComponent::main(java.lang.String[])",
            "com.thealgorithms.maths.Mode::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.SameTreesCheck::check(com.thealgorithms.datastructures.trees.BinaryTree.Node, com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.maths.ReverseNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.SumOfArithmeticSeries::main(java.lang.String[])",
            "com.thealgorithms.maths.MagicSquare::main(java.lang.String[])",
            "com.thealgorithms.maths.Pow::main(java.lang.String[])",
            "com.thealgorithms.maths.NonRepeatingElement::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String)",
            "com.thealgorithms.maths.DeterminantOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubstring::main(java.lang.String[])",
            "com.thealgorithms.searches.SaddlebackSearch::main(java.lang.String[])",
            "com.thealgorithms.searches.HowManyTimesRotated::main(java.lang.String[])",
            "com.thealgorithms.others.KMP::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.CursorLinkedList::removeByIndex(int)",
            "com.thealgorithms.dynamicprogramming.WineProblem::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder::createTree(java.lang.Integer[], java.lang.Integer[])",
            "com.thealgorithms.others.CRC16::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::main(java.lang.String[])",
            "com.thealgorithms.ciphers.DES::decrypt(java.lang.String)",
            "com.thealgorithms.searches.MonteCarloTreeSearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing::main(java.lang.String[])",
            "com.thealgorithms.maths.PowRecursion::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::updateRange(int, int, int)",
            "com.thealgorithms.strings.PermuteString::main(java.lang.String[])",
            "com.thealgorithms.misc.RangeInSortedArray::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.ShortestSuperSequence::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.misc.WordBoggle::main(java.lang.String[])",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.ciphers.Caesar::encode(java.lang.String, int)",
            "com.thealgorithms.maths.SumOfDigits::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.PostOrderTraversal::iterativePostOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.PreOrderTraversal::iterativePreOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.dynamicprogramming.MinimumSumPartition::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.PalindromicPartitioning::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::findMax(int)",
            "com.thealgorithms.searches.FibonacciSearch::main(java.lang.String[])",
            "com.thealgorithms.maths.Gaussian::gaussian(int, java.util.ArrayList)",
            "com.thealgorithms.others.TowerOfHanoi::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::insert(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::getRange(int, int)",
            "com.thealgorithms.maths.LiouvilleLambdaFunction::liouvilleLambda(int)",
            "com.thealgorithms.datastructures.graphs.A_Star::main(java.lang.String[])",
            "com.thealgorithms.others.KochSnowflake::main(java.lang.String[])",
            "com.thealgorithms.maths.LongDivision::divide(int, int)",
            "com.thealgorithms.datastructures.lists.SkipList::contains(java.lang.Comparable)",
            "com.thealgorithms.others.CRCAlgorithm::changeMess()",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::removeEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.others.RabinKarp::main(java.lang.String[])",
            "com.thealgorithms.others.PageRank::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(int)",
            "com.thealgorithms.ciphers.Caesar::bruteforce(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.dijkstras::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::<init>(com.thealgorithms.datastructures.trees.KDTree.Point[])",
            "com.thealgorithms.dynamicprogramming.LongestIncreasingSubsequence::main(java.lang.String[])",
            "com.thealgorithms.sorts.TopologicalSort::lambda.sort.0(java.util.LinkedList, com.thealgorithms.sorts.TopologicalSort.Graph, java.lang.String, com.thealgorithms.sorts.TopologicalSort.Vertex)",
            "com.thealgorithms.datastructures.graphs.PrimMST::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder::createTreeOptimized(java.lang.Integer[], java.lang.Integer[])",
            "com.thealgorithms.ciphers.Polybius::encrypt(java.lang.String)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.datastructures.trees.LevelOrderTraversal::traverse(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.ciphers.Vigenere::encrypt(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.Vigenere::decrypt(java.lang.String, java.lang.String)",
            "com.thealgorithms.searches.BreadthFirstSearch::search(com.thealgorithms.searches.DepthFirstSearch.Node, java.lang.String)",
            "com.thealgorithms.datastructures.trees.AVLTree::main(java.lang.String[])",
            "com.thealgorithms.maths.ParseInteger::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.MergeSortedArrayList::main(java.lang.String[])",
            "com.thealgorithms.sorts.OddEvenSort::main(java.lang.String[])",
            "com.thealgorithms.others.Rotate_by_90_degree::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence::main(java.lang.String[])",
            "com.thealgorithms.ciphers.AES::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.Intersection::intersection(int[], int[])",
            "com.thealgorithms.scheduling.SJFScheduling::scheduleProcesses()",
            "com.thealgorithms.datastructures.trees.KDTree::findNearest(com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.sorts.MergeSortNoExtraSpace::main(java.lang.String[])",
            "com.thealgorithms.others.StringMatchFiniteAutomata::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::main(java.lang.String[])",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.strings.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "com.thealgorithms.geometry.GrahamScan::<init>(com.thealgorithms.geometry.GrahamScan.Point[])",
            "com.thealgorithms.datastructures.trees.ZigzagTraversal::traverse(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.queues.CircularQueue::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.BellmanFord::main(java.lang.String[])",
            "com.thealgorithms.strings.LongestPalindromicSubstring::main(java.lang.String[])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.datastructures.lists.SkipList::remove(java.lang.Comparable)",
            "com.thealgorithms.conversions.AnyBaseToDecimal::main(java.lang.String[])",
            "com.thealgorithms.datastructures.hashmap.hashing.MajorityElement::majority(int[])",
            "com.thealgorithms.datastructures.trees.Main::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.GenericHeap::remove()",
            "com.thealgorithms.others.SieveOfEratosthenes::main(java.lang.String[])",
            "com.thealgorithms.backtracking.NQueens::main(java.lang.String[])",
            "com.thealgorithms.backtracking.ArrayCombination::combination(int, int)",
            "com.thealgorithms.searches.InterpolationSearch::main(java.lang.String[])",
            "com.thealgorithms.ciphers.SimpleSubCipher::encode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubCipher::decode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubstitutionCipher::decode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubstitutionCipher::encode(java.lang.String, java.lang.String)",
            "com.thealgorithms.others.LowestBasePalindrome::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SkipList::toString()",
            "com.thealgorithms.searches.IterativeBinarySearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.queues.Deques::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.TarjansAlgorithm::stronglyConnectedComponents(int, java.util.List)",
            "com.thealgorithms.strings.HorspoolSearch::findFirstInsensitive(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.stacks.DuplicateBrackets::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.LCA::main(java.lang.String[])",
            "com.thealgorithms.ciphers.ProductCipher::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.PrintTopViewofTree::main(java.lang.String[])",
            "com.thealgorithms.maths.SimpsonIntegration::main(java.lang.String[])",
            "com.thealgorithms.misc.ColorContrastRatio::main(java.lang.String[])",
            "com.thealgorithms.sorts.TreeSort::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.TrieImp::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.VerticalOrderTraversal::verticalTraversal(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.conversions.AnyBaseToAnyBase::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.DecimalToAnyUsingStack::main(java.lang.String[])",
            "com.thealgorithms.sorts.StrandSort::strandSort(java.util.LinkedList)",
            "com.thealgorithms.others.MiniMaxAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.searches.LowerBound::main(java.lang.String[])",
            "com.thealgorithms.searches.UpperBound::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SkipList::add(java.lang.Comparable)",
            "com.thealgorithms.others.QueueUsingTwoStacks::main(java.lang.String[])",
            "com.thealgorithms.datastructures.queues.GenericArrayListQueue::main(java.lang.String[])",
            "com.thealgorithms.scheduling.RRScheduling::scheduleProcesses()",
            "com.thealgorithms.maths.KaprekarNumbers::kaprekarNumberInRange(long, long)",
            "com.thealgorithms.others.StackPostfixNotation::main(java.lang.String[])",
            "com.thealgorithms.sorts.PigeonholeSort::main(java.lang.String[])",
            "com.thealgorithms.maths.VampireNumber::main(java.lang.String[])",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::encrpyter(java.lang.String, java.lang.String, java.lang.String)",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::allPathsFromSourceToTarget(int, int[][], int, int)",
            "com.thealgorithms.sorts.App::main(java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.StackArrayList::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::main(java.lang.String[])",
            "com.thealgorithms.strings.CheckAnagrams::main(java.lang.String[])",
            "com.thealgorithms.sorts.BucketSort::main(java.lang.String[])",
            "com.thealgorithms.searches.DepthFirstSearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Cycles::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.FibonacciHeap::delete(com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode)",
            "com.thealgorithms.datastructures.hashmap.hashing.Main::main(java.lang.String[])",
            "com.thealgorithms.others.SkylineProblem::main(java.lang.String[])",
            "com.thealgorithms.others.TopKWords::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.KahnsAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.sorts.CountingSort::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.thealgorithms.strings.HorspoolSearch::firstOccurrence(java.lang.String, java.lang.String, boolean)",
            "com.thealgorithms.sorts.OddEvenSort::swap(int[], int, int)",
            "com.thealgorithms.datastructures.heaps.LeftistHeap::in_order()",
            "com.thealgorithms.others.RabinKarp::searchPat(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.minimizinglateness.MinimizingLateness::main(java.lang.String[])",
            "com.thealgorithms.maths.AbsoluteMax::getMaxValue(int[])",
            "com.thealgorithms.datastructures.trees.GenericTree::<init>()",
            "com.thealgorithms.datastructures.trees.CheckTreeIsSymmetric::isSymmetric(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.maths.VampireNumber::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexBU(java.lang.String, java.lang.String)",
            "com.thealgorithms.strings.PermuteString::main(java.lang.String[])",
            "com.thealgorithms.devutils.nodes.LargeTreeNode::isLeafNode()",
            "com.thealgorithms.datastructures.graphs.MatrixGraphs::main(java.lang.String[])",
            "com.thealgorithms.misc.ColorContrastRatio::getRelativeLuminance(java.awt.Color)",
            "com.thealgorithms.datastructures.caches.LRUCache::<init>(int)",
            "com.thealgorithms.dynamicprogramming.LevenshteinDistance::calculateLevenshteinDistance(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.stacks.StackArray::isEmpty()",
            "com.thealgorithms.datastructures.stacks.StackArrayList::peek()"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.thealgorithms.maths.LinearDiophantineEquationsSolver::findAnySolution(com.thealgorithms.maths.LinearDiophantineEquationsSolver.Equation)",
            "com.thealgorithms.maths.FibonacciNumber::isPerfectSquare(int)",
            "com.thealgorithms.backtracking.KnightsTour::solve(int, int, int)",
            "com.thealgorithms.datastructures.graphs.Graph::depthFirstSearch(com.thealgorithms.datastructures.graphs.Graph.Node, java.util.ArrayList)",
            "com.thealgorithms.datastructures.trees.AVLTree::setBalance(com.thealgorithms.datastructures.trees.AVLTree.Node[])",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::adjacencyOfEdgeDoesExist(int, int)",
            "com.thealgorithms.datastructures.trees.TrieImp::search(java.lang.String)",
            "com.thealgorithms.datastructures.heaps.MinHeap::getElementKey(int)",
            "com.thealgorithms.conversions.DecimalToAnyBase::main(java.lang.String[])",
            "com.thealgorithms.ciphers.Blowfish::keyGenerate(java.lang.String)",
            "com.thealgorithms.others.BFPRT::main(java.lang.String[])",
            "com.thealgorithms.others.QueueWithStack::remove()",
            "com.thealgorithms.datastructures.trees.SegmentTree::updateTree(int, int, int, int, int)",
            "com.thealgorithms.datastructures.queues.CircularQueue::enQueue(int)",
            "com.thealgorithms.ciphers.DES::setKey(java.lang.String)",
            "com.thealgorithms.sorts.TreeSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.sorts.DNFSort::sort012(int[], int)",
            "com.thealgorithms.scheduling.FCFSScheduling::evaluateTurnAroundTime()",
            "com.thealgorithms.searches.IterativeTernarySearch::main(java.lang.String[])",
            "com.thealgorithms.ciphers.a5.A5KeyStreamGenerator::incrementFrameCounter()",
            "com.thealgorithms.others.Huffman::printCode(com.thealgorithms.others.HuffmanNode, java.lang.String)",
            "com.thealgorithms.searches.RowColumnWiseSorted2dArrayBinarySearch::search(java.lang.Comparable[][], java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.GenericTree::maxcall()",
            "com.thealgorithms.searches.IterativeTernarySearch::find(java.lang.Comparable[], java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.AVLSimple::display(com.thealgorithms.datastructures.trees.AVLSimple.Node)",
            "com.thealgorithms.others.KochSnowflake.Vector2::multiply(double)",
            "com.thealgorithms.datastructures.dynamicarray.DynamicArray.DynamicArrayIterator::next()",
            "com.thealgorithms.datastructures.lists.MergeSortedArrayList::merge(java.util.List, java.util.List, java.util.List)",
            "com.thealgorithms.ciphers.AES::mixColumns(java.math.BigInteger)",
            "com.thealgorithms.others.Verhoeff::main(java.lang.String[])",
            "com.thealgorithms.others.BrianKernighanAlgorithm::main(java.lang.String[])",
            "com.thealgorithms.others.Mandelbrot::blackAndWhiteColorMap(double)",
            "com.thealgorithms.maths.PrimeCheck::isPrime(int)",
            "com.thealgorithms.dynamicprogramming.SubsetSum::main(java.lang.String[])",
            "com.thealgorithms.strings.zigZagPattern.zigZagPattern::encode(java.lang.String, int)",
            "com.thealgorithms.datastructures.trees.BinaryTree::inOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.ciphers.SimpleSubstitutionCipher::encode(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.a5.A5KeyStreamGenerator::reInitializeRegisters()",
            "com.thealgorithms.datastructures.heaps.GenericHeap::display()",
            "com.thealgorithms.sorts.DualPivotQuickSort::main(java.lang.String[])",
            "com.thealgorithms.others.Rotate_by_90_degree::main(java.lang.String[])",
            "com.thealgorithms.datastructures.caches.LRUCache::addNewEntry(com.thealgorithms.datastructures.caches.LRUCache.Entry)",
            "com.thealgorithms.datastructures.hashmap.hashing.Intersection::intersection(int[], int[])",
            "com.thealgorithms.datastructures.trees.AVLSimple::leftRotate(com.thealgorithms.datastructures.trees.AVLSimple.Node)",
            "com.thealgorithms.others.cn.HammingDistance::getHammingDistanceBetweenBits(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.GenericTree::removeleavescall()",
            "com.thealgorithms.maths.Area::surfaceAreaCylinder(double, double)",
            "com.thealgorithms.datastructures.trees.GenericTree::display_1(com.thealgorithms.datastructures.trees.GenericTree.Node)",
            "com.thealgorithms.scheduling.RRScheduling::evaluateWaitingTime()",
            "com.thealgorithms.datastructures.trees.KDTree::build(com.thealgorithms.datastructures.trees.KDTree.Point[], int)",
            "com.thealgorithms.datastructures.lists.LinkOperations::deleteTail()",
            "com.thealgorithms.strings.Isomorphic::checkStrings(java.lang.String, java.lang.String)",
            "com.thealgorithms.backtracking.WordSearch::isValid(int, int)",
            "com.thealgorithms.searches.LinearSearch::main(java.lang.String[])",
            "com.thealgorithms.others.MiniMaxAlgorithm::getRandomScores(int, int)",
            "com.thealgorithms.maths.HarshadNumber::isHarshad(java.lang.String)",
            "com.thealgorithms.datastructures.lists.CursorLinkedList::printList()",
            "com.thealgorithms.backtracking.PowerSum::Sum(int, int, int)",
            "com.thealgorithms.backtracking.KnightsTour::printResult()",
            "com.thealgorithms.datastructures.trees.TrieImp::delete(java.lang.String)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::getPixel(int[][], int, int)",
            "com.thealgorithms.datastructures.heaps.MaxHeap::insertElement(com.thealgorithms.datastructures.heaps.HeapElement)",
            "com.thealgorithms.datastructures.trees.GenericTree::display()",
            "com.thealgorithms.sorts.BubbleSortRecursion::bubbleSort(java.lang.Comparable[], int)",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::multiply(int[][], int[][])",
            "com.thealgorithms.maths.SumOfArithmeticSeries::sumOfSeries(double, double, int)",
            "com.thealgorithms.searches.IterativeBinarySearch::main(java.lang.String[])",
            "com.thealgorithms.maths.Factorial::factorial(int)",
            "com.thealgorithms.maths.TrinomialTriangle::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.DoublyLinkedList::displayBackwards()",
            "com.thealgorithms.others.SkylineProblem::findSkyline(int, int)",
            "com.thealgorithms.others.FirstFitCPU::fitProcess(int[], int[])",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::getPostfixToInfix(java.lang.String)",
            "com.thealgorithms.datastructures.trees.BSTFromSortedArray::createBST(int[], int, int)",
            "com.thealgorithms.misc.WordBoggle::explore(int, int, char[][], com.thealgorithms.misc.TrieNode, boolean[][], java.util.Set)",
            "com.thealgorithms.maths.FibonacciNumber::main(java.lang.String[])",
            "com.thealgorithms.sorts.SortUtils::isSorted(java.util.List)",
            "com.thealgorithms.datastructures.lists.LinkOperations::insertHead(int, com.thealgorithms.datastructures.lists.DoublyLinkedList)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::insertNth(int, int)",
            "com.thealgorithms.others.QueueWithStack::isInStackEmpty()",
            "com.thealgorithms.ciphers.AESEncryption::encryptText(java.lang.String, javax.crypto.SecretKey)",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::addEdge(int, int)",
            "com.thealgorithms.datastructures.lists.Node::<init>(int)",
            "com.thealgorithms.datastructures.dynamicarray.DynamicArray::stream()",
            "com.thealgorithms.dynamicprogramming.EditDistance::minDistance(java.lang.String, java.lang.String)",
            "com.thealgorithms.maths.AbsoluteMax::getMaxValue(int[])",
            "com.thealgorithms.dynamicprogramming.NewManShanksPrime::nthManShanksPrime(int, int)",
            "com.thealgorithms.datastructures.graphs.A_Star.Graph::getNeighbours(int)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.thealgorithms.ciphers.Caesar::bruteforce(java.lang.String)",
            "com.thealgorithms.ciphers.DES::feistel(java.lang.String, java.lang.String)",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.strings.ReverseString::reverse(java.lang.String)",
            "com.thealgorithms.maths.PerfectSquare::isPerfectSquare(int)",
            "com.thealgorithms.datastructures.trees.KDTree.Point::<init>(int[])",
            "com.thealgorithms.others.WorstFitCPU::findWorstFit(int[], int)",
            "com.thealgorithms.ciphers.AffineCipher::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.GenericTree::depthcaller(int)",
            "com.thealgorithms.sorts.MergeSortRecursive::mergeSort()",
            "com.thealgorithms.sorts.InsertionSort::sort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.dynamicprogramming.PalindromicPartitioning::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::removeEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::inOrder(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node)",
            "com.thealgorithms.misc.ThreeSumProblem::TwoPointer(int[], int)",
            "com.thealgorithms.datastructures.queues.Deques::pollFirst()",
            "com.thealgorithms.ciphers.a5.LFSR::pushBit(boolean)",
            "com.thealgorithms.dynamicprogramming.CatalanNumber::findNthCatalan(int)",
            "com.thealgorithms.datastructures.heaps.LeftistHeap::in_order_aux(com.thealgorithms.datastructures.heaps.LeftistHeap.Node, java.util.ArrayList)",
            "com.thealgorithms.searches.QuickSelect::selectIndex(java.util.List, int, int, int)",
            "com.thealgorithms.datastructures.trees.AVLTree::delete(com.thealgorithms.datastructures.trees.AVLTree.Node)",
            "com.thealgorithms.searches.SquareRootBinarySearch::squareRoot(long)",
            "com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper::setGcd(int)",
            "com.thealgorithms.datastructures.stacks.LinkedListStack::pop()",
            "com.thealgorithms.maths.AbsoluteMax::getMaxValue(int[])",
            "com.thealgorithms.dynamicprogramming.CoinChange::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BinaryTree::bfs(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.trees.GenericTree::levelorder()",
            "com.thealgorithms.datastructures.trees.KDTree.Point::comparableDistanceExceptAxis(com.thealgorithms.datastructures.trees.KDTree.Point, com.thealgorithms.datastructures.trees.KDTree.Point, int)",
            "com.thealgorithms.others.BFPRT::getMinKNumsByBFPRT(int[], int)",
            "com.thealgorithms.strings.Anagrams::approach5(java.lang.String, java.lang.String)",
            "com.thealgorithms.sorts.SortUtils::print(java.lang.Object[])",
            "com.thealgorithms.strings.Lower::main(java.lang.String[])",
            "com.thealgorithms.searches.RowColumnWiseSorted2dArrayBinarySearch::search(java.lang.Comparable[][], java.lang.Comparable)",
            "com.thealgorithms.misc.WordBoggle::explore(int, int, char[][], com.thealgorithms.misc.TrieNode, boolean[][], java.util.Set)",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.maths.SumOfArithmeticSeries::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::findMin(int)",
            "com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution::setY(int)",
            "com.thealgorithms.others.EulersFunction::main(java.lang.String[])",
            "com.thealgorithms.strings.Palindrome::isPalindromeTwoPointer(java.lang.String)",
            "com.thealgorithms.datastructures.lists.CountSinglyLinkedListRecursion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.AVLTree::reheight(com.thealgorithms.datastructures.trees.AVLTree.Node)",
            "com.thealgorithms.sorts.SortUtils::isSorted(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.queues.Queue::isFull()",
            "com.thealgorithms.datastructures.lists.RandomNode::<init>(com.thealgorithms.datastructures.lists.RandomNode.ListNode)",
            "com.thealgorithms.others.Damm::dammCheck(java.lang.String)",
            "com.thealgorithms.sorts.BitonicSort::printArray(int[])",
            "com.thealgorithms.ciphers.AES::encrypt(java.math.BigInteger, java.math.BigInteger)",
            "com.thealgorithms.maths.FindMinRecursion::main(java.lang.String[])",
            "com.thealgorithms.sorts.MergeSort::doSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.devutils.nodes.SimpleNode::setNextNode(com.thealgorithms.devutils.nodes.SimpleNode)",
            "com.thealgorithms.datastructures.graphs.Kruskal::main(java.lang.String[])",
            "com.thealgorithms.backtracking.NQueens::isPlacedCorrectly(int[], int, int)",
            "com.thealgorithms.dynamicprogramming.MatrixChainMultiplication::main(java.lang.String[])",
            "com.thealgorithms.others.RemoveDuplicateFromString::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SkipList.Node::checkLayer(int)",
            "com.thealgorithms.searches.IterativeTernarySearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::addEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.datastructures.stacks.StackArray::<init>(int)",
            "com.thealgorithms.sorts.RadixSort::radixsort(int[], int)",
            "com.thealgorithms.others.BFPRT::insertionSort(int[], int, int)",
            "com.thealgorithms.maths.MatrixUtil::add(java.math.BigDecimal[][], java.math.BigDecimal[][])",
            "com.thealgorithms.others.CRCAlgorithm::divideMessageWithP(boolean)",
            "com.thealgorithms.others.EulersFunction::getEuler(int)",
            "com.thealgorithms.datastructures.trees.PreOrderTraversal::recursivePreOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node, java.util.List)",
            "com.thealgorithms.strings.Palindrome::isPalindromeRecursion(java.lang.String)",
            "com.thealgorithms.maths.NonRepeatingElement::main(java.lang.String[])",
            "com.thealgorithms.conversions.AnyBaseToDecimal::convertToDecimal(java.lang.String, int)",
            "com.thealgorithms.datastructures.dynamicarray.DynamicArray.DynamicArrayIterator::forEachRemaining(java.util.function.Consumer)",
            "com.thealgorithms.maths.VectorCrossProduct::displayVector()",
            "com.thealgorithms.sorts.BitonicSort::bitonicMerge(int[], int, int, int)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::insert(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.others.SkylineProblem::run()",
            "com.thealgorithms.maths.FastInverseSqrt::inverseSqrt(float)",
            "com.thealgorithms.ciphers.Polybius::encrypt(java.lang.String)",
            "com.thealgorithms.maths.Area::surfaceAreaParallelogram(double, double)",
            "com.thealgorithms.datastructures.heaps.MinHeap::swap(int, int)",
            "com.thealgorithms.sorts.DualPivotQuickSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.others.KochSnowflake.Vector2::multiply(double)",
            "com.thealgorithms.dynamicprogramming.MinimumPathSum::testLessRows()",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::getRange(int, int)",
            "com.thealgorithms.sorts.GnomeSort::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.KDTree::search(com.thealgorithms.datastructures.trees.KDTree.Node, com.thealgorithms.datastructures.trees.KDTree.Point)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::delete()",
            "com.thealgorithms.maths.VectorCrossProduct::magnitude()",
            "com.thealgorithms.datastructures.graphs.BellmanFord::go()",
            "com.thealgorithms.maths.SimpsonIntegration::f(double)",
            "com.thealgorithms.datastructures.bags.Bag.ListIterator::hasNext()",
            "com.thealgorithms.others.BoyerMoore::findmajor(int[])",
            "com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList::containsKey(java.lang.Object)",
            "com.thealgorithms.others.RabinKarp::main(java.lang.String[])",
            "com.thealgorithms.ciphers.DES::decryptBlock(java.lang.String, java.lang.String[])",
            "com.thealgorithms.datastructures.stacks.StackArray::pop()",
            "com.thealgorithms.maths.GCDRecursion::gcd(int, int)",
            "com.thealgorithms.strings.HorspoolSearch::findFirst(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.lists.CircleLinkedList::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::setNumberOfVertices(int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::print()",
            "com.thealgorithms.maths.EulerMethod::main(java.lang.String[])",
            "com.thealgorithms.maths.PerfectCube::isPerfectCube(int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::insert(int)",
            "com.thealgorithms.datastructures.trees.AVLSimple::display(com.thealgorithms.datastructures.trees.AVLSimple.Node)",
            "com.thealgorithms.dynamicprogramming.MatrixChainRecursiveTopDownMemoisation::Memoized_Matrix_Chain(int[])",
            "com.thealgorithms.misc.ColorContrastRatio::getColorSRgb(double)",
            "com.thealgorithms.datastructures.trees.TrieImp::isValid(java.lang.String)",
            "com.thealgorithms.sorts.CircleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.queues.CircularQueue::deQueue()",
            "com.thealgorithms.others.TwoPointers::isPairedSum(int[], int)",
            "com.thealgorithms.maths.MinValue::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::getRange(int, int, com.thealgorithms.datastructures.trees.LazySegmentTree.Node)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::detectLoop()",
            "com.thealgorithms.searches.SaddlebackSearch::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.RegexMatching::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.BinaryTree::remove(int)",
            "com.thealgorithms.ciphers.AES::decrypt(java.math.BigInteger, java.math.BigInteger)",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.ClosestPair::buildLocation(double, double)",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::isBalancedIterative(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced.BinaryTree)",
            "com.thealgorithms.dynamicprogramming.KadaneAlgorithm::max_Sum(int[], int)",
            "com.thealgorithms.datastructures.lists.Link::displayLink()",
            "com.thealgorithms.datastructures.trees.GenericTree::findcall(int)",
            "com.thealgorithms.sorts.WiggleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.graphs.A_Star.Graph::getNeighbours(int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::<init>(com.thealgorithms.datastructures.lists.Node, int)",
            "com.thealgorithms.searches.BreadthFirstSearch::search(com.thealgorithms.searches.DepthFirstSearch.Node, java.lang.String)",
            "com.thealgorithms.others.Graph::dijkstra(java.lang.String)",
            "com.thealgorithms.devutils.nodes.SimpleTreeNode::setRightNode(com.thealgorithms.devutils.nodes.SimpleTreeNode)",
            "com.thealgorithms.datastructures.stacks.LargestRectangle::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.Kosaraju::dfs(int, int[], java.util.List)",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMapCuckooHashing::isFull()",
            "com.thealgorithms.sorts.DutchNationalFlagSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.disjointsets.Node::<init>(java.lang.Object)",
            "com.thealgorithms.datastructures.trees.CheckBinaryTreeIsValidBST::isBST(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.others.Sudoku::main(java.lang.String[])",
            "com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper::hashCode()",
            "com.thealgorithms.datastructures.graphs.BellmanFord::addEdge(int, int, int)",
            "com.thealgorithms.sorts.DualPivotQuickSort::swap(java.lang.Comparable[], int, int)",
            "com.thealgorithms.ciphers.Blowfish::hexToBin(java.lang.String)",
            "com.thealgorithms.sorts.HeapSort::less(java.lang.Comparable[], int, int)",
            "com.thealgorithms.datastructures.trees.Tree::<init>(com.thealgorithms.datastructures.trees.TreeNode)",
            "com.thealgorithms.datastructures.lists.SkipList.BernoulliHeightStrategy::nodeHeight(int)",
            "com.thealgorithms.misc.InverseOfMatrix::main(java.lang.String[])",
            "com.thealgorithms.sorts.SortUtils::less(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.maths.Area::surfaceAreaTrapezium(double, double, double)",
            "com.thealgorithms.maths.Area::surfaceAreaHemisphere(double)",
            "com.thealgorithms.datastructures.trees.AVLTree::rotateRightThenLeft(com.thealgorithms.datastructures.trees.AVLTree.Node)",
            "com.thealgorithms.conversions.AnyBaseToAnyBase::validForBase(java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.Kosaraju::sortEdgesByLowestFinishTime(int, java.util.List)",
            "com.thealgorithms.datastructures.heaps.HeapElement::<init>(java.lang.Integer)",
            "com.thealgorithms.minimizinglateness.MinimizingLateness.Schedule::<init>(int, int)",
            "com.thealgorithms.sorts.IntrospectiveSort::partition(java.lang.Comparable[], int, int)",
            "com.thealgorithms.divideandconquer.SkylineAlgorithm::produceSubSkyLines(java.util.ArrayList)",
            "com.thealgorithms.datastructures.queues.Queue::isEmpty()",
            "com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode::mark()",
            "com.thealgorithms.datastructures.lists.LinkOperations::deleteHead()",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::clear()",
            "com.thealgorithms.strings.zigZagPattern.zigZagPattern::encode(java.lang.String, int)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::<init>(int)",
            "com.thealgorithms.datastructures.lists.SkipList.BernoulliHeightStrategy::<init>(double)",
            "com.thealgorithms.datastructures.graphs.HamiltonianCycle::isPathFound(int)",
            "com.thealgorithms.datastructures.lists.SkipList::<init>(int, com.thealgorithms.datastructures.lists.SkipList.HeightStrategy)",
            "com.thealgorithms.strings.LetterCombinationsOfPhoneNumber::printWords(int[], int, int, java.lang.String)",
            "com.thealgorithms.maths.VectorCrossProduct::test()",
            "com.thealgorithms.datastructures.caches.LFUCache::addNodeWithUpdatedFrequency(com.thealgorithms.datastructures.caches.LFUCache.Node)",
            "com.thealgorithms.searches.BinarySearch2dArray::BinarySearch(int[][], int)",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::lcsString(java.lang.String, java.lang.String, int[][])",
            "com.thealgorithms.maths.Area::surfaceAreaCone(double, double)",
            "com.thealgorithms.datastructures.trees.Tree::printTopView()",
            "com.thealgorithms.ciphers.Polybius::decrypt(java.lang.String)",
            "com.thealgorithms.datastructures.trees.LazySegmentTree.Node::applyUpdate(int)",
            "com.thealgorithms.datastructures.graphs.Cycles::main(java.lang.String[])",
            "com.thealgorithms.others.Damm::generateAndPrint(java.lang.String)",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::print()",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::isEmpty()",
            "com.thealgorithms.strings.Rotation::reverse(char[], int, int)",
            "com.thealgorithms.dynamicprogramming.EditDistance::editDistance(java.lang.String, java.lang.String, int[][])",
            "com.thealgorithms.datastructures.lists.CreateAndDetectLoop::printList(com.thealgorithms.datastructures.lists.Node)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.thealgorithms.maths.NthUglyNumber::main(java.lang.String[])",
            "com.thealgorithms.datastructures.caches.LRUCache::checkCapacity(int)",
            "com.thealgorithms.datastructures.lists.CountSinglyLinkedListRecursion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.AdjacencyList::printGraph()",
            "com.thealgorithms.strings.Anagrams::approach2(java.lang.String, java.lang.String)",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String)",
            "com.thealgorithms.ciphers.AES::main(java.lang.String[])",
            "com.thealgorithms.strings.Rotation::rotation(char[], int)",
            "com.thealgorithms.sorts.DualPivotQuickSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.maths.PrimeFactorization::pfactors(int)",
            "com.thealgorithms.ciphers.a5.LFSR::getLastBit()",
            "com.thealgorithms.scheduling.FCFSScheduling::<init>(java.util.List)",
            "com.thealgorithms.conversions.DecimalToBinary::bitwiseConversion()",
            "com.thealgorithms.others.QueueWithStack::isOutStackEmpty()",
            "com.thealgorithms.backtracking.KnightsTour::printResult()",
            "com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArray::containsKey(java.lang.Object)",
            "com.thealgorithms.maths.MatrixUtil::isValid(java.math.BigDecimal[][])",
            "com.thealgorithms.sorts.MergeSortRecursive::merge(java.util.List)",
            "com.thealgorithms.scheduling.SJFScheduling::scheduleProcesses()",
            "com.thealgorithms.devutils.nodes.SimpleNode::hasNext()",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::sortTable(java.lang.Object[][])",
            "com.thealgorithms.others.LinearCongruentialGenerator::<init>(double, double, double, double)",
            "com.thealgorithms.sorts.InsertionSort::sentinelSort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.trees.TrieImp::isValid(java.lang.String)",
            "com.thealgorithms.searches.UpperBound::main(java.lang.String[])",
            "com.thealgorithms.io.BufferedReader::peek(int)",
            "com.thealgorithms.divideandconquer.ClosestPair::setSecondCount(int)",
            "com.thealgorithms.maths.Area::surfaceAreaHemisphere(double)",
            "com.thealgorithms.maths.FFT.Complex::add(com.thealgorithms.maths.FFT.Complex)",
            "com.thealgorithms.ciphers.AESEncryption::getSecretEncryptionKey()",
            "com.thealgorithms.datastructures.trees.BSTRecursive::find(int)",
            "com.thealgorithms.sorts.SelectionSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.dynamicprogramming.LongestCommonSubsequence::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.PrimMST::minKey(int[], java.lang.Boolean[])",
            "com.thealgorithms.sorts.MergeSort::merge(java.lang.Comparable[], int, int, int)",
            "com.thealgorithms.others.RabinKarp::searchPat(java.lang.String, java.lang.String, int)",
            "com.thealgorithms.others.SieveOfEratosthenes::main(java.lang.String[])",
            "com.thealgorithms.devutils.nodes.SimpleTreeNode::setRightNode(com.thealgorithms.devutils.nodes.SimpleTreeNode)",
            "com.thealgorithms.conversions.HexaDecimalToBinary::convert(java.lang.String)",
            "com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist::mergeKList(com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist.Node[], int)",
            "com.thealgorithms.datastructures.trees.BSTRecursive::add(int)",
            "com.thealgorithms.misc.Sort012D::main(java.lang.String[])",
            "com.thealgorithms.conversions.AnyBaseToDecimal::valOfChar(char)",
            "com.thealgorithms.others.GuassLegendre::main(java.lang.String[])",
            "com.thealgorithms.maths.Factorial::factorial(int)",
            "com.thealgorithms.maths.JugglerSequence::jugglerSequence(int)",
            "com.thealgorithms.sorts.OddEvenSort::main(java.lang.String[])",
            "com.thealgorithms.backtracking.WordSearch::isValid(int, int)",
            "com.thealgorithms.datastructures.lists.CircleLinkedList.Node::<init>(java.lang.Object, com.thealgorithms.datastructures.lists.CircleLinkedList.Node)",
            "com.thealgorithms.misc.RangeInSortedArray::alteredBinSearch(int[], int, int, int, int[], boolean)",
            "com.thealgorithms.searches.ExponentialSearch::main(java.lang.String[])",
            "com.thealgorithms.conversions.HexToOct::hex2decimal(java.lang.String)",
            "com.thealgorithms.conversions.OctalToHexadecimal::main(java.lang.String[])",
            "com.thealgorithms.others.NextFit::fitProcess(int[], int[])",
            "com.thealgorithms.maths.FFT.Complex::multiply(com.thealgorithms.maths.FFT.Complex)",
            "com.thealgorithms.datastructures.lists.SkipList.Node::previous(int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::clear()",
            "com.thealgorithms.datastructures.trees.KDTree::findMin(com.thealgorithms.datastructures.trees.KDTree.Node, int)",
            "com.thealgorithms.dynamicprogramming.LevenshteinDistance::minimum(int, int, int)",
            "com.thealgorithms.datastructures.buffers.CircularBuffer::get()",
            "com.thealgorithms.others.InsertDeleteInArray::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::toString()",
            "com.thealgorithms.datastructures.dynamicarray.DynamicArray::add(java.lang.Object)",
            "com.thealgorithms.others.FibbonaciSeries::main(java.lang.String[])",
            "com.thealgorithms.datastructures.dynamicarray.DynamicArray::get(int)",
            "com.thealgorithms.scheduling.SJFScheduling::<init>(java.util.ArrayList)",
            "com.thealgorithms.datastructures.trees.AVLTree::rotateRightThenLeft(com.thealgorithms.datastructures.trees.AVLTree.Node)",
            "com.thealgorithms.datastructures.heaps.FibonacciHeap::link(com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode, com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode)",
            "com.thealgorithms.datastructures.trees.Main::nearestRightKey(com.thealgorithms.datastructures.trees.NRKTree, int)",
            "com.thealgorithms.maths.DistanceFormula::manhattanDistance(double, double, double, double)",
            "com.thealgorithms.others.MiniMaxAlgorithm::miniMax(int, boolean, int, boolean)",
            "com.thealgorithms.sorts.Task2::task(int[])",
            "com.thealgorithms.datastructures.trees.AVLTree::reheight(com.thealgorithms.datastructures.trees.AVLTree.Node)",
            "com.thealgorithms.datastructures.lists.SkipList::contains(java.lang.Comparable)",
            "com.thealgorithms.datastructures.lists.CircleLinkedList::toString()",
            "com.thealgorithms.sorts.RadixSort::countSort(int[], int, int)",
            "com.thealgorithms.others.BFPRT::medianOfMedians(int[], int, int)",
            "com.thealgorithms.strings.CheckAnagrams::main(java.lang.String[])",
            "com.thealgorithms.minimizinglateness.MinimizingLateness.Schedule::<init>(int, int)",
            "com.thealgorithms.dynamicprogramming.BoundaryFill::printImageArray(int[][])",
            "com.thealgorithms.others.Krishnamurthy::fact(int)",
            "com.thealgorithms.sorts.IntrospectiveSort::heapSort(java.lang.Comparable[], int, int)",
            "com.thealgorithms.maths.AmicableNumber::isAmicableNumber(int, int)",
            "com.thealgorithms.datastructures.queues.LinkedQueue::clear()",
            "com.thealgorithms.datastructures.stacks.CalculateMaxOfMin::calculateMaxOfMin(int[])",
            "com.thealgorithms.datastructures.graphs.AdjacencyListGraph::removeEdge(java.lang.Comparable, java.lang.Comparable)",
            "com.thealgorithms.ciphers.DES::feistel(java.lang.String, java.lang.String)",
            "com.thealgorithms.sorts.TopologicalSort::sort(com.thealgorithms.sorts.TopologicalSort.Graph, com.thealgorithms.sorts.TopologicalSort.Vertex, java.util.LinkedList)",
            "com.thealgorithms.ciphers.RSA::encrypt(java.lang.String)",
            "com.thealgorithms.ciphers.AES::splitBlockIntoCells(java.math.BigInteger)",
            "com.thealgorithms.datastructures.caches.MRUCache.Entry::<init>(com.thealgorithms.datastructures.caches.MRUCache.Entry, com.thealgorithms.datastructures.caches.MRUCache.Entry, java.lang.Object, java.lang.Object)",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::main(java.lang.String[])",
            "com.thealgorithms.sorts.ShellSort::main(java.lang.String[])",
            "com.thealgorithms.strings.Upper::toUpperCase(java.lang.String)",
            "com.thealgorithms.others.Graph::printPath(java.lang.String)",
            "com.thealgorithms.datastructures.trees.PreOrderTraversal::recursivePreOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node, java.util.List)",
            "com.thealgorithms.maths.AliquotSum::getAliquotValue(int)",
            "com.thealgorithms.maths.LeonardoNumber::leonardoNumber(int)",
            "com.thealgorithms.datastructures.stacks.NodeStack::pop()",
            "com.thealgorithms.strings.StringCompression::compress(java.lang.String)",
            "com.thealgorithms.others.Graph::dijkstra(java.util.NavigableSet)",
            "com.thealgorithms.datastructures.trees.LazySegmentTree::updateRange(int, int, int, com.thealgorithms.datastructures.trees.LazySegmentTree.Node)",
            "com.thealgorithms.io.BufferedReader::needsRefill()",
            "com.thealgorithms.datastructures.dynamicarray.DynamicArray::isEmpty()",
            "com.thealgorithms.datastructures.lists.Link::<init>(int)",
            "com.thealgorithms.datastructures.trees.KDTree.Point::getCoordinate(int)",
            "com.thealgorithms.datastructures.trees.Main::main(java.lang.String[])",
            "com.thealgorithms.io.BufferedReader::<init>(java.io.InputStream, int)",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::isBalancedRecursive(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced.BinaryTree)",
            "com.thealgorithms.datastructures.queues.GenericArrayListQueue::pull()",
            "com.thealgorithms.dynamicprogramming.LevenshteinDistance::main(java.lang.String[])",
            "com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution::equals(java.lang.Object)",
            "com.thealgorithms.others.HappyNumbersSeq::main(java.lang.String[])",
            "com.thealgorithms.maths.FindKthNumber::findKthMax(int[], int)",
            "com.thealgorithms.datastructures.heaps.GenericHeap::remove()",
            "com.thealgorithms.searches.SearchInARowAndColWiseSortedMatrix::search(int[][], int)",
            "com.thealgorithms.others.CRC32::main(java.lang.String[])",
            "com.thealgorithms.others.Huffman::printCode(com.thealgorithms.others.HuffmanNode, java.lang.String)",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::depthFirstOrder(int)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::getNth(int)",
            "com.thealgorithms.searches.SaddlebackSearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.queues.Queue::isFull()",
            "com.thealgorithms.maths.LinearDiophantineEquationsSolver.GcdSolutionWrapper::setSolution(com.thealgorithms.maths.LinearDiophantineEquationsSolver.Solution)",
            "com.thealgorithms.datastructures.hashmap.hashing.Intersection::intersection(int[], int[])",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::allPathsFromSourceToTarget(int, int[][], int, int)",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::setNumberOfVertices(int)",
            "com.thealgorithms.datastructures.heaps.MaxHeap::toggleUp(int)",
            "com.thealgorithms.maths.VampireNumber::test(int, int)",
            "com.thealgorithms.misc.ColorContrastRatio::getColor(int)",
            "com.thealgorithms.datastructures.trees.BSTIterative::add(int)",
            "com.thealgorithms.strings.Pangram::main(java.lang.String[])",
            "com.thealgorithms.others.WorstFitCPU::findWorstFit(int[], int)",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::split(int[][], int[][], int, int)",
            "com.thealgorithms.ciphers.Blowfish::binToHex(java.lang.String)",
            "com.thealgorithms.datastructures.lists.SearchSinglyLinkedListRecursion::searchRecursion(com.thealgorithms.datastructures.lists.Node, int)",
            "com.thealgorithms.devutils.nodes.LargeTreeNode::<init>(java.lang.Object, com.thealgorithms.devutils.nodes.LargeTreeNode, java.util.Collection)",
            "com.thealgorithms.datastructures.trees.AVLSimple::insert(com.thealgorithms.datastructures.trees.AVLSimple.Node, int)",
            "com.thealgorithms.others.ReverseStackUsingRecursion::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.MergeSortedArrayList::main(java.lang.String[])",
            "com.thealgorithms.others.MiniMaxAlgorithm::setScores(int[])",
            "com.thealgorithms.devutils.entities.ProcessDetails::setWaitingTime(int)",
            "com.thealgorithms.others.Verhoeff::checkInput(java.lang.String)",
            "com.thealgorithms.others.MiniMaxAlgorithm::log2(int)",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMap::<init>(int)",
            "com.thealgorithms.datastructures.heaps.MaxHeap::insertElement(com.thealgorithms.datastructures.heaps.HeapElement)",
            "com.thealgorithms.ciphers.DES::decrypt(java.lang.String)",
            "com.thealgorithms.maths.CollatzConjecture::nextNumber(int)",
            "com.thealgorithms.ciphers.Blowfish::addBin(java.lang.String, java.lang.String)",
            "com.thealgorithms.io.BufferedReader::<init>(byte[])",
            "com.thealgorithms.maths.SumOfArithmeticSeries::sumOfSeries(double, double, int)",
            "com.thealgorithms.datastructures.graphs.Kruskal::kruskal(java.util.HashSet[])",
            "com.thealgorithms.datastructures.trees.FenwickTree::query(int)",
            "com.thealgorithms.conversions.DecimalToHexaDecimal::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::sub(int[][], int[][])",
            "com.thealgorithms.conversions.BinaryToHexadecimal::main(java.lang.String[])",
            "com.thealgorithms.others.HappyNumbersSeq::sumSquares(int)",
            "com.thealgorithms.devutils.nodes.LargeTreeNode::isLeafNode()",
            "com.thealgorithms.misc.ColorContrastRatio::getColorSRgb(double)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::insert(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric.Node, java.lang.Comparable)",
            "com.thealgorithms.datastructures.heaps.FibonacciHeap::updateMin(com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode)",
            "com.thealgorithms.maths.KeithNumber::isKeith(int)",
            "com.thealgorithms.maths.PiNilakantha::main(java.lang.String[])",
            "com.thealgorithms.dynamicprogramming.BoardPath::bpIS(int, int, int[])",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMapCuckooHashing::insertKey2HashTable(int)",
            "com.thealgorithms.sorts.SortUtilsRandomGenerator::generateArray(int)",
            "com.thealgorithms.datastructures.heaps.MinHeap::swap(int, int)",
            "com.thealgorithms.datastructures.stacks.LinkedListStack::isEmpty()",
            "com.thealgorithms.devutils.entities.ProcessDetails::setTurnAroundTimeTime(int)",
            "com.thealgorithms.ciphers.SimpleSubstitutionCipher::decode(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.CheckBinaryTreeIsValidBST::isBST(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.maths.Perimeter::perimeterRegularPolygon(int, float)",
            "com.thealgorithms.others.LowestBasePalindrome::base2base(java.lang.String, int, int)",
            "com.thealgorithms.divideandconquer.BinaryExponentiation::power(long, long)",
            "com.thealgorithms.maths.NumberOfDigits::numberOfDigitsFast(int)",
            "com.thealgorithms.dynamicprogramming.BruteForceKnapsack::main(java.lang.String[])",
            "com.thealgorithms.searches.UnionFind::union(int, int)",
            "com.thealgorithms.sorts.TopologicalSort::sort(com.thealgorithms.sorts.TopologicalSort.Graph)",
            "com.thealgorithms.dynamicprogramming.SubsetSum::main(java.lang.String[])",
            "com.thealgorithms.maths.GCD::gcd(int[])",
            "com.thealgorithms.datastructures.trees.GenericTree::postorder(com.thealgorithms.datastructures.trees.GenericTree.Node)",
            "com.thealgorithms.datastructures.lists.RandomNode::<init>(com.thealgorithms.datastructures.lists.RandomNode.ListNode)",
            "com.thealgorithms.sorts.SortUtils::isSorted(java.util.List)",
            "com.thealgorithms.datastructures.dynamicarray.DynamicArray.DynamicArrayIterator::forEachRemaining(java.util.function.Consumer)",
            "com.thealgorithms.maths.ParseInteger::parseInt(java.lang.String)",
            "com.thealgorithms.strings.Palindrome::isPalindrome(java.lang.String)",
            "com.thealgorithms.maths.AmicableNumber::recursiveCalcOfDividerSum(int, int)",
            "com.thealgorithms.ciphers.AES::subBytes(java.math.BigInteger)",
            "com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode::setNext(com.thealgorithms.datastructures.heaps.FibonacciHeap.HeapNode)",
            "com.thealgorithms.ciphers.a5.LFSR::getClockBit()",
            "com.thealgorithms.datastructures.queues.CircularQueue::isFull()",
            "com.thealgorithms.sorts.QuickSort::partition(java.lang.Comparable[], int, int)",
            "com.thealgorithms.others.PrintAMatrixInSpiralOrder::print(int[][], int, int)",
            "com.thealgorithms.others.QueueWithStack::peekFront()",
            "com.thealgorithms.others.CRC32::crc32(java.lang.String)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::insertDemo()",
            "com.thealgorithms.others.RootPrecision::main(java.lang.String[])",
            "com.thealgorithms.maths.FindMinRecursion::min(int[], int)",
            "com.thealgorithms.datastructures.stacks.InfixToPostfix::precedence(char)",
            "com.thealgorithms.datastructures.trees.BinaryTree::put(int)",
            "com.thealgorithms.io.BufferedReader::peek()",
            "com.thealgorithms.datastructures.heaps.EmptyHeapException::<init>(java.lang.String)",
            "com.thealgorithms.strings.longestNonRepeativeSubstring::lengthOfLongestSubstring(java.lang.String)",
            "com.thealgorithms.ciphers.Caesar::decode(java.lang.String, int)",
            "com.thealgorithms.searches.LowerBound::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::<init>(int)",
            "com.thealgorithms.searches.UpperBound::search(java.lang.Comparable[], java.lang.Comparable, int, int)",
            "com.thealgorithms.others.LinearCongruentialGenerator::<init>(double, double, double)",
            "com.thealgorithms.dynamicprogramming.LongestIncreasingSubsequence::findLISLen(int[])",
            "com.thealgorithms.ciphers.AES::subBytesDec(java.math.BigInteger)",
            "com.thealgorithms.ciphers.Polybius::encrypt(java.lang.String)",
            "com.thealgorithms.strings.Alphabetical::main(java.lang.String[])",
            "com.thealgorithms.searches.DepthFirstSearch.Node::<init>(java.lang.String, java.util.List)",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::storeAllPaths(int, int)",
            "com.thealgorithms.dynamicprogramming.ShortestSuperSequence::main(java.lang.String[])",
            "com.thealgorithms.maths.LucasSeries::lucasSeriesIteration(int)",
            "com.thealgorithms.searches.IterativeTernarySearch::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced::main(java.lang.String[])",
            "com.thealgorithms.datastructures.caches.MRUCache::<init>(int)",
            "com.thealgorithms.sorts.OddEvenSort::oddEvenSort(int[])",
            "com.thealgorithms.others.ReverseStackUsingRecursion::reverseUsingRecursion(java.util.Stack)",
            "com.thealgorithms.dynamicprogramming.Sum_Of_Subset::main(java.lang.String[])",
            "com.thealgorithms.backtracking.AllPathsFromSourceToTarget::storeAllPathsUtil(java.lang.Integer, java.lang.Integer, boolean[], java.util.List)",
            "com.thealgorithms.datastructures.hashmap.hashing.Map::contains(java.lang.Object)",
            "com.thealgorithms.datastructures.queues.PriorityQueue::swim(int)",
            "com.thealgorithms.datastructures.stacks.StackArray::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.DoublyLinkedList::isEmpty()",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::print()",
            "com.thealgorithms.datastructures.trees.RedBlackBST::deleteDemo()",
            "com.thealgorithms.ciphers.a5.LFSR::xorTappingBits()",
            "com.thealgorithms.ciphers.DES::<init>(java.lang.String)",
            "com.thealgorithms.datastructures.lists.CursorLinkedList::<init>()",
            "com.thealgorithms.dynamicprogramming.MinimumPathSum::minimumPathSum(int[][])",
            "com.thealgorithms.misc.ColorContrastRatio::getRelativeLuminance(java.awt.Color)",
            "com.thealgorithms.maths.Volume::volumeCone(double, double)",
            "com.thealgorithms.others.ReturnSubsequence::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.StrassenMatrixMultiplication::multiply(int[][], int[][])",
            "com.thealgorithms.datastructures.stacks.NodeStack::setNext(com.thealgorithms.datastructures.stacks.NodeStack)",
            "com.thealgorithms.datastructures.stacks.PostfixToInfix::isOperator(char)",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMapCuckooHashing::deleteKeyFromHashTable(int)",
            "com.thealgorithms.backtracking.Combination::combination(java.lang.Object[], int)",
            "com.thealgorithms.ciphers.a5.A5KeyStreamGenerator::reInitializeRegisters()",
            "com.thealgorithms.others.PerlinNoise::interpolate(float, float, float)",
            "com.thealgorithms.datastructures.trees.BinaryTree::<init>(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.searches.HowManyTimesRotated::main(java.lang.String[])",
            "com.thealgorithms.datastructures.lists.Node::<init>(int, com.thealgorithms.datastructures.lists.Node)",
            "com.thealgorithms.conversions.DecimalToAnyBase::reVal(int)",
            "com.thealgorithms.maths.FindMax::findMax(int[])",
            "com.thealgorithms.dynamicprogramming.RegexMatching::regexRecursion(java.lang.String, java.lang.String, int, int, int[][])",
            "com.thealgorithms.searches.QuickSelect::partition(java.util.List, int, int, int, int)",
            "com.thealgorithms.datastructures.trees.BSTRecursiveGeneric::main(java.lang.String[])",
            "com.thealgorithms.datastructures.queues.CircularQueue::isEmpty()",
            "com.thealgorithms.datastructures.lists.SkipList.Node::checkLayer(int)",
            "com.thealgorithms.maths.FactorialRecursion::factorial(int)",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::main(java.lang.String[])",
            "com.thealgorithms.strings.Lower::toLowerCase(java.lang.String)",
            "com.thealgorithms.datastructures.stacks.MaximumMinimumWindow::calculateMaxOfMin(int[], int)",
            "com.thealgorithms.datastructures.queues.GenericArrayListQueue::peek()",
            "com.thealgorithms.io.BufferedReader::assertStreamOpen()",
            "com.thealgorithms.dynamicprogramming.FordFulkerson::networkFlow(int, int)",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::tableBuilder(java.lang.String)",
            "com.thealgorithms.maths.Volume::volumeCylinder(double, double)",
            "com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList::containsKey(java.lang.Object)",
            "com.thealgorithms.maths.PerfectNumber::isPerfectNumber2(int)",
            "com.thealgorithms.datastructures.queues.Deques::toString()",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMap::deleteHash(int)",
            "com.thealgorithms.sorts.RadixSort::main(java.lang.String[])",
            "com.thealgorithms.others.LowestBasePalindrome::reverse(java.lang.String)",
            "com.thealgorithms.datastructures.lists.SinglyLinkedList::count()",
            "com.thealgorithms.sorts.SimpleSort::main(java.lang.String[])",
            "com.thealgorithms.strings.PermuteString::generatePermutation(java.lang.String, int, int)",
            "com.thealgorithms.datastructures.graphs.A_Star.PathAndDistance::<init>(int, java.util.ArrayList, int)",
            "com.thealgorithms.datastructures.trees.AVLTree::rebalance(com.thealgorithms.datastructures.trees.AVLTree.Node)",
            "com.thealgorithms.ciphers.Vigenere::decrypt(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.hashmap.hashing.HashMap.Node::setNext(com.thealgorithms.datastructures.hashmap.hashing.HashMap.Node)",
            "com.thealgorithms.maths.FastInverseSqrt::inverseSqrt(double)",
            "com.thealgorithms.others.FirstFitCPU::fitProcess(int[], int[])",
            "com.thealgorithms.sorts.WiggleSort::sort(java.lang.Comparable[])",
            "com.thealgorithms.datastructures.stacks.DuplicateBrackets::main(java.lang.String[])",
            "com.thealgorithms.maths.MaxValue::max(int, int)",
            "com.thealgorithms.ciphers.ColumnarTranspositionCipher::numberOfRows(java.lang.String)",
            "com.thealgorithms.others.Graph::dijkstra(java.lang.String)",
            "com.thealgorithms.devutils.nodes.SimpleTreeNode::<init>(java.lang.Object)",
            "com.thealgorithms.conversions.AnyBaseToAnyBase::validForBase(java.lang.String, int)",
            "com.thealgorithms.datastructures.lists.LinkOperations::deleteNode(com.thealgorithms.datastructures.lists.Link)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::printPath(int[], int)",
            "com.thealgorithms.datastructures.graphs.Cycle::<init>()",
            "com.thealgorithms.datastructures.queues.CircularQueue::deQueue()",
            "com.thealgorithms.others.Huffman::main(java.lang.String[])",
            "com.thealgorithms.sorts.CycleSort::main(java.lang.String[])",
            "com.thealgorithms.others.KochSnowflake::main(java.lang.String[])",
            "com.thealgorithms.datastructures.trees.GenericTree::size2call()",
            "com.thealgorithms.ciphers.DES::createPaddedString(java.lang.String, int, char)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::go()",
            "com.thealgorithms.datastructures.stacks.LinkedListStack::push(int)",
            "com.thealgorithms.datastructures.trees.RedBlackBST::printTreepre(com.thealgorithms.datastructures.trees.RedBlackBST.Node)",
            "com.thealgorithms.maths.FibonacciNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.Area::surfaceAreaSphere(double)",
            "com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS::main(java.lang.String[])",
            "com.thealgorithms.datastructures.heaps.MinPriorityQueue::print()",
            "com.thealgorithms.datastructures.graphs.Kosaraju::dfs(int, int[], java.util.List)",
            "com.thealgorithms.others.Sudoku::isSafe(int[][], int, int, int)",
            "com.thealgorithms.datastructures.stacks.StackOfLinkedList::main(java.lang.String[])",
            "com.thealgorithms.others.Trieac::suggestionsRec(com.thealgorithms.others.Trieac.TrieNode, java.lang.String)",
            "com.thealgorithms.devutils.nodes.LargeTreeNode::<init>(java.lang.Object)",
            "com.thealgorithms.datastructures.trees.KDTree::<init>(int)",
            "com.thealgorithms.datastructures.queues.Deques::addFirst(java.lang.Object)",
            "com.thealgorithms.datastructures.buffers.CircularBuffer::put(java.lang.Object)",
            "com.thealgorithms.datastructures.trees.PostOrderTraversal::recursivePostOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.datastructures.graphs.Kosaraju::dfs2(int, int[], java.util.List)",
            "com.thealgorithms.divideandconquer.ClosestPair::bruteForce(com.thealgorithms.divideandconquer.ClosestPair.Location[])",
            "com.thealgorithms.datastructures.dynamicarray.DynamicArray::put(int, java.lang.Object)",
            "com.thealgorithms.conversions.IntegerToRoman::integerToRoman(int)",
            "com.thealgorithms.searches.KMPSearch::KMPSearch(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.PreOrderTraversal::iterativePreOrder(com.thealgorithms.datastructures.trees.BinaryTree.Node)",
            "com.thealgorithms.others.SkylineProblem::main(java.lang.String[])",
            "com.thealgorithms.divideandconquer.ClosestPair::yPartition(com.thealgorithms.divideandconquer.ClosestPair.Location[], int, int)",
            "com.thealgorithms.searches.RowColumnWiseSorted2dArrayBinarySearch::find(java.lang.Comparable[][], java.lang.Comparable)",
            "com.thealgorithms.datastructures.trees.KDTree.Point::toString()",
            "com.thealgorithms.datastructures.caches.LFUCache::get(java.lang.Object)",
            "com.thealgorithms.datastructures.trees.LazySegmentTree.Node::merge(com.thealgorithms.datastructures.trees.LazySegmentTree.Node, com.thealgorithms.datastructures.trees.LazySegmentTree.Node)",
            "com.thealgorithms.maths.KrishnamurthyNumber::isKMurthy(int)",
            "com.thealgorithms.maths.NonRepeatingElement::main(java.lang.String[])",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::breadthFirstOrder(int)",
            "com.thealgorithms.sorts.HeapSort::swap(java.lang.Object[], int, int)",
            "com.thealgorithms.datastructures.trees.NRKTree::<init>(int)",
            "com.thealgorithms.others.QueueWithStack::insert(java.lang.Object)",
            "com.thealgorithms.divideandconquer.SkylineAlgorithm::produceFinalSkyLine(java.util.ArrayList, java.util.ArrayList)",
            "com.thealgorithms.datastructures.stacks.StackArray::push(int)",
            "com.thealgorithms.datastructures.dynamicarray.DynamicArray::<init>(int)",
            "com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph::<init>(int)",
            "com.thealgorithms.strings.Anagrams::approach1(java.lang.String, java.lang.String)",
            "com.thealgorithms.datastructures.trees.KDTree::build(com.thealgorithms.datastructures.trees.KDTree.Point[], int)",
            "com.thealgorithms.divideandconquer.ClosestPair::xPartition(com.thealgorithms.divideandconquer.ClosestPair.Location[], int, int)",
            "com.thealgorithms.datastructures.trees.KDTree.Node::getAxisCoordinate()",
            "com.thealgorithms.dynamicprogramming.BoardPath::bpR(int, int)",
            "com.thealgorithms.others.CRCAlgorithm::<init>(java.lang.String, int, double)",
            "com.thealgorithms.dynamicprogramming.LongestIncreasingSubsequence::binarySearchBetween(int[], int, int)",
            "com.thealgorithms.datastructures.queues.LinkedQueue::isEmpty()",
            "com.thealgorithms.others.LineSweep::FindMaximumEndPoint(int[][])",
            "com.thealgorithms.maths.KrishnamurthyNumber::main(java.lang.String[])",
            "com.thealgorithms.maths.Volume::volumeSphere(double)",
            "com.thealgorithms.datastructures.stacks.NodeStack::isEmpty()",
            "com.thealgorithms.misc.InverseOfMatrix::gaussian(double[][], int[])",
            "com.thealgorithms.datastructures.trees.AVLSimple::display(com.thealgorithms.datastructures.trees.AVLSimple.Node)",
            "com.thealgorithms.datastructures.trees.TreeRandomNode::getRandom(com.thealgorithms.datastructures.trees.TreeRandomNode.Node)",
            "com.thealgorithms.maths.FFTBluestein::fftBluestein(java.util.ArrayList, boolean)",
            "com.thealgorithms.datastructures.graphs.BellmanFord::addEdge(int, int, int)",
            "com.thealgorithms.conversions.TurkishToLatinConversion::main(java.lang.String[])",
            "com.thealgorithms.others.CRC16::main(java.lang.String[])",
            "com.thealgorithms.strings.MyAtoi::myAtoi(java.lang.String)",
            "com.thealgorithms.datastructures.graphs.TopologicalSort::<init>(com.thealgorithms.datastructures.graphs.AdjacencyList)",
            "com.thealgorithms.backtracking.KnightsTour::countNeighbors(int, int)",
            "com.thealgorithms.datastructures.graphs.FloydWarshall::<init>(int)",
            "com.thealgorithms.datastructures.trees.AVLSimple::display()",
            "com.thealgorithms.maths.PrimeCheck::isPrime(int)",
            "com.thealgorithms.devutils.entities.ProcessDetails::setProcessId(java.lang.String)"
        ]
    }
]