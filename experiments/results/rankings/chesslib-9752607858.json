[
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Board::squareAttackedByPieceType(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.PieceType)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.move.MoveList::encode(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move, java.util.function.Function)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()",
            "com.github.bhlangonijr.chesslib.Board::isMoveLegal(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.Board::loadFromFen(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::getFen(boolean, boolean)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Board::squareAttackedByPieceType(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.PieceType)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.move.MoveList::encode(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move, java.util.function.Function)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()",
            "com.github.bhlangonijr.chesslib.Board::isMoveLegal(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.Board::loadFromFen(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::getFen(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::decodeSan(com.github.bhlangonijr.chesslib.Board, java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromSan(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.Game::toPgn(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.Board::doMove(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.game.Game::loadMoveText(java.lang.StringBuilder)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::addProperty(java.lang.String, com.github.bhlangonijr.chesslib.pgn.GameLoader.PgnTempContainer)",
            "com.github.bhlangonijr.chesslib.game.GameContext::loadDefaults()",
            "com.github.bhlangonijr.chesslib.Board::undoMovePiece(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.Move::<init>(java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen(int, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::addPromotions(java.util.List, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::findLegalSquares(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, long)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getRookCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.MoveBackup::restore(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.Board::movePiece(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, com.github.bhlangonijr.chesslib.MoveBackup)",
            "com.github.bhlangonijr.chesslib.game.GameContext::hasCastleRight(com.github.bhlangonijr.chesslib.move.Move, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Board::squareAttackedByPieceType(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.PieceType)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.move.MoveList::encode(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move, java.util.function.Function)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()",
            "com.github.bhlangonijr.chesslib.Board::isMoveLegal(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.Board::loadFromFen(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::getFen(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::decodeSan(com.github.bhlangonijr.chesslib.Board, java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromSan(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.Game::toPgn(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.Board::doMove(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.game.Game::loadMoveText(java.lang.StringBuilder)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::addProperty(java.lang.String, com.github.bhlangonijr.chesslib.pgn.GameLoader.PgnTempContainer)",
            "com.github.bhlangonijr.chesslib.game.GameContext::loadDefaults()",
            "com.github.bhlangonijr.chesslib.Board::undoMovePiece(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.Move::<init>(java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen(int, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::addPromotions(java.util.List, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::findLegalSquares(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, long)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getRookCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.MoveBackup::restore(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.Board::movePiece(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, com.github.bhlangonijr.chesslib.MoveBackup)",
            "com.github.bhlangonijr.chesslib.game.GameContext::hasCastleRight(com.github.bhlangonijr.chesslib.move.Move, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generatePseudoLegalCaptures(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::parseTM(java.lang.String, com.github.bhlangonijr.chesslib.game.TimeControl)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::parseTC(java.lang.String, com.github.bhlangonijr.chesslib.game.TimeControl)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::addGame(com.github.bhlangonijr.chesslib.game.Game)",
            "com.github.bhlangonijr.chesslib.Board::isRepetition(int)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::parseFromString(java.lang.String)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::normalize(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.Game::gotoMove(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Board::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generatePseudoLegalMoves(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::setMoveText(com.github.bhlangonijr.chesslib.game.Game, java.lang.StringBuilder)",
            "com.github.bhlangonijr.chesslib.Board::verifyKingIsNotAttackedWithoutPin(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::parseMT(java.lang.String, com.github.bhlangonijr.chesslib.game.TimeControl)",
            "com.github.bhlangonijr.chesslib.game.Game::getMovesAt(java.lang.String, int)",
            "com.github.bhlangonijr.chesslib.Bitboard::bitboardToString(long)",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::toString()",
            "com.github.bhlangonijr.chesslib.Board::getZobristKey()",
            "com.github.bhlangonijr.chesslib.move.MoveList::normalizeSan(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::doNullMove()",
            "com.github.bhlangonijr.chesslib.Bitboard::getSliderAttacks(long, long, int)",
            "com.github.bhlangonijr.chesslib.Board::toStringFromViewPoint(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnCaptures(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.unicode.UnicodePrinter::print(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::loadPgn(com.github.bhlangonijr.chesslib.util.LargeFile)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::toPGNString()",
            "com.github.bhlangonijr.chesslib.Board::clear()",
            "com.github.bhlangonijr.chesslib.game.GameContext::<init>(com.github.bhlangonijr.chesslib.game.GameMode, com.github.bhlangonijr.chesslib.game.VariationType)",
            "com.github.bhlangonijr.chesslib.Board::findEnPassant(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Board::findEnPassantTarget(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Board::isPromoRank(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, char[])",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, java.util.Map)",
            "com.github.bhlangonijr.chesslib.move.Move::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generatePawnCaptures(com.github.bhlangonijr.chesslib.Board, java.util.List)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()",
            "com.github.bhlangonijr.chesslib.game.Game::toPgn(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.game.GameContext::loadDefaults()",
            "com.github.bhlangonijr.chesslib.Board::undoMovePiece(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.Move::<init>(java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen(int, boolean)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.MoveBackup::restore(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()",
            "com.github.bhlangonijr.chesslib.game.Game::toPgn(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.game.GameContext::loadDefaults()",
            "com.github.bhlangonijr.chesslib.Board::undoMovePiece(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.Move::<init>(java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen(int, boolean)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.MoveBackup::restore(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generatePseudoLegalCaptures(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::addGame(com.github.bhlangonijr.chesslib.game.Game)",
            "com.github.bhlangonijr.chesslib.Board::isRepetition(int)",
            "com.github.bhlangonijr.chesslib.game.Game::gotoMove(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Board::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Bitboard::bitboardToString(long)",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::toString()",
            "com.github.bhlangonijr.chesslib.Board::doNullMove()",
            "com.github.bhlangonijr.chesslib.Board::toStringFromViewPoint(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.unicode.UnicodePrinter::print(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::loadPgn(com.github.bhlangonijr.chesslib.util.LargeFile)",
            "com.github.bhlangonijr.chesslib.game.GameContext::<init>(com.github.bhlangonijr.chesslib.game.GameMode, com.github.bhlangonijr.chesslib.game.VariationType)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, char[])",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, java.util.Map)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::doMove(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.lang.Iterable)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.Board::isDraw()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.lang.Iterable)",
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.Board::undoMove()",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::<init>()",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::loadPgn()",
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.Board::undoMove()",
            "com.github.bhlangonijr.chesslib.Board::<init>()",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.Bitboard::bitboardToString(long)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::toString()",
            "com.github.bhlangonijr.chesslib.Board::doNullMove()",
            "com.github.bhlangonijr.chesslib.unicode.UnicodePrinter::print(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, char[])",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, java.util.Map)",
            "com.github.bhlangonijr.chesslib.Board::pseudoLegalCaptures()",
            "com.github.bhlangonijr.chesslib.Board::strictEquals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::toStringFromBlackViewPoint()",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen()",
            "com.github.bhlangonijr.chesslib.game.Game::gotoLast()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::doMove(com.github.bhlangonijr.chesslib.move.Move)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.lang.Iterable)",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.game.Game::loadMoveText()",
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.lang.Iterable)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen()",
            "com.github.bhlangonijr.chesslib.Board::undoMove()",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.Board::<init>()",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::loadPgn()",
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.Bitboard::bitboardToString(long)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, char[])",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, java.util.Map)",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.Board::<init>()",
            "com.github.bhlangonijr.chesslib.Board::toStringFromBlackViewPoint()",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen()",
            "com.github.bhlangonijr.chesslib.game.Game::gotoFirst()",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.Board::undoMove()",
            "com.github.bhlangonijr.chesslib.Board::pseudoLegalCaptures()",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::toString()",
            "com.github.bhlangonijr.chesslib.Board::doNullMove()",
            "com.github.bhlangonijr.chesslib.Board::strictEquals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.unicode.UnicodePrinter::print(com.github.bhlangonijr.chesslib.Board)"
        ]
    }
]