[
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::asCsvString(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitBinaryExpr(io.github.vmzakharov.ecdataframe.dsl.BinaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitPropertyPathExpr(io.github.vmzakharov.ecdataframe.dsl.PropertyPathExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::aggregateValueIntoLong(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::aggregateValueIntoDouble(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitIfElseExpr(io.github.vmzakharov.ecdataframe.dsl.IfElseExpr)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.DataFrameEvalContext::getVariable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitProjectionExpr(io.github.vmzakharov.ecdataframe.dsl.ProjectionExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::aggregateValueIntoDouble(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::aggregateValueIntoLong(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::aggregateValueInto(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitIfElseExpr(io.github.vmzakharov.ecdataframe.dsl.IfElseExpr)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::asCsvString(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitBinaryExpr(io.github.vmzakharov.ecdataframe.dsl.BinaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitPropertyPathExpr(io.github.vmzakharov.ecdataframe.dsl.PropertyPathExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::aggregateValueIntoLong(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::aggregateValueIntoDouble(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitIfElseExpr(io.github.vmzakharov.ecdataframe.dsl.IfElseExpr)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.DataFrameEvalContext::getVariable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitProjectionExpr(io.github.vmzakharov.ecdataframe.dsl.ProjectionExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::aggregateValueIntoDouble(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::aggregateValueIntoLong(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::aggregateValueInto(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitIfElseExpr(io.github.vmzakharov.ecdataframe.dsl.IfElseExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.LongFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitVarExpr(io.github.vmzakharov.ecdataframe.dsl.VarExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.ComparisonResult::dealWithNullsIfAny(boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitIfElseExpr(io.github.vmzakharov.ecdataframe.dsl.IfElseExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::createComputedColumn(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitDecimalExpr(io.github.vmzakharov.ecdataframe.dsl.DecimalExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::createStoredColumn(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::createReader()",
            "io.github.vmzakharov.ecdataframe.dsl.ContainsOp::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.PredicateOp::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.LongValue::applyPredicate(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.PredicateOp)",
            "io.github.vmzakharov.ecdataframe.dsl.value.LongValue::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.ArithmeticOp)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::processDeclaredFunction(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr, io.github.vmzakharov.ecdataframe.dsl.FunctionScript)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::seal()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.util.FormatWithPlaceholders::substitute()",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::arithmeticTypeCompatibleWith(io.github.vmzakharov.ecdataframe.dsl.value.ValueType, io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getValue(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::notApplicable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::asCsvString(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitBinaryExpr(io.github.vmzakharov.ecdataframe.dsl.BinaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitPropertyPathExpr(io.github.vmzakharov.ecdataframe.dsl.PropertyPathExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::aggregateValueIntoLong(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::aggregateValueIntoDouble(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitIfElseExpr(io.github.vmzakharov.ecdataframe.dsl.IfElseExpr)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.DataFrameEvalContext::getVariable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitProjectionExpr(io.github.vmzakharov.ecdataframe.dsl.ProjectionExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::aggregateValueIntoDouble(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::aggregateValueIntoLong(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored, int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::aggregateValueInto(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitIfElseExpr(io.github.vmzakharov.ecdataframe.dsl.IfElseExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.LongFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitVarExpr(io.github.vmzakharov.ecdataframe.dsl.VarExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.ComparisonResult::dealWithNullsIfAny(boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitIfElseExpr(io.github.vmzakharov.ecdataframe.dsl.IfElseExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::createComputedColumn(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitDecimalExpr(io.github.vmzakharov.ecdataframe.dsl.DecimalExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::createStoredColumn(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::createReader()",
            "io.github.vmzakharov.ecdataframe.dsl.ContainsOp::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.PredicateOp::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.LongValue::applyPredicate(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.PredicateOp)",
            "io.github.vmzakharov.ecdataframe.dsl.value.LongValue::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.ArithmeticOp)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::processDeclaredFunction(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr, io.github.vmzakharov.ecdataframe.dsl.FunctionScript)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::seal()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.util.FormatWithPlaceholders::substitute()",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::arithmeticTypeCompatibleWith(io.github.vmzakharov.ecdataframe.dsl.value.ValueType, io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getValue(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::notApplicable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::aggregateValueInto(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfIndexKeeper::computeKeyFrom(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::aggregateValueInto(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsLongAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitBinaryExpr(io.github.vmzakharov.ecdataframe.dsl.BinaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfTuple::compareMindingNulls(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::initializeValue(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.StringValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectByMarkValue(org.eclipse.collections.api.block.predicate.primitive.IntPredicate, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::longAccumulator(long, long)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::objectAccumulator(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::doubleAccumulator(double, double)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Max::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Min::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::newColumn(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnComputed::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsDoubleAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.ArithmeticOp::applyString(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.BooleanValue::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.ArithmeticOp)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.ArithmeticOp)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::applyPredicate(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.PredicateOp)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::unEscape(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addRow(java.lang.Object[])",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateTimeColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfStringColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::getObject(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::getDouble(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::getObject(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::getLong(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnAbstract::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::next()",
            "io.github.vmzakharov.ecdataframe.dsl.PredicateOp::unsupportedOn(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.UnaryOp::unsupportedOn(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::apply(io.github.vmzakharov.ecdataframe.dsl.UnaryOp)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitAssignExpr(io.github.vmzakharov.ecdataframe.dsl.AssingExpr)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitDecimalExpr(io.github.vmzakharov.ecdataframe.dsl.DecimalExpr)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::unexpectedTypeMessage(io.github.vmzakharov.ecdataframe.dsl.value.ValueType, io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::processBuiltInFunction(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr, io.github.vmzakharov.ecdataframe.dsl.function.IntrinsicFunctionDescriptor)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toScript(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitFunctionScriptExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionScript)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::formatterForColumn(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchema::surroundedByQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::copyRowFrom(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::longInitialValue()",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::doubleInitialValue()",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::objectInitialValue()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDateTimeColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(java.lang.String, int)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfIndexKeeper::computeKeyFrom(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsLongAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfTuple::compareMindingNulls(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::initializeValue(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.StringValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectByMarkValue(org.eclipse.collections.api.block.predicate.primitive.IntPredicate, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnComputed::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsDoubleAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::unEscape(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateTimeColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfStringColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnAbstract::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDateTimeColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(java.lang.String, int)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.3269c427.1(int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDateTimeColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.1(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.join.bbb68325.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, org.eclipse.collections.api.list.ListIterable, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectFlagged()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.2(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.AliasExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ExceptionFactory::exception(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::lambda.processDeclaredFunction.57e13dc0.1(io.github.vmzakharov.ecdataframe.dsl.FunctionScript, io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor, io.github.vmzakharov.ecdataframe.dsl.Expression, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.3269c427.1(int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.sortBy.0(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfTuple, io.github.vmzakharov.ecdataframe.dataframe.DfTuple)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.1(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.2(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.VarExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectNotFlagged()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDateTimeColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dsl.value.DoubleValue::decimalValue()",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::rowIndexMap(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Count::targetColumnType(io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnComputed::getObject(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::setDataFrame(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.LongFormatter::<init>(java.lang.String)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::newColumn(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchema::separator(char)",
            "io.github.vmzakharov.ecdataframe.dsl.VarExpr::accept(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateTimeColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.value.LongValue::decimalValue()",
            "io.github.vmzakharov.ecdataframe.util.SysErrPrinter::print(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.StatementSequenceScript::evaluate(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionEvaluationVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnComputed::getDouble(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dsl.UnaryOp::applyDate(java.time.LocalDate)",
            "io.github.vmzakharov.ecdataframe.dsl.DataFrameEvalContext::removeVariable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::aggregateValueInto(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumnComputed::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::formatterForColumn(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::sum(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Max::objectAccumulator(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.util.ExceptionFactory::exception(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::joinTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.util.FormatWithPlaceholders::addMessage(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.AnonymousScript::addFunctionScript(io.github.vmzakharov.ecdataframe.dsl.FunctionScript)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitAssignExpr(io.github.vmzakharov.ecdataframe.dsl.AssingExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dsl.EvalContextAbstract::setVariable(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::defaultDoubleIfEmpty()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::addFunctionDescriptor(io.github.vmzakharov.ecdataframe.dsl.function.IntrinsicFunctionDescriptor)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsDecimal(java.lang.String)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dsl.function.IntrinsicFunctionDescriptor::assertParameterCount(int, int)",
            "io.github.vmzakharov.ecdataframe.dsl.function.IntrinsicFunctionDescriptor::hasExplicitParameters()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::resetBitmap()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectFlagged()",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::<init>(long, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::getObject(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnComputed::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.EvalContextAbstract::removeVariable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.StringComparisonResult::<init>(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::copyIndexedRowFrom(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateTimeColumn::addRowToColumn(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchema::addColumn(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::getFunctionDescriptor(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.PredicateOp::applyLong(long, long)",
            "io.github.vmzakharov.ecdataframe.util.CollectingPrinter::clear()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Count::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.IndexExpr::<init>(io.github.vmzakharov.ecdataframe.dsl.Expression, io.github.vmzakharov.ecdataframe.dsl.Expression)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.DoubleComparisonResult::<init>(java.util.function.DoubleSupplier, java.util.function.DoubleSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Min::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.ComparisonResult::rightIsNull()",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitConstExpr(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumnStored::addObject(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.function.IntrinsicFunctionDescriptor::evaluate(io.github.vmzakharov.ecdataframe.dsl.EvalContext)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::getValueAsStringLiteral(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Min::doubleAccumulator(double, double)",
            "io.github.vmzakharov.ecdataframe.dsl.ProjectionExpr::accept(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::<init>(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::addDouble(double)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::copyTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dsl.value.VectorValue::apply(io.github.vmzakharov.ecdataframe.dsl.UnaryOp)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Count::doubleAccumulator(double, double)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDateTimeColumn(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.LongFormatter::stripNonNumericCharacters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::newColumn(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dsl.DataFrameEvalContext::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dsl.EvalContext)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::isEmpty()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getString(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::dropColumn(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfTuple::toString()",
            "io.github.vmzakharov.ecdataframe.dsl.VarExpr::evaluate(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionEvaluationVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnComputed::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.VectorExpr::evaluate(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionEvaluationVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDoubleColumn(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfTuple::equals(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::substringOrNull(java.lang.String, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::notApplicable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::notFlagged(int)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitPropertyPathExpr(io.github.vmzakharov.ecdataframe.dsl.PropertyPathExpr)",
            "io.github.vmzakharov.ecdataframe.dsl.value.StringValue::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.ArithmeticOp)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnComputed::getObject(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::isAggregateWithIndex()",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::defaultLongIfEmpty()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::hasNext()",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::storeVariableType(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::isQuote(char)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::objectAccumulator(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnAbstract::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dsl.UnaryExpr::accept(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::copy(java.lang.String)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dsl.UnaryOp::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::isEscaped(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dsl.ProjectionExpr::evaluate(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionEvaluationVisitor)",
            "io.github.vmzakharov.ecdataframe.util.ExceptionFactory::get(java.lang.Throwable)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::addAllItemsFrom(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::copyRowFrom(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitVectorExpr(io.github.vmzakharov.ecdataframe.dsl.VectorExpr)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::addStatementToCurrentScriptContext(io.github.vmzakharov.ecdataframe.dsl.Expression)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::setObject(int, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchema::nullMarker(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::setObject(int, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitStatementSequenceScriptExpr(io.github.vmzakharov.ecdataframe.dsl.StatementSequenceScript)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, org.eclipse.collections.api.LongIterable)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitAssignExpr(io.github.vmzakharov.ecdataframe.dsl.AssingExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::cloneStructureAsStored(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumn::addRowToColumn(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.DataFrameEvalContext::hasVariable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::isFlagged(int)",
            "io.github.vmzakharov.ecdataframe.dsl.AbstractScript::evaluate()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getString(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toScript(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitPropertyPathExpr(io.github.vmzakharov.ecdataframe.dsl.PropertyPathExpr)",
            "io.github.vmzakharov.ecdataframe.util.ExceptionFactory::initialize()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::isIndexed()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDateColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::valuesIfAbsent()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addLongColumn(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.FormatWithPlaceholders::messageFromKey(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDecimal(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitIfElseExpr(io.github.vmzakharov.ecdataframe.dsl.IfElseExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumnComputed::getTypedObject(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::isAggregateWithIndex()",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.DataFrameEvalContext::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::addFunctionDescriptor(io.github.vmzakharov.ecdataframe.dsl.function.IntrinsicFunctionDescriptor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::addObject(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitAnonymousScriptExpr(io.github.vmzakharov.ecdataframe.dsl.AnonymousScript)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::avg(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitPropertyPathExpr(io.github.vmzakharov.ecdataframe.dsl.PropertyPathExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::format(double)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDateColumn(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::getFunctionDescriptor(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.util.FormatWithPlaceholders::addMessagesFromProperties(java.util.Properties)",
            "io.github.vmzakharov.ecdataframe.util.Printer::println(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Min::longAccumulator(long, long)",
            "io.github.vmzakharov.ecdataframe.dsl.BinaryExpr::evaluate(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionEvaluationVisitor)",
            "io.github.vmzakharov.ecdataframe.dsl.DataFrameEvalContext::removeVariable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitProjectionExpr(io.github.vmzakharov.ecdataframe.dsl.ProjectionExpr)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::visitDecimalExpr(io.github.vmzakharov.ecdataframe.dsl.DecimalExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumnStored::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitBinaryExpr(io.github.vmzakharov.ecdataframe.dsl.BinaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::resetBitmap()",
            "io.github.vmzakharov.ecdataframe.dsl.UnaryOp::applyDecimal(java.math.BigDecimal)",
            "io.github.vmzakharov.ecdataframe.dsl.DecimalExpr::accept(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionVisitor)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsLocalDateTime(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::getLongWithoutNullCheck(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Count::doubleAccumulator(double, double)",
            "io.github.vmzakharov.ecdataframe.dsl.AssingExpr::accept(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.function.IntrinsicFunctionDescriptor::hasExplicitParameters()",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::defaultLongIfEmpty()",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.util.ExceptionFactory::setErrorPrinter(io.github.vmzakharov.ecdataframe.util.Printer)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnComputed::addAllItemsFrom(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::supportsSourceType(io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::to(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Sum::longAccumulator(long, long)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Sum::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Min::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.util.FormatWithPlaceholders::message(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumnStored::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfStringColumnComputed::getTypedObject(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Sum::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::<init>(java.time.LocalDate)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Sum::objectAccumulator(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchema::columnAt(int)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.PrettyPrintVisitor::<init>(io.github.vmzakharov.ecdataframe.util.Printer)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumn::objectToValue(java.math.BigDecimal)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Sum::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.LongValue::apply(io.github.vmzakharov.ecdataframe.dsl.UnaryOp)",
            "io.github.vmzakharov.ecdataframe.dsl.SimpleEvalContext::getVariable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDecimalColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.UnaryOp::applyString(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::notFlagged(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnComputed::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dsl.IndexExpr::<init>(io.github.vmzakharov.ecdataframe.dsl.Expression, io.github.vmzakharov.ecdataframe.dsl.Expression)",
            "io.github.vmzakharov.ecdataframe.dsl.PredicateOp::applyDateTime(java.time.LocalDateTime, java.time.LocalDateTime)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::applyVisitorToScript(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionEvaluationVisitor, io.github.vmzakharov.ecdataframe.dsl.Script)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Sum::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitConstExpr(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addStringColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.DataFrameEvalContext::getVariableOrDefault(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.ComparisonResult::noNulls()",
            "io.github.vmzakharov.ecdataframe.dsl.function.IntrinsicFunctionDescriptor::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::<init>(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.BinaryOp::apply(java.util.function.Supplier, java.util.function.Supplier)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::addRowToColumn(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::<init>(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::newColumn(java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::<init>(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.AbstractScript::addStatement(io.github.vmzakharov.ecdataframe.dsl.Expression)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitAssignExpr(io.github.vmzakharov.ecdataframe.dsl.AssingExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDate(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::unEscape(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::notApplicable(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDoubleColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::stripNonNumericCharacters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::targetColumnType(io.github.vmzakharov.ecdataframe.dsl.value.ValueType)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateTimeColumnComputed::getTypedObject(int)",
            "io.github.vmzakharov.ecdataframe.dataset.LongFormatter::parseAsLong(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DoubleValue::apply(io.github.vmzakharov.ecdataframe.dsl.value.Value, io.github.vmzakharov.ecdataframe.dsl.ArithmeticOp)",
            "io.github.vmzakharov.ecdataframe.dsl.value.LongValue::asStringLiteral()",
            "io.github.vmzakharov.ecdataframe.dsl.DataFrameEvalContext::addDataSet(io.github.vmzakharov.ecdataframe.dataset.HierarchicalDataSet)",
            "io.github.vmzakharov.ecdataframe.grammar.CollectingErrorListener.Error::<init>(java.lang.Object, int, int, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Min::objectAccumulator(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dsl.IfElseExpr::accept(io.github.vmzakharov.ecdataframe.dsl.visitor.ExpressionVisitor)"
        ]
    }
]