[
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.select.QueryParser::consumeSubQuery()",
            "org.jsoup.select.QueryParser::byAttribute()",
            "org.jsoup.select.QueryParser::cssNthChild(boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.select.QueryParser::consumeSubQuery()",
            "org.jsoup.select.QueryParser::byAttribute()",
            "org.jsoup.select.QueryParser::cssNthChild(boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.nodes.Node::addChildren(int, org.jsoup.nodes.Node[])",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.select.NodeTraversor::traverse(org.jsoup.select.NodeVisitor, org.jsoup.nodes.Node)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.nodes.Node)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.nodes.TextNode::outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.parser.TokenQueue::chompBalanced(char, char)",
            "org.jsoup.nodes.Entities::escape(java.lang.Appendable, java.lang.String, org.jsoup.nodes.Document.OutputSettings, boolean, boolean, boolean, boolean)",
            "org.jsoup.select.QueryParser::findElements()",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.parser.HtmlTreeBuilder::resetInsertionMode()",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.nodes.Attribute::htmlNoValidate(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.parser.CharacterReader::rangeEquals(char[], int, int, java.lang.String)",
            "org.jsoup.select.StructuralEvaluator.Parent::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.safety.Safelist::testValidProtocol(org.jsoup.nodes.Element, org.jsoup.nodes.Attribute, java.util.Set)",
            "org.jsoup.safety.Safelist::isSafeAttribute(java.lang.String, org.jsoup.nodes.Element, org.jsoup.nodes.Attribute)",
            "org.jsoup.nodes.Document::ensureMetaCharsetElement()",
            "org.jsoup.nodes.Element::hasClass(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::reconstructFormattingElements()",
            "org.jsoup.select.QueryParser::combinator(char)",
            "org.jsoup.nodes.Attributes::deduplicate(org.jsoup.parser.ParseSettings)",
            "org.jsoup.helper.DataUtil::detectCharsetFromBom(java.nio.ByteBuffer)",
            "org.jsoup.parser.CharacterReader::nextIndexOf(java.lang.CharSequence)",
            "org.jsoup.helper.W3CDom.W3CBuilder::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.nodes.Element::text()",
            "org.jsoup.safety.Safelist::addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Node::hasAttr(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insertEmpty(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.parser.HtmlTreeBuilder::insertForm(org.jsoup.parser.Token.StartTag, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Response::<init>(java.net.HttpURLConnection, org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.helper.W3CDom.W3CBuilder::updateNamespaces(org.jsoup.nodes.Element)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.internal.StringUtil::appendNormalisedWhitespace(java.lang.StringBuilder, java.lang.String, boolean)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.helper.HttpConnection.Response::createConnection(org.jsoup.helper.HttpConnection.Request)",
            "org.jsoup.parser.CharacterReader::consumeLetterThenDigitSequence()"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.select.QueryParser::consumeSubQuery()",
            "org.jsoup.select.QueryParser::byAttribute()",
            "org.jsoup.select.QueryParser::cssNthChild(boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.nodes.Node::addChildren(int, org.jsoup.nodes.Node[])",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.select.NodeTraversor::traverse(org.jsoup.select.NodeVisitor, org.jsoup.nodes.Node)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.nodes.Node)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.nodes.TextNode::outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.parser.TokenQueue::chompBalanced(char, char)",
            "org.jsoup.nodes.Entities::escape(java.lang.Appendable, java.lang.String, org.jsoup.nodes.Document.OutputSettings, boolean, boolean, boolean, boolean)",
            "org.jsoup.select.QueryParser::findElements()",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.parser.HtmlTreeBuilder::resetInsertionMode()",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.nodes.Attribute::htmlNoValidate(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.parser.CharacterReader::rangeEquals(char[], int, int, java.lang.String)",
            "org.jsoup.select.StructuralEvaluator.Parent::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.safety.Safelist::testValidProtocol(org.jsoup.nodes.Element, org.jsoup.nodes.Attribute, java.util.Set)",
            "org.jsoup.safety.Safelist::isSafeAttribute(java.lang.String, org.jsoup.nodes.Element, org.jsoup.nodes.Attribute)",
            "org.jsoup.nodes.Document::ensureMetaCharsetElement()",
            "org.jsoup.nodes.Element::hasClass(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::reconstructFormattingElements()",
            "org.jsoup.select.QueryParser::combinator(char)",
            "org.jsoup.nodes.Attributes::deduplicate(org.jsoup.parser.ParseSettings)",
            "org.jsoup.helper.DataUtil::detectCharsetFromBom(java.nio.ByteBuffer)",
            "org.jsoup.parser.CharacterReader::nextIndexOf(java.lang.CharSequence)",
            "org.jsoup.helper.W3CDom.W3CBuilder::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.nodes.Element::text()",
            "org.jsoup.safety.Safelist::addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Node::hasAttr(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insertEmpty(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.parser.HtmlTreeBuilder::insertForm(org.jsoup.parser.Token.StartTag, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Response::<init>(java.net.HttpURLConnection, org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.helper.W3CDom.W3CBuilder::updateNamespaces(org.jsoup.nodes.Element)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.internal.StringUtil::appendNormalisedWhitespace(java.lang.StringBuilder, java.lang.String, boolean)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.helper.HttpConnection.Response::createConnection(org.jsoup.helper.HttpConnection.Request)",
            "org.jsoup.parser.CharacterReader::consumeLetterThenDigitSequence()",
            "org.jsoup.nodes.Entities::load(org.jsoup.nodes.Entities.EscapeMode, java.lang.String, int)",
            "org.jsoup.parser.CharacterReader::bufferUp()",
            "org.jsoup.nodes.Node::attr(java.lang.String)",
            "org.jsoup.parser.CharacterReader::consumeTo(java.lang.String)",
            "org.jsoup.nodes.Comment::asXmlDeclaration()",
            "org.jsoup.parser.TreeBuilder::trackNodePosition(org.jsoup.nodes.Node, org.jsoup.parser.Token, boolean)",
            "org.jsoup.parser.CharacterReader::cacheString(char[], java.lang.String[], int, int)",
            "org.jsoup.parser.HtmlTreeBuilder::inSpecificScope(java.lang.String[], java.lang.String[], java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Cleaner::createSafeElement(org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Element::data()",
            "org.jsoup.parser.XmlTreeBuilder::popStackToClose(org.jsoup.parser.Token.EndTag)",
            "org.jsoup.nodes.Element::outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.helper.CookieUtil::applyCookiesToRequest(org.jsoup.helper.HttpConnection.Request, java.net.HttpURLConnection)",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.parser.CharacterReader::consumeTagName()",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.nodes.Entities::appendEncoded(java.lang.Appendable, org.jsoup.nodes.Entities.EscapeMode, int)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.parser.HtmlTreeBuilder::inSelectScope(java.lang.String)",
            "org.jsoup.select.QueryParser::byTag()",
            "org.jsoup.parser.Tokeniser::emit(org.jsoup.parser.Token)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.helper.HttpConnection.Response::serialiseRequestUrl(org.jsoup.Connection.Request)",
            "org.jsoup.nodes.Attribute::getValidKey(java.lang.String, org.jsoup.nodes.Document.OutputSettings.Syntax)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.parser.CharacterReader::scanBufferForNewlines()",
            "org.jsoup.select.QueryParser::parse()",
            "org.jsoup.helper.HttpConnection.Response::createHeaderMap(java.net.HttpURLConnection)",
            "org.jsoup.parser.HtmlTreeBuilder::checkActiveFormattingElements(org.jsoup.nodes.Element)",
            "org.jsoup.safety.Cleaner.CleaningVisitor::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.parser.Token.Tag::newAttribute()",
            "org.jsoup.internal.ConstrainableInputStream::readToByteBuffer(int)",
            "org.jsoup.helper.DataUtil::getCharsetFromContentType(java.lang.String)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::codepointsForName(java.lang.String, int[])",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.nodes.Range.Position::equals(java.lang.Object)",
            "org.jsoup.parser.CharacterReader::matchesIgnoreCase(java.lang.String)",
            "org.jsoup.select.StructuralEvaluator.PreviousSibling::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.parser.HtmlTreeBuilder::popStackToClose(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::getActiveFormattingElement(java.lang.String)",
            "org.jsoup.nodes.XmlDeclaration::getWholeDeclaration(java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::childElementsList()",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.parser.CharacterReader::consumeLetterSequence()",
            "org.jsoup.parser.CharacterReader::consumeToAny(char[])",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.nodes.DocumentType::outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.DocumentType::<init>(java.lang.String, java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::basicWithImages()"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.select.QueryParser::consumeSubQuery()",
            "org.jsoup.select.QueryParser::byAttribute()",
            "org.jsoup.select.QueryParser::cssNthChild(boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.nodes.Node::addChildren(int, org.jsoup.nodes.Node[])",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.select.NodeTraversor::traverse(org.jsoup.select.NodeVisitor, org.jsoup.nodes.Node)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.nodes.Node)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.nodes.TextNode::outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.parser.TokenQueue::chompBalanced(char, char)",
            "org.jsoup.nodes.Entities::escape(java.lang.Appendable, java.lang.String, org.jsoup.nodes.Document.OutputSettings, boolean, boolean, boolean, boolean)",
            "org.jsoup.select.QueryParser::findElements()",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.parser.HtmlTreeBuilder::resetInsertionMode()",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.nodes.Attribute::htmlNoValidate(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.parser.CharacterReader::rangeEquals(char[], int, int, java.lang.String)",
            "org.jsoup.select.StructuralEvaluator.Parent::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.safety.Safelist::testValidProtocol(org.jsoup.nodes.Element, org.jsoup.nodes.Attribute, java.util.Set)",
            "org.jsoup.safety.Safelist::isSafeAttribute(java.lang.String, org.jsoup.nodes.Element, org.jsoup.nodes.Attribute)",
            "org.jsoup.nodes.Document::ensureMetaCharsetElement()",
            "org.jsoup.nodes.Element::hasClass(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::reconstructFormattingElements()",
            "org.jsoup.select.QueryParser::combinator(char)",
            "org.jsoup.nodes.Attributes::deduplicate(org.jsoup.parser.ParseSettings)",
            "org.jsoup.helper.DataUtil::detectCharsetFromBom(java.nio.ByteBuffer)",
            "org.jsoup.parser.CharacterReader::nextIndexOf(java.lang.CharSequence)",
            "org.jsoup.helper.W3CDom.W3CBuilder::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.nodes.Element::text()",
            "org.jsoup.safety.Safelist::addEnforcedAttribute(java.lang.String, java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Node::hasAttr(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insertEmpty(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.parser.HtmlTreeBuilder::insertForm(org.jsoup.parser.Token.StartTag, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Response::<init>(java.net.HttpURLConnection, org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.helper.W3CDom.W3CBuilder::updateNamespaces(org.jsoup.nodes.Element)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.internal.StringUtil::appendNormalisedWhitespace(java.lang.StringBuilder, java.lang.String, boolean)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.helper.HttpConnection.Response::createConnection(org.jsoup.helper.HttpConnection.Request)",
            "org.jsoup.parser.CharacterReader::consumeLetterThenDigitSequence()",
            "org.jsoup.nodes.Entities::load(org.jsoup.nodes.Entities.EscapeMode, java.lang.String, int)",
            "org.jsoup.parser.CharacterReader::bufferUp()",
            "org.jsoup.nodes.Node::attr(java.lang.String)",
            "org.jsoup.parser.CharacterReader::consumeTo(java.lang.String)",
            "org.jsoup.nodes.Comment::asXmlDeclaration()",
            "org.jsoup.parser.TreeBuilder::trackNodePosition(org.jsoup.nodes.Node, org.jsoup.parser.Token, boolean)",
            "org.jsoup.parser.CharacterReader::cacheString(char[], java.lang.String[], int, int)",
            "org.jsoup.parser.HtmlTreeBuilder::inSpecificScope(java.lang.String[], java.lang.String[], java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Cleaner::createSafeElement(org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Element::data()",
            "org.jsoup.parser.XmlTreeBuilder::popStackToClose(org.jsoup.parser.Token.EndTag)",
            "org.jsoup.nodes.Element::outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.helper.CookieUtil::applyCookiesToRequest(org.jsoup.helper.HttpConnection.Request, java.net.HttpURLConnection)",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.parser.CharacterReader::consumeTagName()",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.nodes.Entities::appendEncoded(java.lang.Appendable, org.jsoup.nodes.Entities.EscapeMode, int)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.parser.HtmlTreeBuilder::inSelectScope(java.lang.String)",
            "org.jsoup.select.QueryParser::byTag()",
            "org.jsoup.parser.Tokeniser::emit(org.jsoup.parser.Token)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.helper.HttpConnection.Response::serialiseRequestUrl(org.jsoup.Connection.Request)",
            "org.jsoup.nodes.Attribute::getValidKey(java.lang.String, org.jsoup.nodes.Document.OutputSettings.Syntax)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.parser.CharacterReader::scanBufferForNewlines()",
            "org.jsoup.select.QueryParser::parse()",
            "org.jsoup.helper.HttpConnection.Response::createHeaderMap(java.net.HttpURLConnection)",
            "org.jsoup.parser.HtmlTreeBuilder::checkActiveFormattingElements(org.jsoup.nodes.Element)",
            "org.jsoup.safety.Cleaner.CleaningVisitor::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.parser.Token.Tag::newAttribute()",
            "org.jsoup.internal.ConstrainableInputStream::readToByteBuffer(int)",
            "org.jsoup.helper.DataUtil::getCharsetFromContentType(java.lang.String)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::codepointsForName(java.lang.String, int[])",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.nodes.Range.Position::equals(java.lang.Object)",
            "org.jsoup.parser.CharacterReader::matchesIgnoreCase(java.lang.String)",
            "org.jsoup.select.StructuralEvaluator.PreviousSibling::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.parser.HtmlTreeBuilder::popStackToClose(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::getActiveFormattingElement(java.lang.String)",
            "org.jsoup.nodes.XmlDeclaration::getWholeDeclaration(java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::childElementsList()",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.parser.CharacterReader::consumeLetterSequence()",
            "org.jsoup.parser.CharacterReader::consumeToAny(char[])",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.nodes.DocumentType::outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.DocumentType::<init>(java.lang.String, java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.select.Collector.FirstFinder::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.nodes.Attributes::putIgnoreCase(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attributes::remove(int)",
            "org.jsoup.nodes.Attributes::putUserData(java.lang.String, java.lang.Object)",
            "org.jsoup.select.StructuralEvaluator.Has::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Element::hasText()",
            "org.jsoup.parser.Tag::valueOf(java.lang.String, org.jsoup.parser.ParseSettings)",
            "org.jsoup.parser.CharacterReader::consumeRawData()",
            "org.jsoup.select.Evaluator.IsOnlyOfType::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.parser.HtmlTreeBuilder::insertNode(org.jsoup.nodes.Node, org.jsoup.parser.Token)",
            "org.jsoup.select.Elements::childNodesOfType(java.lang.Class)",
            "org.jsoup.parser.CharacterReader::consumeHexSequence()",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::append(java.lang.String)",
            "org.jsoup.parser.CharacterReader::consumeAttributeQuoted(boolean)",
            "org.jsoup.parser.TreeBuilder::processStartTag(java.lang.String, org.jsoup.nodes.Attributes)",
            "org.jsoup.nodes.Node::addSiblingHtml(int, java.lang.String)",
            "org.jsoup.helper.HttpConnection.Base::hasHeaderWithValue(java.lang.String, java.lang.String)",
            "org.jsoup.helper.HttpConnection.Base::addHeader(java.lang.String, java.lang.String)",
            "org.jsoup.parser.CharacterReader::matches(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.Character)",
            "org.jsoup.select.Collector.Accumulator::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.select.CombiningEvaluator.And::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.select.CombiningEvaluator.Or::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Document::documentType()",
            "org.jsoup.parser.XmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.select.Elements)",
            "org.jsoup.nodes.Attributes::html(java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.helper.DataUtil::validateCharset(java.lang.String)",
            "org.jsoup.internal.StringUtil::padding(int, int)",
            "org.jsoup.nodes.Comment::outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.select.Evaluator.AttributeKeyPair::<init>(java.lang.String, java.lang.String, boolean)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.helper.W3CDom::selectXpath(java.lang.String, org.w3c.dom.Node)",
            "org.jsoup.nodes.Element::outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::nextElementSibling()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.parser.XmlTreeBuilder::initialiseParse(java.io.Reader, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::parse()",
            "org.jsoup.nodes.Attributes::iterator()",
            "org.jsoup.nodes.Range::of(org.jsoup.nodes.Node, boolean)",
            "org.jsoup.nodes.DocumentType::updatePubSyskey()",
            "org.jsoup.nodes.Element::closest(org.jsoup.select.Evaluator)",
            "org.jsoup.nodes.Element::appendWholeText(org.jsoup.nodes.Node, java.lang.StringBuilder)",
            "org.jsoup.safety.Cleaner::isValidBodyHtml(java.lang.String)",
            "org.jsoup.helper.W3CDom::convert(org.jsoup.nodes.Element, org.w3c.dom.Document)",
            "org.jsoup.helper.W3CDom::sourceNodes(org.w3c.dom.NodeList, java.lang.Class)",
            "org.jsoup.parser.HtmlTreeBuilder::popStackToClose(java.lang.String[])",
            "org.jsoup.parser.HtmlTreeBuilder::insertInFosterParent(org.jsoup.nodes.Node)",
            "org.jsoup.safety.Safelist::addProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.nodes.Attribute::shouldCollapseAttribute(java.lang.String, java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.parser.XmlTreeBuilder::process(org.jsoup.parser.Token)",
            "org.jsoup.helper.DataUtil::load(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Base::header(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::previousElementSibling()",
            "org.jsoup.parser.CharacterReader::columnNumber(int)",
            "org.jsoup.parser.TokenQueue::consume(java.lang.String)",
            "org.jsoup.nodes.Element::toggleClass(java.lang.String)",
            "org.jsoup.nodes.LeafNode::attr(java.lang.String)",
            "org.jsoup.nodes.Node::absUrl(java.lang.String)",
            "org.jsoup.parser.CharacterReader::lineNumIndex(int)",
            "org.jsoup.parser.TreeBuilder::tagFor(java.lang.String, org.jsoup.parser.ParseSettings)",
            "org.jsoup.helper.HttpConnection.Base::scanHeaders(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.internal.StringUtil::join(java.util.Iterator, java.lang.String)",
            "org.jsoup.internal.StringUtil::in(java.lang.String, java.lang.String[])",
            "org.jsoup.internal.StringUtil::resolve(java.net.URL, java.lang.String)",
            "org.jsoup.nodes.Attribute::setValue(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::indexInList(org.jsoup.nodes.Element, java.util.List)",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.nodes.Element::appendNormalisedText(java.lang.StringBuilder, org.jsoup.nodes.TextNode)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.XmlDeclaration::outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.parser.CharacterReader::matchesAny(char[])",
            "org.jsoup.parser.Tokeniser::emit(char)",
            "org.jsoup.parser.TokenQueue::matchesAny(char[])",
            "org.jsoup.parser.TreeBuilder::runParser()",
            "org.jsoup.select.QueryParser::matches(boolean)",
            "org.jsoup.select.QueryParser::matchesWholeText(boolean)",
            "org.jsoup.nodes.Attributes::checkCapacity(int)",
            "org.jsoup.parser.Tokeniser::read()",
            "org.jsoup.select.Evaluator.IsNthLastOfType::calculatePosition(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.helper.HttpConnection.Response::setOutputContentType(org.jsoup.Connection.Request)",
            "org.jsoup.parser.CharacterReader::matchesLetter()",
            "org.jsoup.nodes.Document::normaliseTextNodes(org.jsoup.nodes.Element)",
            "org.jsoup.examples.ListLinks::trim(java.lang.String, int)",
            "org.jsoup.helper.DataUtil::load(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Base::cookie(java.lang.String, java.lang.String)",
            "org.jsoup.helper.Validate::ensureNotNull(java.lang.Object, java.lang.String, java.lang.Object[])",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Element::append(java.lang.String)",
            "org.jsoup.nodes.Node::nextSibling()",
            "org.jsoup.parser.CharacterReader::consumeTo(char)",
            "org.jsoup.parser.CharacterReader::lineNumber(int)",
            "org.jsoup.parser.Parser::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.ParseErrorList)",
            "org.jsoup.parser.TreeBuilder::processStartTag(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attributes::put(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Element::classNames(java.util.Set)",
            "org.jsoup.nodes.Node.OuterHtmlVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.parser.HtmlTreeBuilder::maybeSetBaseUri(org.jsoup.nodes.Element)",
            "org.jsoup.helper.HttpConnection.Base::getHeadersCaseInsensitive(java.lang.String)",
            "org.jsoup.nodes.Attributes::indexOfKey(java.lang.String)",
            "org.jsoup.nodes.Attributes::indexOfKeyIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Node::replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)",
            "org.jsoup.parser.HtmlTreeBuilder::removeFromStack(org.jsoup.nodes.Element)",
            "org.jsoup.parser.Tokeniser::emit(java.lang.StringBuilder)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.safety.Safelist::basicWithImages()"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Element::hasText()",
            "org.jsoup.select.Elements::childNodesOfType(java.lang.Class)",
            "org.jsoup.nodes.Node::addSiblingHtml(int, java.lang.String)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.select.Elements)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.nodes.Element::closest(org.jsoup.select.Evaluator)",
            "org.jsoup.safety.Cleaner::isValidBodyHtml(java.lang.String)",
            "org.jsoup.helper.DataUtil::load(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::toggleClass(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Document::normaliseTextNodes(org.jsoup.nodes.Element)",
            "org.jsoup.helper.DataUtil::load(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.Validate::ensureNotNull(java.lang.Object, java.lang.String, java.lang.Object[])",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Element::append(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.examples.HtmlToPlainText::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::relaxed()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::next(java.lang.String)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.select.Elements::prev()",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.Jsoup::isValid(java.lang.String, org.jsoup.safety.Safelist)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.select.Elements::next(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.select.Elements::eachText()",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.select.Elements::dataNodes()",
            "org.jsoup.select.Elements::filter(org.jsoup.select.NodeFilter)",
            "org.jsoup.nodes.Element::closest(java.lang.String)",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::expectFirst(java.lang.String)",
            "org.jsoup.select.Elements::append(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.Object, java.lang.Object)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Element::before(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.helper.HttpConnection::post()",
            "org.jsoup.safety.Safelist::relaxed()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.select.Elements::next(java.lang.String)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.nodes.FormElement::submit()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Elements::nextAll(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.Jsoup::isValid(java.lang.String, org.jsoup.safety.Safelist)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.select.Elements::next()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.Object, java.lang.Object)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.select.Elements::eachText()",
            "org.jsoup.select.Elements::filter(org.jsoup.select.NodeFilter)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::closest(java.lang.String)",
            "org.jsoup.nodes.Element::expectFirst(java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.select.Elements::append(java.lang.String)",
            "org.jsoup.nodes.Element::before(java.lang.String)",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::dataNodes()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.helper.HttpConnection::data(java.util.Collection)",
            "org.jsoup.nodes.Attribute::hashCode()",
            "org.jsoup.select.Collector.Accumulator::<init>(org.jsoup.nodes.Element, org.jsoup.select.Elements, org.jsoup.select.Evaluator)",
            "org.jsoup.parser.TreeBuilder::processEndTag(java.lang.String)",
            "org.jsoup.select.Evaluator.IndexLessThan::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.IsNthChild::calculatePosition(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.parser.XmlTreeBuilder::insert(org.jsoup.parser.Token.Character)",
            "org.jsoup.nodes.Document::outputSettings(org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::childElementsList()",
            "org.jsoup.select.Elements::next()",
            "org.jsoup.parser.Token.Tag::appendAttributeValue(char)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.parser.HtmlTreeBuilder::replaceOnStack(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.parser.TreeBuilder::isContentForTagData(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.select.Elements::val(java.lang.String)",
            "org.jsoup.safety.Safelist::testValidProtocol(org.jsoup.nodes.Element, org.jsoup.nodes.Attribute, java.util.Set)",
            "org.jsoup.parser.CharacterReader::trackNewlines(boolean)",
            "org.jsoup.nodes.Element.NodeList::<init>(org.jsoup.nodes.Element, int)",
            "org.jsoup.select.Elements::prev(java.lang.String)",
            "org.jsoup.parser.Tokeniser::<init>(org.jsoup.parser.CharacterReader, org.jsoup.parser.ParseErrorList)",
            "org.jsoup.select.Evaluator.IndexLessThan::toString()",
            "org.jsoup.nodes.Document::connection()",
            "org.jsoup.nodes.Attributes::indexOfKeyIgnoreCase(java.lang.String)",
            "org.jsoup.internal.StringUtil::in(java.lang.String, java.lang.String[])",
            "org.jsoup.parser.HtmlTreeBuilder::insertForm(org.jsoup.parser.Token.StartTag, boolean, boolean)",
            "org.jsoup.nodes.Element::accumulateParents(org.jsoup.nodes.Element, org.jsoup.select.Elements)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.Character)",
            "org.jsoup.select.Evaluator.IsNthLastOfType::calculatePosition(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Attribute::htmlNoValidate(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.helper.W3CDom::propertiesFromMap(java.util.Map)",
            "org.jsoup.parser.TokenQueue::chompBalanced(char, char)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.helper.HttpConnection::proxy(java.lang.String, int)",
            "org.jsoup.Jsoup::parse(java.net.URL, int)",
            "org.jsoup.select.StructuralEvaluator.Has::toString()",
            "org.jsoup.parser.HtmlTreeBuilder::resetBody()",
            "org.jsoup.select.Elements::outerHtml()",
            "org.jsoup.helper.HttpConnection::encodeUrl(java.lang.String)",
            "org.jsoup.nodes.Element::getElementsByAttributeValueMatching(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.DataUtil::readToByteBuffer(java.io.InputStream, int)",
            "org.jsoup.nodes.Element::text(java.lang.String)",
            "org.jsoup.nodes.Comment::outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Attributes.Dataset.EntrySet::size()",
            "org.jsoup.nodes.Element::prepend(java.lang.String)",
            "org.jsoup.internal.StringUtil::isWhitespace(int)",
            "org.jsoup.nodes.Element::prependChildren(java.util.Collection)",
            "org.jsoup.nodes.Document::charset(java.nio.charset.Charset)",
            "org.jsoup.select.CombiningEvaluator::<init>(java.util.Collection)",
            "org.jsoup.nodes.Attribute::getValue()",
            "org.jsoup.internal.Normalizer::normalize(java.lang.String, boolean)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.helper.HttpConnection::request(org.jsoup.Connection.Request)",
            "org.jsoup.select.Evaluator.TagEndsWith::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Document::updateMetaCharsetElement(boolean)",
            "org.jsoup.nodes.Document::connection(org.jsoup.Connection)",
            "org.jsoup.nodes.Element::getElementsByAttribute(java.lang.String)",
            "org.jsoup.helper.CookieUtil::storeCookies(org.jsoup.helper.HttpConnection.Request, java.net.URL, java.util.Map)",
            "org.jsoup.select.Evaluator.MatchesOwn::toString()",
            "org.jsoup.helper.HttpConnection::userAgent(java.lang.String)",
            "org.jsoup.helper.HttpConnection.KeyVal::key(java.lang.String)",
            "org.jsoup.select.Elements::removeAttr(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::currentTemplateMode()",
            "org.jsoup.helper.HttpConnection.Request::ignoreHttpErrors(boolean)",
            "org.jsoup.internal.StringUtil::isInvisibleChar(int)",
            "org.jsoup.select.StructuralEvaluator.PreviousSibling::<init>(org.jsoup.select.Evaluator)",
            "org.jsoup.parser.Token::isComment()"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.select.Evaluator.Tag::<init>(java.lang.String)",
            "org.jsoup.nodes.Document::body()",
            "org.jsoup.nodes.Document.OutputSettings::charset(java.nio.charset.Charset)",
            "org.jsoup.helper.HttpConnection.Base::hasCookie(java.lang.String)",
            "org.jsoup.select.Evaluator.AttributeWithValueEnding::toString()",
            "org.jsoup.parser.Token.Tag::appendAttributeName(char)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.helper.HttpConnection::maxBodySize(int)",
            "org.jsoup.select.Elements::attr(java.lang.String)",
            "org.jsoup.helper.DataUtil::getCharsetFromContentType(java.lang.String)",
            "org.jsoup.parser.Tokeniser::error(org.jsoup.parser.TokeniserState)",
            "org.jsoup.internal.Normalizer::lowerCase(java.lang.String)",
            "org.jsoup.select.Elements::outerHtml()",
            "org.jsoup.safety.Safelist::addTags(java.lang.String[])",
            "org.jsoup.nodes.Entities::canEncode(org.jsoup.nodes.Entities.CoreCharset, char, java.nio.charset.CharsetEncoder)",
            "org.jsoup.nodes.Attribute::htmlNoValidate(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.parser.TreeBuilder::error(java.lang.String)",
            "org.jsoup.select.Evaluator.IsOnlyChild::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.parser.Token.Tag::ensureAttrValue()",
            "org.jsoup.select.Elements::remove()",
            "org.jsoup.internal.StringUtil::inSorted(java.lang.String, java.lang.String[])",
            "org.jsoup.nodes.LeafNode::coreValue()",
            "org.jsoup.nodes.Element::prependChild(org.jsoup.nodes.Node)",
            "org.jsoup.parser.Token.Tag::hasAttribute(java.lang.String)",
            "org.jsoup.helper.HttpConnection.Request::<init>(org.jsoup.helper.HttpConnection.Request)",
            "org.jsoup.parser.CharacterReader::matches(java.lang.String)",
            "org.jsoup.nodes.Element::after(org.jsoup.nodes.Node)",
            "org.jsoup.nodes.DocumentType::outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.internal.ConstrainableInputStream::timeout(long, long)",
            "org.jsoup.helper.HttpConnection::get()",
            "org.jsoup.helper.HttpConnection::proxy(java.lang.String, int)",
            "org.jsoup.helper.HttpConnection::requestBody(java.lang.String)",
            "org.jsoup.parser.Tokeniser::emit(org.jsoup.parser.Token)",
            "org.jsoup.select.StructuralEvaluator.ImmediatePreviousSibling::toString()",
            "org.jsoup.parser.HtmlTreeBuilder::popStackToClose(java.lang.String[])",
            "org.jsoup.nodes.Attributes::internalKey(java.lang.String)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::<init>(int)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String)",
            "org.jsoup.select.Elements::<init>(java.util.List)",
            "org.jsoup.nodes.Element::forEachNode(org.jsoup.helper.Consumer)",
            "org.jsoup.select.Evaluator.TagEndsWith::<init>(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::inButtonScope(java.lang.String)",
            "org.jsoup.helper.Validate::isFalse(boolean)",
            "org.jsoup.internal.StringUtil::padding(int)",
            "org.jsoup.select.QueryParser::findElements()",
            "org.jsoup.nodes.Node.OuterHtmlVisitor::<init>(java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Comment::isXmlDeclarationData(java.lang.String)",
            "org.jsoup.parser.Token.Doctype::reset()",
            "org.jsoup.parser.CharacterReader::unconsume()",
            "org.jsoup.nodes.Element::getElementsByAttributeValueEnding(java.lang.String, java.lang.String)",
            "org.jsoup.select.Evaluator.Matches::<init>(java.util.regex.Pattern)",
            "org.jsoup.parser.CharacterReader::matches(char)",
            "org.jsoup.parser.TokenQueue::consumeTo(java.lang.String)",
            "org.jsoup.helper.Validate::notNull(java.lang.Object, java.lang.String)",
            "org.jsoup.select.Elements::prevAll(java.lang.String)",
            "org.jsoup.nodes.Element::appendNormalisedText(java.lang.StringBuilder, org.jsoup.nodes.TextNode)",
            "org.jsoup.helper.HttpConnection::header(java.lang.String, java.lang.String)",
            "org.jsoup.helper.HttpConnection.Base::header(java.lang.String)",
            "org.jsoup.nodes.Element::text()",
            "org.jsoup.select.Evaluator.Matches::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.nodes.Node)",
            "org.jsoup.helper.HttpConnection.Request::<init>()",
            "org.jsoup.parser.Tokeniser::emit(java.lang.StringBuilder)",
            "org.jsoup.helper.W3CDom::OutputXml()",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request)",
            "org.jsoup.nodes.Element::select(java.lang.String)",
            "org.jsoup.parser.XmlTreeBuilder::insertNode(org.jsoup.nodes.Node, org.jsoup.parser.Token)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.select.Evaluator.IsNthLastOfType::calculatePosition(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Element::prepend(java.lang.String)",
            "org.jsoup.select.Selector::select(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.safety.Cleaner.CleaningVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.nodes.Document::normaliseTextNodes(org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Attributes::hasKeyIgnoreCase(java.lang.String)",
            "org.jsoup.helper.ValidationException::fillInStackTrace()",
            "org.jsoup.nodes.Element::append(java.lang.String)",
            "org.jsoup.helper.ChangeNotifyingArrayList::removeAll(java.util.Collection)",
            "org.jsoup.nodes.TextNode::text()",
            "org.jsoup.nodes.Attributes::hashCode()",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.parser.Token.Comment::ensureData()",
            "org.jsoup.select.Elements::select(java.lang.String)",
            "org.jsoup.helper.ValidationException::<init>(java.lang.String)",
            "org.jsoup.Jsoup::parseBodyFragment(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Node::hasParent()",
            "org.jsoup.nodes.Node::childNode(int)",
            "org.jsoup.helper.HttpConnection.Base::removeHeader(java.lang.String)",
            "org.jsoup.parser.ParseSettings::<init>(boolean, boolean)",
            "org.jsoup.select.Evaluator.AttributeWithValueContaining::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.parser.HtmlTreeBuilder::positionOfElement(org.jsoup.nodes.Element)",
            "org.jsoup.parser.CharacterReader::isEmpty()",
            "org.jsoup.helper.HttpConnection.Response::createHeaderMap(java.net.HttpURLConnection)",
            "org.jsoup.helper.HttpConnection.Base::scanHeaders(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::clearStackToTableBodyContext()",
            "org.jsoup.select.Evaluator.AttributeWithValue::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Node::getDeepChild(org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Document::parser(org.jsoup.parser.Parser)",
            "org.jsoup.select.Elements::<init>(java.util.Collection)",
            "org.jsoup.nodes.DocumentType::has(java.lang.String)",
            "org.jsoup.helper.DataUtil::crossStreams(java.io.InputStream, java.io.OutputStream)",
            "org.jsoup.helper.HttpConnection.KeyVal::create(java.lang.String, java.lang.String, java.io.InputStream)",
            "org.jsoup.helper.ChangeNotifyingArrayList::addAll(int, java.util.Collection)",
            "org.jsoup.nodes.Element::shouldIndent(org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.helper.HttpConnection::<init>(org.jsoup.helper.HttpConnection.Request)",
            "org.jsoup.internal.StringUtil.StringJoiner::append(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::head(org.jsoup.nodes.Node, int)",
            "org.jsoup.safety.Safelist.Protocol::valueOf(java.lang.String)",
            "org.jsoup.parser.TokenQueue::unescape(java.lang.String)",
            "org.jsoup.select.QueryParser::indexEquals()",
            "org.jsoup.select.Elements::val()",
            "org.jsoup.select.Evaluator.AttributeWithValueMatching::<init>(java.lang.String, java.util.regex.Pattern)",
            "org.jsoup.nodes.Attributes::isInternalKey(java.lang.String)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.nodes.Attributes.Dataset.EntrySet::size()",
            "org.jsoup.nodes.Attributes::html()",
            "org.jsoup.helper.DataUtil::detectCharsetFromBom(java.nio.ByteBuffer)",
            "org.jsoup.nodes.Attribute::shouldCollapseAttribute(java.lang.String, java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.helper.HttpConnection.Base::hasHeaderWithValue(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.select.Evaluator.MatchesWholeText::<init>(java.util.regex.Pattern)",
            "org.jsoup.select.Evaluator.IsNthChild::calculatePosition(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.select.Elements::eq(int)",
            "org.jsoup.helper.HttpConnection::get()",
            "org.jsoup.nodes.Attributes::get(java.lang.String)",
            "org.jsoup.nodes.Element::indexInList(org.jsoup.nodes.Element, java.util.List)",
            "org.jsoup.nodes.Element::getElementsByAttributeValueMatching(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Range::of(org.jsoup.nodes.Node, boolean)",
            "org.jsoup.nodes.Document::htmlEl()",
            "org.jsoup.select.Evaluator.ContainsOwnText::toString()",
            "org.jsoup.helper.W3CDom::convert(org.jsoup.nodes.Element, org.w3c.dom.Document)",
            "org.jsoup.nodes.Document::quirksMode(org.jsoup.nodes.Document.QuirksMode)",
            "org.jsoup.parser.XmlTreeBuilder::parse(java.lang.String, java.lang.String)",
            "org.jsoup.select.Evaluator.Matches::<init>(java.util.regex.Pattern)",
            "org.jsoup.parser.CharacterReader::nextIndexOf(char)",
            "org.jsoup.helper.DataUtil::crossStreams(java.io.InputStream, java.io.OutputStream)",
            "org.jsoup.parser.CharacterReader::matchConsumeIgnoreCase(java.lang.String)",
            "org.jsoup.helper.Validate::ensureNotNull(java.lang.Object, java.lang.String, java.lang.Object[])",
            "org.jsoup.nodes.DataNode::outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.safety.Safelist.AttributeKey::<init>(java.lang.String)",
            "org.jsoup.nodes.Element::lastElementSibling()",
            "org.jsoup.helper.HttpConnection::headers(java.util.Map)",
            "org.jsoup.nodes.Element::html(java.lang.Appendable)",
            "org.jsoup.safety.Safelist.AttributeValue::valueOf(java.lang.String)",
            "org.jsoup.nodes.Range.Position::<init>(int, int, int)",
            "org.jsoup.select.Evaluator.IsFirstChild::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Attribute::htmlNoValidate(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.select.QueryParser::containsWholeText(boolean)",
            "org.jsoup.nodes.Element::is(java.lang.String)",
            "org.jsoup.helper.Validate::notNull(java.lang.Object, java.lang.String)",
            "org.jsoup.nodes.Element::dataNodes()",
            "org.jsoup.nodes.Element::appendChildren(java.util.Collection)",
            "org.jsoup.select.QueryParser::allElements()",
            "org.jsoup.nodes.Element::text()",
            "org.jsoup.Jsoup::parse(java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.nodes.Document.OutputSettings::maxPaddingWidth(int)",
            "org.jsoup.nodes.Document::title(java.lang.String)",
            "org.jsoup.nodes.Document::connection()",
            "org.jsoup.parser.Parser::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String)",
            "org.jsoup.parser.Tag::isSelfClosing()",
            "org.jsoup.parser.XmlTreeBuilder::parseFragment(java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.select.Evaluator.AttributeWithValueMatching::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Node::after(org.jsoup.nodes.Node)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream)",
            "org.jsoup.nodes.Element::prependChild(org.jsoup.nodes.Node)",
            "org.jsoup.parser.CharacterReader::matchesIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Element::insertChildren(int, java.util.Collection)",
            "org.jsoup.parser.CharacterReader::consumeRawData()",
            "org.jsoup.internal.ConstrainableInputStream::read(byte[], int, int)",
            "org.jsoup.helper.HttpConnection.KeyVal::value(java.lang.String)",
            "org.jsoup.safety.Safelist::removeTags(java.lang.String[])",
            "org.jsoup.nodes.DocumentType::updatePubSyskey()",
            "org.jsoup.select.Elements::traverse(org.jsoup.select.NodeVisitor)",
            "org.jsoup.helper.ChangeNotifyingArrayList::remove(java.lang.Object)",
            "org.jsoup.select.Evaluator.IsNthLastOfType::<init>(int, int)",
            "org.jsoup.select.Elements::text()",
            "org.jsoup.nodes.Document.OutputSettings::escapeMode(org.jsoup.nodes.Entities.EscapeMode)",
            "org.jsoup.parser.HtmlTreeBuilder::pushWithBookmark(org.jsoup.nodes.Element, int)",
            "org.jsoup.parser.Tokeniser::emit(char)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.select.Collector.Accumulator::<init>(org.jsoup.nodes.Element, org.jsoup.select.Elements, org.jsoup.select.Evaluator)",
            "org.jsoup.parser.Tag::isKnownTag(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::error(org.jsoup.parser.HtmlTreeBuilderState)",
            "org.jsoup.select.Evaluator.IndexLessThan::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.parser.HtmlTreeBuilder::clearStackToContext(java.lang.String[])",
            "org.jsoup.helper.HttpConnection::response()",
            "org.jsoup.nodes.Comment::<init>(java.lang.String)",
            "org.jsoup.helper.HttpConnection.Response::charset(java.lang.String)",
            "org.jsoup.parser.TreeBuilder::error(java.lang.String, java.lang.Object[])",
            "org.jsoup.nodes.Node::ownerDocument()",
            "org.jsoup.helper.HttpConnection.Response::prepareByteData()",
            "org.jsoup.nodes.Element::before(java.lang.String)",
            "org.jsoup.nodes.Element::attr(java.lang.String, boolean)",
            "org.jsoup.helper.W3CDom::convert(org.jsoup.nodes.Document)",
            "org.jsoup.select.QueryParser::matches(boolean)",
            "org.jsoup.nodes.Attributes::hasKey(java.lang.String)",
            "org.jsoup.select.Evaluator.Class::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.helper.HttpConnection::timeout(int)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.Character)",
            "org.jsoup.nodes.Element::previousElementSiblings()",
            "org.jsoup.parser.Parser::unescapeEntities(java.lang.String, boolean)",
            "org.jsoup.nodes.XmlDeclaration::outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Document::documentType()",
            "org.jsoup.nodes.Comment::outerHtmlHead(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.internal.StringUtil.StringJoiner::add(java.lang.Object)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.parser.ParseError::<init>(org.jsoup.parser.CharacterReader, java.lang.String, java.lang.Object[])",
            "org.jsoup.parser.XmlTreeBuilder::insert(org.jsoup.parser.Token.Doctype)",
            "org.jsoup.parser.HtmlTreeBuilder::isContentForTagData(java.lang.String)",
            "org.jsoup.nodes.Node::previousSibling()",
            "org.jsoup.select.CombiningEvaluator.And::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Element::outerHtmlTail(java.lang.Appendable, int, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.nodes.Node::attr(java.lang.String)",
            "org.jsoup.select.Collector::findFirst(org.jsoup.select.Evaluator, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Node::attributesSize()",
            "org.jsoup.select.Evaluator.ContainsWholeText::toString()",
            "org.jsoup.internal.StringUtil::resolve(java.net.URL, java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::inScope(java.lang.String[])",
            "org.jsoup.select.Evaluator.Id::toString()",
            "org.jsoup.select.Elements::html(java.lang.String)",
            "org.jsoup.nodes.Element::getElementsByAttributeValueMatching(java.lang.String, java.util.regex.Pattern)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::isNamedEntity(java.lang.String)",
            "org.jsoup.helper.HttpConnection::referrer(java.lang.String)",
            "org.jsoup.select.QueryParser::byId()",
            "org.jsoup.nodes.Attributes::indexOfKey(java.lang.String)",
            "org.jsoup.select.Elements::wrap(java.lang.String)",
            "org.jsoup.parser.Token.Tag::appendAttributeValue(char)",
            "org.jsoup.helper.ChangeNotifyingArrayList::set(int, java.lang.Object)",
            "org.jsoup.select.Elements::parents()",
            "org.jsoup.helper.CookieUtil::applyCookiesToRequest(org.jsoup.helper.HttpConnection.Request, java.net.HttpURLConnection)",
            "org.jsoup.nodes.Element::classNames()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.helper.DataUtil.BomCharset::<init>(java.lang.String, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.nodes.Document::normaliseTextNodes(org.jsoup.nodes.Element)",
            "org.jsoup.select.CombiningEvaluator.And::toString()",
            "org.jsoup.examples.Wikipedia::log(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.HttpConnection::followRedirects(boolean)",
            "org.jsoup.helper.HttpConnection::data(java.util.Map)",
            "org.jsoup.parser.TreeBuilder::onNodeInserted(org.jsoup.nodes.Node, org.jsoup.parser.Token)",
            "org.jsoup.nodes.Attributes.Dataset::<init>(org.jsoup.nodes.Attributes)",
            "org.jsoup.parser.Token.Tag::appendAttributeName(java.lang.String)",
            "org.jsoup.select.Evaluator.ContainsWholeOwnText::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Element::addClass(java.lang.String)",
            "org.jsoup.parser.TreeBuilder::error(java.lang.String)",
            "org.jsoup.helper.HttpConnection::proxy(java.lang.String, int)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.helper.HttpConnection::url(java.lang.String)",
            "org.jsoup.select.Elements::attr(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::popStackToBefore(java.lang.String)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.nodes.Node)",
            "org.jsoup.parser.HtmlTreeBuilder::inSpecificScope(java.lang.String[], java.lang.String[], java.lang.String[])",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String)",
            "org.jsoup.nodes.Document::ensureMetaCharsetElement()",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.helper.HttpConnection.Base::scanHeaders(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::removeLastFormattingElement()",
            "org.jsoup.nodes.Element::clearAttributes()",
            "org.jsoup.parser.XmlTreeBuilder::insertNode(org.jsoup.nodes.Node, org.jsoup.parser.Token)",
            "org.jsoup.parser.HtmlTreeBuilder::replaceInQueue(java.util.ArrayList, org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.nodes.Document.OutputSettings::charset(java.nio.charset.Charset)",
            "org.jsoup.parser.HtmlTreeBuilder::generateImpliedEndTags(boolean)",
            "org.jsoup.select.Collector.FirstFinder::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.select.NodeTraversor::traverse(org.jsoup.select.NodeVisitor, org.jsoup.nodes.Node)",
            "org.jsoup.parser.Tokeniser::characterReferenceError(java.lang.String, java.lang.Object[])",
            "org.jsoup.parser.Tokeniser::createTempBuffer()",
            "org.jsoup.nodes.Element::isFormatAsBlock(org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.safety.Cleaner::isValidBodyHtml(java.lang.String)",
            "org.jsoup.nodes.Document.OutputSettings::charset(java.lang.String)",
            "org.jsoup.nodes.Node::nextSibling()",
            "org.jsoup.helper.HttpConnection::connect(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.NodeUtils::outputSettings(org.jsoup.nodes.Node)",
            "org.jsoup.helper.Validate::notNullParam(java.lang.Object, java.lang.String)",
            "org.jsoup.internal.StringUtil::inSorted(java.lang.String, java.lang.String[])",
            "org.jsoup.nodes.LeafNode::doClone(org.jsoup.nodes.Node)",
            "org.jsoup.helper.HttpConnection.Base::hasHeader(java.lang.String)",
            "org.jsoup.nodes.Attribute::<init>(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Range::track(org.jsoup.nodes.Node, boolean)",
            "org.jsoup.select.Evaluator.IndexEquals::<init>(int)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.internal.StringUtil::padding(int, int)",
            "org.jsoup.helper.CookieUtil::requestCookieSet(org.jsoup.Connection.Request)",
            "org.jsoup.parser.HtmlTreeBuilder::initialiseParse(java.io.Reader, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.nodes.DataNode::setWholeData(java.lang.String)",
            "org.jsoup.helper.HttpConnection.Request::proxy(java.net.Proxy)",
            "org.jsoup.parser.HtmlTreeBuilder::inSpecificScope(java.lang.String, java.lang.String[], java.lang.String[])",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.helper.CookieUtil::storeCookies(org.jsoup.helper.HttpConnection.Request, java.net.URL, java.util.Map)",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Elements::is(java.lang.String)",
            "org.jsoup.select.QueryParser::not()",
            "org.jsoup.nodes.Element::appendNormalisedText(java.lang.StringBuilder, org.jsoup.nodes.TextNode)",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.Token.Tag::appendAttributeValue(java.lang.String)",
            "org.jsoup.select.Evaluator.TagEndsWith::toString()",
            "org.jsoup.helper.W3CDom.W3CBuilder::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.helper.HttpConnection::parser(org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Base::hasCookie(java.lang.String)",
            "org.jsoup.nodes.FormElement::addElement(org.jsoup.nodes.Element)",
            "org.jsoup.safety.Cleaner::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.HttpConnection.Response::serialiseRequestUrl(org.jsoup.Connection.Request)",
            "org.jsoup.parser.HtmlTreeBuilder::inScope(java.lang.String)",
            "org.jsoup.helper.HttpConnection.Base::url()",
            "org.jsoup.helper.W3CDom.W3CBuilder::updateNamespaces(org.jsoup.nodes.Element)",
            "org.jsoup.parser.Token.Comment::ensureData()",
            "org.jsoup.select.QueryParser::<init>(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::transition(org.jsoup.parser.HtmlTreeBuilderState)",
            "org.jsoup.nodes.Element::before(org.jsoup.nodes.Node)",
            "org.jsoup.parser.TokenQueue::consume(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::clearStackToTableBodyContext()",
            "org.jsoup.internal.StringUtil::isBlank(java.lang.String)",
            "org.jsoup.nodes.LeafNode::coreValue(java.lang.String)",
            "org.jsoup.nodes.Node::siblingNodes()",
            "org.jsoup.helper.W3CDom::methodMap(java.lang.String)",
            "org.jsoup.select.Evaluator.IsEmpty::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.select.CombiningEvaluator::rightMostEvaluator()",
            "org.jsoup.select.Evaluator.IndexEquals::matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.select.Elements)",
            "org.jsoup.helper.HttpConnection.Request::data(org.jsoup.Connection.KeyVal)",
            "org.jsoup.helper.DataUtil::getCharsetFromContentType(java.lang.String)",
            "org.jsoup.select.Elements::textNodes()",
            "org.jsoup.parser.HtmlTreeBuilder::setFosterInserts(boolean)",
            "org.jsoup.nodes.Document::title()",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.Comment)",
            "org.jsoup.parser.TreeBuilder::currentElement()",
            "org.jsoup.parser.Parser::setTreeBuilder(org.jsoup.parser.TreeBuilder)",
            "org.jsoup.nodes.Document.OutputSettings::encoder()",
            "org.jsoup.internal.ConstrainableInputStream::expired()",
            "org.jsoup.parser.HtmlTreeBuilder::generateImpliedEndTags(java.lang.String)",
            "org.jsoup.nodes.Attribute::hashCode()",
            "org.jsoup.select.CombiningEvaluator::<init>(java.util.Collection)",
            "org.jsoup.select.Evaluator.IsNthLastOfType::calculatePosition(org.jsoup.nodes.Element, org.jsoup.nodes.Element)",
            "org.jsoup.helper.ChangeNotifyingArrayList::add(java.lang.Object)"
        ]
    }
]