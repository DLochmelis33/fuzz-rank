[
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.springframework.retry.support.RetryTemplate::open(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::init(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getStatefulInterceptor(java.lang.Object, java.lang.reflect.Method, org.springframework.retry.annotation.Retryable)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.springframework.retry.support.RetryTemplate::open(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::init(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getStatefulInterceptor(java.lang.Object, java.lang.reflect.Method, org.springframework.retry.annotation.Retryable)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::buildBackOff(long, org.springframework.expression.Expression, long, org.springframework.expression.Expression, double, org.springframework.expression.Expression, boolean, org.springframework.expression.Expression, boolean)",
            "org.springframework.classify.BinaryExceptionClassifier::<init>(java.util.Collection, boolean)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)",
            "org.springframework.retry.support.RetryTemplate::handleRetryExhausted(org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryContext, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getDelegate(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.policy.CircuitBreakerRetryPolicy.CircuitBreakerRetryContext::isOpen()",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getBackoffPolicy(org.springframework.retry.annotation.Backoff, boolean)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::findClosestMatch(java.lang.Object[], java.lang.Class)",
            "org.springframework.classify.SubclassClassifier::classify(java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getRetryPolicy(java.lang.annotation.Annotation, boolean)",
            "org.springframework.retry.backoff.BackOffPolicyBuilder::build()",
            "org.springframework.classify.PatternMatcher::match(java.lang.String, java.lang.String)",
            "org.springframework.retry.support.RetryTemplate::doExecute(org.springframework.retry.RetryCallback, org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getRecoverer(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::resetTimeout(org.springframework.retry.policy.CircuitBreakerRetryPolicy, org.springframework.retry.annotation.CircuitBreaker)",
            "org.springframework.retry.support.RetryTemplate::close(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryContext, org.springframework.retry.RetryState, boolean)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.springframework.retry.support.RetryTemplate::open(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::init(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getStatefulInterceptor(java.lang.Object, java.lang.reflect.Method, org.springframework.retry.annotation.Retryable)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::buildBackOff(long, org.springframework.expression.Expression, long, org.springframework.expression.Expression, double, org.springframework.expression.Expression, boolean, org.springframework.expression.Expression, boolean)",
            "org.springframework.classify.BinaryExceptionClassifier::<init>(java.util.Collection, boolean)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)",
            "org.springframework.retry.support.RetryTemplate::handleRetryExhausted(org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryContext, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getDelegate(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.policy.CircuitBreakerRetryPolicy.CircuitBreakerRetryContext::isOpen()",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getBackoffPolicy(org.springframework.retry.annotation.Backoff, boolean)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::findClosestMatch(java.lang.Object[], java.lang.Class)",
            "org.springframework.classify.SubclassClassifier::classify(java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getRetryPolicy(java.lang.annotation.Annotation, boolean)",
            "org.springframework.retry.backoff.BackOffPolicyBuilder::build()",
            "org.springframework.classify.PatternMatcher::match(java.lang.String, java.lang.String)",
            "org.springframework.retry.support.RetryTemplate::doExecute(org.springframework.retry.RetryCallback, org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getRecoverer(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::resetTimeout(org.springframework.retry.policy.CircuitBreakerRetryPolicy, org.springframework.retry.annotation.CircuitBreaker)",
            "org.springframework.retry.support.RetryTemplate::close(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryContext, org.springframework.retry.RetryState, boolean)",
            "org.springframework.classify.util.SimpleMethodInvoker::extractTarget(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::compareParameters(java.lang.Object[], int, java.lang.Class[])",
            "org.springframework.retry.policy.CompositeRetryPolicy::canRetry(org.springframework.retry.RetryContext)",
            "org.springframework.retry.stats.StatisticsListener::close(org.springframework.retry.RetryContext, org.springframework.retry.RetryCallback, java.lang.Throwable)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::recover(java.lang.Object[], java.lang.Throwable)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerForSingleArgument(java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getStatelessInterceptor(java.lang.Object, java.lang.reflect.Method, org.springframework.retry.annotation.Retryable)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::openTimeout(org.springframework.retry.policy.CircuitBreakerRetryPolicy, org.springframework.retry.annotation.CircuitBreaker)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByName(java.lang.Object, java.lang.String, boolean, java.lang.Class[])",
            "org.springframework.retry.support.RetryTemplate::registerContext(org.springframework.retry.RetryContext, org.springframework.retry.RetryState)",
            "org.springframework.classify.BinaryExceptionClassifier::classify(java.lang.Throwable)",
            "org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.AnnotationMethodResolver::findMethod(java.lang.Class)",
            "org.springframework.retry.interceptor.RetryInterceptorBuilder.CircuitBreakerInterceptorBuilder::build()",
            "org.springframework.classify.util.SimpleMethodInvoker::<init>(java.lang.Object, java.lang.String, java.lang.Class[])",
            "org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor::createKey(org.aopalliance.intercept.MethodInvocation, java.lang.Object)",
            "org.springframework.retry.stats.StatisticsListener::onError(org.springframework.retry.RetryContext, org.springframework.retry.RetryCallback, java.lang.Throwable)",
            "org.springframework.classify.PatternMatcher::match(java.lang.String)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::evaluate(org.springframework.expression.Expression, java.lang.Class, boolean)",
            "org.springframework.retry.interceptor.RetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.interceptor.RetryInterceptorBuilder.StatefulRetryInterceptorBuilder::build()"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.springframework.retry.support.RetryTemplate::open(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::init(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getStatefulInterceptor(java.lang.Object, java.lang.reflect.Method, org.springframework.retry.annotation.Retryable)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::buildBackOff(long, org.springframework.expression.Expression, long, org.springframework.expression.Expression, double, org.springframework.expression.Expression, boolean, org.springframework.expression.Expression, boolean)",
            "org.springframework.classify.BinaryExceptionClassifier::<init>(java.util.Collection, boolean)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)",
            "org.springframework.retry.support.RetryTemplate::handleRetryExhausted(org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryContext, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getDelegate(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.policy.CircuitBreakerRetryPolicy.CircuitBreakerRetryContext::isOpen()",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getBackoffPolicy(org.springframework.retry.annotation.Backoff, boolean)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::findClosestMatch(java.lang.Object[], java.lang.Class)",
            "org.springframework.classify.SubclassClassifier::classify(java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getRetryPolicy(java.lang.annotation.Annotation, boolean)",
            "org.springframework.retry.backoff.BackOffPolicyBuilder::build()",
            "org.springframework.classify.PatternMatcher::match(java.lang.String, java.lang.String)",
            "org.springframework.retry.support.RetryTemplate::doExecute(org.springframework.retry.RetryCallback, org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getRecoverer(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::resetTimeout(org.springframework.retry.policy.CircuitBreakerRetryPolicy, org.springframework.retry.annotation.CircuitBreaker)",
            "org.springframework.retry.support.RetryTemplate::close(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryContext, org.springframework.retry.RetryState, boolean)",
            "org.springframework.classify.util.SimpleMethodInvoker::extractTarget(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::compareParameters(java.lang.Object[], int, java.lang.Class[])",
            "org.springframework.retry.policy.CompositeRetryPolicy::canRetry(org.springframework.retry.RetryContext)",
            "org.springframework.retry.stats.StatisticsListener::close(org.springframework.retry.RetryContext, org.springframework.retry.RetryCallback, java.lang.Throwable)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::recover(java.lang.Object[], java.lang.Throwable)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerForSingleArgument(java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getStatelessInterceptor(java.lang.Object, java.lang.reflect.Method, org.springframework.retry.annotation.Retryable)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::openTimeout(org.springframework.retry.policy.CircuitBreakerRetryPolicy, org.springframework.retry.annotation.CircuitBreaker)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByName(java.lang.Object, java.lang.String, boolean, java.lang.Class[])",
            "org.springframework.retry.support.RetryTemplate::registerContext(org.springframework.retry.RetryContext, org.springframework.retry.RetryState)",
            "org.springframework.classify.BinaryExceptionClassifier::classify(java.lang.Throwable)",
            "org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.AnnotationMethodResolver::findMethod(java.lang.Class)",
            "org.springframework.retry.interceptor.RetryInterceptorBuilder.CircuitBreakerInterceptorBuilder::build()",
            "org.springframework.classify.util.SimpleMethodInvoker::<init>(java.lang.Object, java.lang.String, java.lang.Class[])",
            "org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor::createKey(org.aopalliance.intercept.MethodInvocation, java.lang.Object)",
            "org.springframework.retry.stats.StatisticsListener::onError(org.springframework.retry.RetryContext, org.springframework.retry.RetryCallback, java.lang.Throwable)",
            "org.springframework.classify.PatternMatcher::match(java.lang.String)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::evaluate(org.springframework.expression.Expression, java.lang.Class, boolean)",
            "org.springframework.retry.interceptor.RetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.interceptor.RetryInterceptorBuilder.StatefulRetryInterceptorBuilder::build()",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerForInterface(java.lang.Class, java.lang.String, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.annotation.RetryConfiguration.AnnotationMethodsResolver::hasAnnotatedMethods(java.lang.Class)",
            "org.springframework.retry.annotation.RetryConfiguration::findBeans(java.lang.Class)",
            "org.springframework.retry.support.RetryTemplate::doOpenInternal(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryState)",
            "org.springframework.classify.util.MethodInvokerUtils::getParamTypesString(java.lang.Class[])",
            "org.springframework.retry.support.RetryTemplateBuilder::uniformRandomBackoff(long, long)",
            "org.springframework.retry.support.RetryTemplateBuilder::exponentialBackoff(long, double, long, boolean)",
            "org.springframework.retry.policy.SimpleRetryPolicy::canRetry(org.springframework.retry.RetryContext)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::parse(java.lang.String)",
            "org.springframework.retry.annotation.RetryConfiguration.AnnotationClassOrMethodPointcut::equals(java.lang.Object)",
            "org.springframework.retry.policy.ExceptionClassifierRetryPolicy.ExceptionClassifierRetryContext::registerThrowable(org.springframework.retry.RetryContext, java.lang.Throwable)",
            "org.springframework.retry.policy.ExpressionRetryPolicy::getExpression(java.lang.String)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler.SimpleMetadata::getArgs(java.lang.Throwable, java.lang.Object[])",
            "org.springframework.retry.annotation.RetryConfiguration::findBean(java.lang.Class)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::putToMethodsMap(java.lang.reflect.Method, java.util.Map)",
            "org.springframework.retry.interceptor.RetryInterceptorBuilder.StatelessRetryInterceptorBuilder::build()",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::optionallyFilterMethodsBy(java.lang.Class)",
            "org.springframework.classify.util.AnnotationMethodResolver::<init>(java.lang.Class)",
            "org.springframework.retry.policy.CircuitBreakerRetryPolicy.CircuitBreakerRetryContext::<init>(org.springframework.retry.RetryContext, org.springframework.retry.RetryPolicy, long, long)",
            "org.springframework.retry.policy.ExpressionRetryPolicy::<init>(int, java.util.Map, boolean, java.lang.String, boolean)",
            "org.springframework.retry.support.RetryTemplate::wrapIfNecessary(java.lang.Throwable)",
            "org.springframework.retry.support.RetryTemplate::registerThrowable(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryState, org.springframework.retry.RetryContext, java.lang.Throwable)",
            "org.springframework.retry.annotation.RetryConfiguration::afterPropertiesSet()",
            "org.springframework.retry.interceptor.RetryInterceptorBuilder::backOffOptions(long, double, long)",
            "org.springframework.retry.policy.SoftReferenceMapRetryContextCache::containsKey(java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::createTemplate(java.lang.String[])",
            "org.springframework.retry.annotation.RetryConfiguration::buildPointcut(java.util.Set)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::findAnnotationOnTarget(java.lang.Object, java.lang.reflect.Method, java.lang.Class)",
            "org.springframework.retry.annotation.RetryConfiguration::buildAdvice()",
            "org.springframework.retry.support.RetryTemplateBuilder::build()",
            "org.springframework.classify.util.SimpleMethodInvoker::<init>(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.listener.MethodInvocationRetryListenerSupport::open(org.springframework.retry.RetryContext, org.springframework.retry.RetryCallback)",
            "org.springframework.retry.support.RetryTemplateBuilder::exponentialBackoff(long, double, long)",
            "org.springframework.retry.support.RetryTemplate::registerListener(org.springframework.retry.RetryListener, int)",
            "org.springframework.classify.util.SimpleMethodInvoker::equals(java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::classLevelAnnotation(java.lang.reflect.Method, java.lang.Class)",
            "org.springframework.retry.backoff.ExponentialBackOffPolicy::backOff(org.springframework.retry.backoff.BackOffContext)",
            "org.springframework.retry.policy.CompositeRetryPolicy::close(org.springframework.retry.RetryContext)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.backoff.ExponentialBackOffPolicy.ExponentialBackOffContext::<init>(long, double, long, java.util.function.Supplier, java.util.function.Supplier, java.util.function.Supplier)",
            "org.springframework.retry.backoff.ExponentialRandomBackOffPolicy.ExponentialRandomBackOffContext::<init>(long, double, long, java.util.function.Supplier, java.util.function.Supplier, java.util.function.Supplier)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.springframework.retry.support.RetryTemplate::open(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::init(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getStatefulInterceptor(java.lang.Object, java.lang.reflect.Method, org.springframework.retry.annotation.Retryable)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.springframework.retry.support.RetryTemplate::open(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::init(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getStatefulInterceptor(java.lang.Object, java.lang.reflect.Method, org.springframework.retry.annotation.Retryable)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.classify.BinaryExceptionClassifier::<init>(java.util.Collection, boolean)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)",
            "org.springframework.retry.support.RetryTemplate::handleRetryExhausted(org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryContext, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getDelegate(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.policy.CircuitBreakerRetryPolicy.CircuitBreakerRetryContext::isOpen()",
            "org.springframework.classify.PatternMatcher::match(java.lang.String, java.lang.String)",
            "org.springframework.retry.support.RetryTemplate::doExecute(org.springframework.retry.RetryCallback, org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryState)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.springframework.retry.support.RetryTemplate::open(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::init(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getStatefulInterceptor(java.lang.Object, java.lang.reflect.Method, org.springframework.retry.annotation.Retryable)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.classify.BinaryExceptionClassifier::<init>(java.util.Collection, boolean)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)",
            "org.springframework.retry.support.RetryTemplate::handleRetryExhausted(org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryContext, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getDelegate(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.policy.CircuitBreakerRetryPolicy.CircuitBreakerRetryContext::isOpen()",
            "org.springframework.classify.PatternMatcher::match(java.lang.String, java.lang.String)",
            "org.springframework.retry.support.RetryTemplate::doExecute(org.springframework.retry.RetryCallback, org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryState)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerForSingleArgument(java.lang.Object)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByName(java.lang.Object, java.lang.String, boolean, java.lang.Class[])",
            "org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.AnnotationMethodResolver::findMethod(java.lang.Class)",
            "org.springframework.classify.util.SimpleMethodInvoker::<init>(java.lang.Object, java.lang.String, java.lang.Class[])",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::evaluate(org.springframework.expression.Expression, java.lang.Class, boolean)",
            "org.springframework.retry.interceptor.RetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.springframework.retry.support.RetryTemplate::open(org.springframework.retry.RetryPolicy, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::init(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getStatefulInterceptor(java.lang.Object, java.lang.reflect.Method, org.springframework.retry.annotation.Retryable)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.classify.BinaryExceptionClassifier::<init>(java.util.Collection, boolean)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::isParameterizedTypeAssignable(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)",
            "org.springframework.retry.support.RetryTemplate::handleRetryExhausted(org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryContext, org.springframework.retry.RetryState)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::getDelegate(java.lang.Object, java.lang.reflect.Method)",
            "org.springframework.retry.policy.CircuitBreakerRetryPolicy.CircuitBreakerRetryContext::isOpen()",
            "org.springframework.classify.PatternMatcher::match(java.lang.String, java.lang.String)",
            "org.springframework.retry.support.RetryTemplate::doExecute(org.springframework.retry.RetryCallback, org.springframework.retry.RecoveryCallback, org.springframework.retry.RetryState)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerForSingleArgument(java.lang.Object)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByName(java.lang.Object, java.lang.String, boolean, java.lang.Class[])",
            "org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.AnnotationMethodResolver::findMethod(java.lang.Class)",
            "org.springframework.classify.util.SimpleMethodInvoker::<init>(java.lang.Object, java.lang.String, java.lang.Class[])",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::evaluate(org.springframework.expression.Expression, java.lang.Class, boolean)",
            "org.springframework.retry.interceptor.RetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerForInterface(java.lang.Class, java.lang.String, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.annotation.RetryConfiguration.AnnotationMethodsResolver::hasAnnotatedMethods(java.lang.Class)",
            "org.springframework.retry.annotation.RetryConfiguration::findBeans(java.lang.Class)",
            "org.springframework.retry.support.RetryTemplateBuilder::uniformRandomBackoff(long, long)",
            "org.springframework.retry.support.RetryTemplateBuilder::exponentialBackoff(long, double, long, boolean)",
            "org.springframework.retry.annotation.RetryConfiguration.AnnotationClassOrMethodPointcut::equals(java.lang.Object)",
            "org.springframework.retry.annotation.RetryConfiguration::findBean(java.lang.Class)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::putToMethodsMap(java.lang.reflect.Method, java.util.Map)",
            "org.springframework.classify.util.AnnotationMethodResolver::<init>(java.lang.Class)",
            "org.springframework.retry.annotation.RetryConfiguration::afterPropertiesSet()",
            "org.springframework.retry.interceptor.RetryInterceptorBuilder::backOffOptions(long, double, long)",
            "org.springframework.retry.support.RetryTemplateBuilder::build()",
            "org.springframework.retry.support.RetryTemplateBuilder::exponentialBackoff(long, double, long)",
            "org.springframework.retry.support.RetryTemplate::registerListener(org.springframework.retry.RetryListener, int)",
            "org.springframework.classify.util.SimpleMethodInvoker::equals(java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.support.RetryTemplate::execute(org.springframework.retry.RetryCallback, org.springframework.retry.RetryState)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.support.RetryTemplate::execute(org.springframework.retry.RetryCallback, org.springframework.retry.RetryState)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.classify.BinaryExceptionClassifier::<init>(java.util.Collection)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::lambda.init.0(java.lang.Object, java.lang.reflect.Method, java.util.Map, java.lang.reflect.Method)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.classify.util.SimpleMethodInvoker::<init>(java.lang.Object, java.lang.String, java.lang.Class[])",
            "org.springframework.retry.interceptor.RetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.BinaryExceptionClassifier::<init>(java.util.Collection)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::lambda.init.0(java.lang.Object, java.lang.reflect.Method, java.util.Map, java.lang.reflect.Method)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerForInterface(java.lang.Class, java.lang.String, java.lang.Object, java.lang.Class[])",
            "org.springframework.classify.util.AnnotationMethodResolver::findMethod(java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::lambda.getRetryPolicy.5(org.springframework.expression.Expression, boolean)",
            "org.springframework.classify.BackToBackPatternClassifier::setRouterDelegate(java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerForInterface(java.lang.Class, java.lang.String, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.annotation.RetryConfiguration::afterPropertiesSet()",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.support.RetryTemplateBuilder::exponentialBackoff(long, double, long)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::lambda.init.0(java.lang.Object, java.lang.reflect.Method, java.util.Map, java.lang.reflect.Method)",
            "org.springframework.retry.support.RetryTemplate::defaultInstance()",
            "org.springframework.classify.util.SimpleMethodInvoker::<init>(java.lang.Object, java.lang.String, java.lang.Class[])",
            "org.springframework.retry.interceptor.RetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.support.RetryTemplateBuilder::uniformRandomBackoff(long, long)",
            "org.springframework.retry.annotation.RetryConfiguration.AnnotationClassOrMethodPointcut::equals(java.lang.Object)",
            "org.springframework.classify.util.AnnotationMethodResolver::<init>(java.lang.Class)",
            "org.springframework.classify.util.SimpleMethodInvoker::equals(java.lang.Object)",
            "org.springframework.classify.util.AnnotationMethodResolver::findMethod(java.lang.Object)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::lambda.buildBackOff.6(org.springframework.expression.Expression, boolean)",
            "org.springframework.retry.annotation.RetryConfiguration.AnnotationClassOrMethodFilter::matches(java.lang.Class)",
            "org.springframework.retry.annotation.RetryConfiguration::afterSingletonsInstantiated()",
            "org.springframework.retry.support.RetryTemplate::registerListener(org.springframework.retry.RetryListener)",
            "org.springframework.retry.interceptor.RetryInterceptorBuilder.StatefulRetryInterceptorBuilder::backOffOptions(long, double, long)",
            "org.springframework.classify.BackToBackPatternClassifier::setRouterDelegate(java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.support.RetryTemplate::execute(org.springframework.retry.RetryCallback, org.springframework.retry.RetryState)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.support.RetryTemplate::execute(org.springframework.retry.RetryCallback, org.springframework.retry.RetryState)",
            "org.springframework.classify.BinaryExceptionClassifier::<init>(java.util.Collection)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::lambda.init.0(java.lang.Object, java.lang.reflect.Method, java.util.Map, java.lang.reflect.Method)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.classify.util.AnnotationMethodResolver::findMethod(java.lang.Object)",
            "org.springframework.classify.util.SimpleMethodInvoker::<init>(java.lang.Object, java.lang.String, java.lang.Class[])",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::lambda.buildBackOff.9(org.springframework.expression.Expression, boolean)",
            "org.springframework.classify.BackToBackPatternClassifier::setRouterDelegate(java.lang.Object)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerForInterface(java.lang.Class, java.lang.String, java.lang.Object, java.lang.Class[])",
            "org.springframework.classify.BinaryExceptionClassifier::<init>(java.util.Collection)",
            "org.springframework.retry.interceptor.RetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::lambda.init.0(java.lang.Object, java.lang.reflect.Method, java.util.Map, java.lang.reflect.Method)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.springframework.retry.interceptor.StatefulRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerForInterface(java.lang.Class, java.lang.String, java.lang.Object, java.lang.Class[])",
            "org.springframework.retry.annotation.RetryConfiguration.AnnotationClassOrMethodPointcut::equals(java.lang.Object)",
            "org.springframework.retry.annotation.RetryConfiguration::afterPropertiesSet()",
            "org.springframework.classify.util.MethodInvokerUtils::getMethodInvokerByAnnotation(java.lang.Class, java.lang.Object, java.lang.Class[])",
            "org.springframework.classify.util.SimpleMethodInvoker::equals(java.lang.Object)",
            "org.springframework.retry.support.RetryTemplateBuilder::exponentialBackoff(long, double, long)",
            "org.springframework.retry.annotation.RecoverAnnotationRecoveryHandler::lambda.init.0(java.lang.Object, java.lang.reflect.Method, java.util.Map, java.lang.reflect.Method)",
            "org.springframework.retry.annotation.RetryConfiguration.AnnotationClassOrMethodFilter::matches(java.lang.Class)",
            "org.springframework.classify.BackToBackPatternClassifier::setRouterDelegate(java.lang.Object)",
            "org.springframework.classify.util.AnnotationMethodResolver::<init>(java.lang.Class)",
            "org.springframework.classify.util.AnnotationMethodResolver::findMethod(java.lang.Object)",
            "org.springframework.retry.support.RetryTemplate::registerListener(org.springframework.retry.RetryListener)",
            "org.springframework.classify.util.SimpleMethodInvoker::<init>(java.lang.Object, java.lang.String, java.lang.Class[])",
            "org.springframework.retry.annotation.RetryConfiguration::afterSingletonsInstantiated()",
            "org.springframework.retry.interceptor.RetryOperationsInterceptor::invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.retry.support.RetryTemplateBuilder::uniformRandomBackoff(long, long)",
            "org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor::lambda.resetTimeout.2(org.springframework.expression.Expression)",
            "org.springframework.retry.support.RetryTemplate::defaultInstance()",
            "org.springframework.retry.interceptor.RetryInterceptorBuilder.StatefulRetryInterceptorBuilder::backOffOptions(long, double, long)"
        ]
    }
]