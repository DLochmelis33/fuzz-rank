[
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Board::squareAttackedByPieceType(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.PieceType)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.move.MoveList::encode(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move, java.util.function.Function)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()",
            "com.github.bhlangonijr.chesslib.Board::isMoveLegal(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.Board::loadFromFen(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::getFen(boolean, boolean)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Board::squareAttackedByPieceType(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.PieceType)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.move.MoveList::encode(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move, java.util.function.Function)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()",
            "com.github.bhlangonijr.chesslib.Board::isMoveLegal(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.Board::loadFromFen(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::getFen(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::decodeSan(com.github.bhlangonijr.chesslib.Board, java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromSan(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.Game::toPgn(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.Board::doMove(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.game.Game::loadMoveText(java.lang.StringBuilder)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::addProperty(java.lang.String, com.github.bhlangonijr.chesslib.pgn.GameLoader.PgnTempContainer)",
            "com.github.bhlangonijr.chesslib.game.GameContext::loadDefaults()",
            "com.github.bhlangonijr.chesslib.Board::undoMovePiece(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.Move::<init>(java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen(int, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::addPromotions(java.util.List, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::findLegalSquares(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, long)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getRookCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.MoveBackup::restore(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.Board::movePiece(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, com.github.bhlangonijr.chesslib.MoveBackup)",
            "com.github.bhlangonijr.chesslib.game.GameContext::hasCastleRight(com.github.bhlangonijr.chesslib.move.Move, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Board::squareAttackedByPieceType(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.PieceType)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.move.MoveList::encode(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move, java.util.function.Function)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()",
            "com.github.bhlangonijr.chesslib.Board::isMoveLegal(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.Board::loadFromFen(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::getFen(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::decodeSan(com.github.bhlangonijr.chesslib.Board, java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromSan(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.Game::toPgn(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.Board::doMove(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.game.Game::loadMoveText(java.lang.StringBuilder)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::addProperty(java.lang.String, com.github.bhlangonijr.chesslib.pgn.GameLoader.PgnTempContainer)",
            "com.github.bhlangonijr.chesslib.game.GameContext::loadDefaults()",
            "com.github.bhlangonijr.chesslib.Board::undoMovePiece(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.Move::<init>(java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen(int, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::addPromotions(java.util.List, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::findLegalSquares(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, long)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getRookCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.MoveBackup::restore(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.Board::movePiece(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, com.github.bhlangonijr.chesslib.MoveBackup)",
            "com.github.bhlangonijr.chesslib.game.GameContext::hasCastleRight(com.github.bhlangonijr.chesslib.move.Move, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generatePseudoLegalCaptures(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::parseTM(java.lang.String, com.github.bhlangonijr.chesslib.game.TimeControl)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::parseTC(java.lang.String, com.github.bhlangonijr.chesslib.game.TimeControl)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::addGame(com.github.bhlangonijr.chesslib.game.Game)",
            "com.github.bhlangonijr.chesslib.Board::isRepetition(int)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::parseFromString(java.lang.String)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::normalize(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.Game::gotoMove(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Board::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generatePseudoLegalMoves(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::setMoveText(com.github.bhlangonijr.chesslib.game.Game, java.lang.StringBuilder)",
            "com.github.bhlangonijr.chesslib.Board::verifyKingIsNotAttackedWithoutPin(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::parseMT(java.lang.String, com.github.bhlangonijr.chesslib.game.TimeControl)",
            "com.github.bhlangonijr.chesslib.game.Game::getMovesAt(java.lang.String, int)",
            "com.github.bhlangonijr.chesslib.Bitboard::bitboardToString(long)",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::toString()",
            "com.github.bhlangonijr.chesslib.Board::getZobristKey()",
            "com.github.bhlangonijr.chesslib.move.MoveList::normalizeSan(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::doNullMove()",
            "com.github.bhlangonijr.chesslib.Bitboard::getSliderAttacks(long, long, int)",
            "com.github.bhlangonijr.chesslib.Board::toStringFromViewPoint(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnCaptures(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.unicode.UnicodePrinter::print(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::loadPgn(com.github.bhlangonijr.chesslib.util.LargeFile)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::toPGNString()",
            "com.github.bhlangonijr.chesslib.Board::clear()",
            "com.github.bhlangonijr.chesslib.game.GameContext::<init>(com.github.bhlangonijr.chesslib.game.GameMode, com.github.bhlangonijr.chesslib.game.VariationType)",
            "com.github.bhlangonijr.chesslib.Board::findEnPassantTarget(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Board::findEnPassant(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Board::isPromoRank(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, char[])",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, java.util.Map)",
            "com.github.bhlangonijr.chesslib.move.Move::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generatePawnCaptures(com.github.bhlangonijr.chesslib.Board, java.util.List)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()",
            "com.github.bhlangonijr.chesslib.game.Game::toPgn(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.game.GameContext::loadDefaults()",
            "com.github.bhlangonijr.chesslib.Board::undoMovePiece(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.Move::<init>(java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen(int, boolean)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.MoveBackup::restore(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side, long)",
            "com.github.bhlangonijr.chesslib.Board::verifyAllPins(long, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String, boolean, boolean)",
            "com.github.bhlangonijr.chesslib.move.MoveList::createMoveListFrom(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Bitboard::getPawnMoves(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.Board::isInsufficientMaterial()",
            "com.github.bhlangonijr.chesslib.game.Game::toPgn(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.game.GameContext::loadDefaults()",
            "com.github.bhlangonijr.chesslib.Board::undoMovePiece(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.Move::<init>(java.lang.String, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen(int, boolean)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.MoveBackup::restore(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generatePseudoLegalCaptures(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::addGame(com.github.bhlangonijr.chesslib.game.Game)",
            "com.github.bhlangonijr.chesslib.Board::isRepetition(int)",
            "com.github.bhlangonijr.chesslib.game.Game::gotoMove(com.github.bhlangonijr.chesslib.move.MoveList, int)",
            "com.github.bhlangonijr.chesslib.Board::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Bitboard::bitboardToString(long)",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::toString()",
            "com.github.bhlangonijr.chesslib.Board::doNullMove()",
            "com.github.bhlangonijr.chesslib.Board::toStringFromViewPoint(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.unicode.UnicodePrinter::print(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::loadPgn(com.github.bhlangonijr.chesslib.util.LargeFile)",
            "com.github.bhlangonijr.chesslib.game.GameContext::<init>(com.github.bhlangonijr.chesslib.game.GameMode, com.github.bhlangonijr.chesslib.game.VariationType)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, char[])",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, java.util.Map)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::doMove(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.lang.Iterable)",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.Board::isDraw()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.lang.Iterable)",
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.Board::undoMove()",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::<init>()",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::loadPgn()",
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.Board::undoMove()",
            "com.github.bhlangonijr.chesslib.Board::<init>()",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.Bitboard::bitboardToString(long)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::toString()",
            "com.github.bhlangonijr.chesslib.Board::doNullMove()",
            "com.github.bhlangonijr.chesslib.unicode.UnicodePrinter::print(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, char[])",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, java.util.Map)",
            "com.github.bhlangonijr.chesslib.Board::pseudoLegalCaptures()",
            "com.github.bhlangonijr.chesslib.Board::strictEquals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::toStringFromBlackViewPoint()",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen()",
            "com.github.bhlangonijr.chesslib.game.Game::gotoPrior()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::doMove(com.github.bhlangonijr.chesslib.move.Move)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.lang.Iterable)",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.game.Game::loadMoveText()",
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.lang.Iterable)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen()",
            "com.github.bhlangonijr.chesslib.Board::undoMove()",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.Board::<init>()",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::loadPgn()",
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.Bitboard::bitboardToString(long)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, char[])",
            "com.github.bhlangonijr.chesslib.move.MoveList::equals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::translate(java.lang.StringBuilder, java.util.Map)",
            "com.github.bhlangonijr.chesslib.move.MoveList::loadFromText(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.Board::<init>()",
            "com.github.bhlangonijr.chesslib.Board::toStringFromBlackViewPoint()",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen()",
            "com.github.bhlangonijr.chesslib.game.Game::gotoFirst()",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::savePgn()",
            "com.github.bhlangonijr.chesslib.Board::undoMove()",
            "com.github.bhlangonijr.chesslib.Board::pseudoLegalCaptures()",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::toString()",
            "com.github.bhlangonijr.chesslib.Board::doNullMove()",
            "com.github.bhlangonijr.chesslib.Board::strictEquals(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.unicode.UnicodePrinter::print(com.github.bhlangonijr.chesslib.Board)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.Board::verifyKingIsNotAttackedWithoutPin(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.MoveBackup::setCastleMove(boolean)",
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.lang.Iterable)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.game.GameContext::setBlackooo(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::setFileName(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Board::getPiece(com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.Board::addEventListener(com.github.bhlangonijr.chesslib.BoardEventType, com.github.bhlangonijr.chesslib.BoardEventListener)",
            "com.github.bhlangonijr.chesslib.MoveBackup::setIncrementalHashKey(long)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::setDepth(int)",
            "com.github.bhlangonijr.chesslib.Board::getPieceLocation(com.github.bhlangonijr.chesslib.Piece)",
            "com.github.bhlangonijr.chesslib.Board::isAttackedBy(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.unicode.UnicodePrinter::<init>(java.io.PrintStream)",
            "com.github.bhlangonijr.chesslib.Board::isMoveLegal(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.Board::setIncrementalHashKey(long)",
            "com.github.bhlangonijr.chesslib.move.MoveList::findLegalSquares(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, long)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getKingCastleMove(com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.CastleRight)",
            "com.github.bhlangonijr.chesslib.pgn.PgnException::<init>(java.lang.String, java.lang.Throwable)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::addMoveText(java.lang.String, com.github.bhlangonijr.chesslib.pgn.GameLoader.PgnTempContainer)",
            "com.github.bhlangonijr.chesslib.Board::toStringFromWhiteViewPoint()",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateKnightMoves(com.github.bhlangonijr.chesslib.Board, java.util.List, long)",
            "com.github.bhlangonijr.chesslib.Board::movePiece(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, com.github.bhlangonijr.chesslib.MoveBackup)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.move.MoveList::toStringWithoutMoveNumbers(java.lang.String[])",
            "com.github.bhlangonijr.chesslib.game.Event::setStartDate(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.GameContext::setBlackooSquares(java.util.List)",
            "com.github.bhlangonijr.chesslib.game.Game::translateVariation(java.lang.StringBuilder, com.github.bhlangonijr.chesslib.move.MoveList, int, int, int, int, int)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generatePseudoLegalMoves(com.github.bhlangonijr.chesslib.Board)",
            "com.github.bhlangonijr.chesslib.game.Round::<init>(com.github.bhlangonijr.chesslib.game.Event)",
            "com.github.bhlangonijr.chesslib.Board::getEnPassantKey(com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getooAllSquaresBb(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Board::isDraw()",
            "com.github.bhlangonijr.chesslib.game.GameContext::setWhiteooSquaresBb(long)",
            "com.github.bhlangonijr.chesslib.move.MoveList::encode(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move, java.util.function.Function)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::addPromotions(java.util.List, com.github.bhlangonijr.chesslib.Side, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getoooAllSquaresBb(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveGeneratorException::<init>(java.lang.Throwable)",
            "com.github.bhlangonijr.chesslib.game.GameContext::setWhiteRookoo(com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::loadPgn(com.github.bhlangonijr.chesslib.util.LargeFile)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generatePawnCaptures(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.game.Game::loadMoveText(java.lang.StringBuilder)",
            "com.github.bhlangonijr.chesslib.Board::<init>(com.github.bhlangonijr.chesslib.game.GameContext, boolean)",
            "com.github.bhlangonijr.chesslib.game.GameContext::setEvent(com.github.bhlangonijr.chesslib.game.Event)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::parseTM(java.lang.String, com.github.bhlangonijr.chesslib.game.TimeControl)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateRookMoves(com.github.bhlangonijr.chesslib.Board, java.util.List, long)",
            "com.github.bhlangonijr.chesslib.game.Game::setPlyCount(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Bitboard::sq2Bb(com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.game.GameFactory::newRound(com.github.bhlangonijr.chesslib.game.Event, int)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getooSquares(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.game.Game::setWhitePlayer(com.github.bhlangonijr.chesslib.game.Player)",
            "com.github.bhlangonijr.chesslib.MoveBackup::setEnPassant(com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.Board::clone()",
            "com.github.bhlangonijr.chesslib.move.MoveList::toFan()",
            "com.github.bhlangonijr.chesslib.MoveBackup::makeBackup(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::setIncrement(long)",
            "com.github.bhlangonijr.chesslib.Board::squareAttackedBy(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.MoveList::toFanWithMoveNumbers()",
            "com.github.bhlangonijr.chesslib.util.LargeFile::<init>(java.lang.String)",
            "com.github.bhlangonijr.chesslib.Bitboard::bitsBetween(long, int, int)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.github.bhlangonijr.chesslib.util.StringUtil::afterSequence(java.lang.String, java.lang.String, int)",
            "com.github.bhlangonijr.chesslib.move.MoveList::add(int, com.github.bhlangonijr.chesslib.move.Move)",
            "com.github.bhlangonijr.chesslib.Board::isSquareAttackedBy(java.util.List, com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.move.Move::setSan(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::setNodes(long)",
            "com.github.bhlangonijr.chesslib.game.Game::setWhitePlayer(com.github.bhlangonijr.chesslib.game.Player)",
            "com.github.bhlangonijr.chesslib.game.GenericPlayer::setDescription(java.lang.String)",
            "com.github.bhlangonijr.chesslib.move.MoveList::getFen(int, boolean)",
            "com.github.bhlangonijr.chesslib.Board::clone()",
            "com.github.bhlangonijr.chesslib.game.Game::setFen(java.lang.String)",
            "com.github.bhlangonijr.chesslib.move.MoveList::findLegalSquares(com.github.bhlangonijr.chesslib.Board, com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Piece, long)",
            "com.github.bhlangonijr.chesslib.game.Game::toString()",
            "com.github.bhlangonijr.chesslib.game.GameContext::setBlackooSquares(java.util.List)",
            "com.github.bhlangonijr.chesslib.Bitboard::sq2H1(com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addSanMove(java.lang.String)",
            "com.github.bhlangonijr.chesslib.move.MoveException::<init>(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.GameContext::squareListToBb(java.util.List)",
            "com.github.bhlangonijr.chesslib.move.MoveList::addAll(int, java.util.Collection)",
            "com.github.bhlangonijr.chesslib.Board::getBitboard(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Board::zeroToSeven()",
            "com.github.bhlangonijr.chesslib.Board::getSideKey(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.GameContext::setBlackoooAllSquaresBb(long)",
            "com.github.bhlangonijr.chesslib.Bitboard::sq2Bb(com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.pgn.PgnHolder::toString()",
            "com.github.bhlangonijr.chesslib.Board::pseudoLegalCaptures()",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::loadNextGame(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.Board::pseudoLegalMoves()",
            "com.github.bhlangonijr.chesslib.game.Game::isStartOfMoveList()",
            "com.github.bhlangonijr.chesslib.game.GameContext::getoooAllSquaresBb(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.util.LargeFile.FileIterator::hasNext()",
            "com.github.bhlangonijr.chesslib.game.Game::<init>(java.lang.String, com.github.bhlangonijr.chesslib.game.Round)",
            "com.github.bhlangonijr.chesslib.Board::removePieces(com.github.bhlangonijr.chesslib.Square, com.github.bhlangonijr.chesslib.Square, long)",
            "com.github.bhlangonijr.chesslib.Board::doMove(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::setHalfMoves(int)",
            "com.github.bhlangonijr.chesslib.Board::removeEventListener(com.github.bhlangonijr.chesslib.BoardEventType, com.github.bhlangonijr.chesslib.BoardEventListener)",
            "com.github.bhlangonijr.chesslib.game.Game::makeProp(java.lang.String, java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.Game::toPgn(boolean, boolean)",
            "com.github.bhlangonijr.chesslib.game.Game::setOpening(java.lang.String)",
            "com.github.bhlangonijr.chesslib.move.MoveList::updateSanArray()",
            "com.github.bhlangonijr.chesslib.Board::setSideToMove(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Board::getPieceSquareKey(com.github.bhlangonijr.chesslib.Piece, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.move.MoveList::setParent(int)",
            "com.github.bhlangonijr.chesslib.Board::getFistPieceLocation(com.github.bhlangonijr.chesslib.Piece)",
            "com.github.bhlangonijr.chesslib.Bitboard::getBbtable(com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.util.LargeFile::<init>(java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getooo(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Board::isMoveLegal(com.github.bhlangonijr.chesslib.move.Move, boolean)",
            "com.github.bhlangonijr.chesslib.MoveBackup::setEnPassantTarget(com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.Board::doNullMove()",
            "com.github.bhlangonijr.chesslib.game.GameContext::setGameMode(com.github.bhlangonijr.chesslib.game.GameMode)",
            "com.github.bhlangonijr.chesslib.game.GameContext::setVariationType(com.github.bhlangonijr.chesslib.game.VariationType)",
            "com.github.bhlangonijr.chesslib.Board::isKingAttacked()",
            "com.github.bhlangonijr.chesslib.game.Event::setTimeControl(com.github.bhlangonijr.chesslib.game.TimeControl)",
            "com.github.bhlangonijr.chesslib.move.MoveGenerator::generateCastleMoves(com.github.bhlangonijr.chesslib.Board, java.util.List)",
            "com.github.bhlangonijr.chesslib.move.MoveList::remove(java.lang.Object)",
            "com.github.bhlangonijr.chesslib.Board::toStringFromWhiteViewPoint()",
            "com.github.bhlangonijr.chesslib.game.GameContext::setBlackoooSquaresBb(long)",
            "com.github.bhlangonijr.chesslib.pgn.GameLoader::setMoveText(com.github.bhlangonijr.chesslib.game.Game, java.lang.StringBuilder)",
            "com.github.bhlangonijr.chesslib.Board::getZobristKey()",
            "com.github.bhlangonijr.chesslib.Board::getKingSquare(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.Board::setPiece(com.github.bhlangonijr.chesslib.Piece, com.github.bhlangonijr.chesslib.Square)",
            "com.github.bhlangonijr.chesslib.game.GenericPlayer::<init>(java.lang.String, java.lang.String)",
            "com.github.bhlangonijr.chesslib.game.TimeControl::parseTC(java.lang.String, com.github.bhlangonijr.chesslib.game.TimeControl)",
            "com.github.bhlangonijr.chesslib.Board::setMoveCounter(java.lang.Integer)",
            "com.github.bhlangonijr.chesslib.game.Game::setHalfMoves(com.github.bhlangonijr.chesslib.move.MoveList)",
            "com.github.bhlangonijr.chesslib.pgn.PgnIterator::<init>(java.util.Iterator)",
            "com.github.bhlangonijr.chesslib.util.StringUtil::lastSequence(java.lang.String, int)",
            "com.github.bhlangonijr.chesslib.util.XorShiftRandom::<init>(long)",
            "com.github.bhlangonijr.chesslib.game.GameContext::getoooSquaresBb(com.github.bhlangonijr.chesslib.Side)",
            "com.github.bhlangonijr.chesslib.game.Game::setTime(java.lang.String)"
        ]
    }
]