[
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(org.assertj.vavr.api.AbstractVavrAssert)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(org.assertj.vavr.api.AbstractVavrAssert)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractOptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.AbstractTryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(java.lang.Class, java.lang.Class[], java.lang.Object[])",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractSeqAssert::isSorted()",
            "org.assertj.vavr.api.AbstractSeqAssert::assertIsSortedAccordingToComparator(java.util.Comparator)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(org.assertj.vavr.api.AbstractVavrAssert)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractOptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.AbstractTryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(java.lang.Class, java.lang.Class[], java.lang.Object[])",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractSeqAssert::isSorted()",
            "org.assertj.vavr.api.AbstractSeqAssert::assertIsSortedAccordingToComparator(java.util.Comparator)",
            "org.assertj.vavr.api.VavrAssumptions::assumptionNotMet(java.lang.AssertionError)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.ClassLoadingStrategyFactory::classLoadingStrategy(java.lang.Class)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractOptionAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.AbstractSeqAssert::doesNotContain(java.lang.Object, org.assertj.core.data.Index)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(org.assertj.vavr.api.AbstractVavrAssert)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractOptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.AbstractTryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(java.lang.Class, java.lang.Class[], java.lang.Object[])",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractSeqAssert::isSorted()",
            "org.assertj.vavr.api.AbstractSeqAssert::assertIsSortedAccordingToComparator(java.util.Comparator)",
            "org.assertj.vavr.api.VavrAssumptions::assumptionNotMet(java.lang.AssertionError)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.ClassLoadingStrategyFactory::classLoadingStrategy(java.lang.Class)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractOptionAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.AbstractSeqAssert::doesNotContain(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractValidationAssert::containsInvalid(java.lang.Object)",
            "org.assertj.vavr.api.AbstractTryAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.EitherShouldContainInstanceOf::shouldContainOnRightInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.EitherShouldContainInstanceOf::shouldContainOnLeftInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.OptionShouldContainInstanceOf::shouldContainInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.TryShouldContainInstanceOf::shouldContainInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.ValidationShouldContainInstanceOf::shouldContainInvalidInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.ValidationShouldContainInstanceOf::shouldContainValidInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.AbstractEitherAssert::containsOnLeft(java.lang.Object)",
            "org.assertj.vavr.api.AbstractEitherAssert::containsOnRight(java.lang.Object)",
            "org.assertj.vavr.api.AbstractValidationAssert::containsValid(java.lang.Object)",
            "org.assertj.vavr.api.TryShouldBeSuccess::asString(java.lang.StackTraceElement[])",
            "org.assertj.vavr.api.AbstractSeqAssert::assertIndexIsValid(org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractEitherAssert::containsRightInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.AbstractEitherAssert::containsLeftInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThanOrEqualTo(int)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThan(int)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(org.assertj.vavr.api.AbstractVavrAssert)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(org.assertj.vavr.api.AbstractVavrAssert)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractOptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.AbstractTryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractSeqAssert::isSorted()"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(org.assertj.vavr.api.AbstractVavrAssert)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractOptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.AbstractTryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractSeqAssert::isSorted()",
            "org.assertj.vavr.api.AbstractMapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.ClassLoadingStrategyFactory::classLoadingStrategy(java.lang.Class)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractOptionAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.AbstractSeqAssert::doesNotContain(java.lang.Object, org.assertj.core.data.Index)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(org.assertj.vavr.api.AbstractVavrAssert)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractOptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.AbstractTryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractSeqAssert::isSorted()",
            "org.assertj.vavr.api.AbstractMapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.ClassLoadingStrategyFactory::classLoadingStrategy(java.lang.Class)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractOptionAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.AbstractSeqAssert::doesNotContain(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractValidationAssert::containsInvalid(java.lang.Object)",
            "org.assertj.vavr.api.AbstractTryAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.EitherShouldContainInstanceOf::shouldContainOnRightInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.EitherShouldContainInstanceOf::shouldContainOnLeftInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.OptionShouldContainInstanceOf::shouldContainInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.TryShouldContainInstanceOf::shouldContainInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.ValidationShouldContainInstanceOf::shouldContainInvalidInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.ValidationShouldContainInstanceOf::shouldContainValidInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.AbstractEitherAssert::containsOnLeft(java.lang.Object)",
            "org.assertj.vavr.api.AbstractEitherAssert::containsOnRight(java.lang.Object)",
            "org.assertj.vavr.api.AbstractValidationAssert::containsValid(java.lang.Object)",
            "org.assertj.vavr.api.TryShouldBeSuccess::asString(java.lang.StackTraceElement[])",
            "org.assertj.vavr.api.AbstractEitherAssert::containsRightInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.AbstractEitherAssert::containsLeftInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThanOrEqualTo(int)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThan(int)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.SeqAssert::isSorted()",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.OptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.TryAssert::contains(java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.SeqAssert::isSorted()",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractSeqAssert::doesNotContain(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.OptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.TryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.OptionAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.VavrAssumptions::lambda.createAssumptionClass.0(java.lang.Class)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.SeqAssert::isSorted()",
            "org.assertj.vavr.api.EitherAssert::containsRightInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.EitherAssert::containsLeftInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.TryAssert::containsInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractSeqAssert::doesNotContain(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.OptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.TryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.OptionAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.ValidationAssert::containsInvalid(java.lang.Object)",
            "org.assertj.vavr.api.TryAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.EitherAssert::containsOnLeft(java.lang.Object)",
            "org.assertj.vavr.api.EitherAssert::containsOnRight(java.lang.Object)",
            "org.assertj.vavr.api.ValidationAssert::containsValid(java.lang.Object)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThanOrEqualTo(int)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThan(int)",
            "org.assertj.vavr.api.VavrAssumptions::lambda.createAssumptionClass.0(java.lang.Class)",
            "org.assertj.vavr.api.OptionAssert::containsInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.ValidationAssert::containsInvalidInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.ValidationAssert::containsValidInstanceOf(java.lang.Class)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.assertj.vavr.api.SeqAssert::isSorted()",
            "org.assertj.vavr.api.OptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.TryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.assertj.vavr.api.SeqAssert::isSorted()",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.OptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.TryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.OptionAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractSeqAssert::doesNotContain(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.VavrAssumptions::lambda.createAssumptionClass.0(java.lang.Class)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.assertj.vavr.api.AbstractSeqAssert::contains(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.SeqAssert::isSorted()",
            "org.assertj.vavr.api.EitherAssert::containsRightInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.EitherAssert::containsLeftInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.TryAssert::containsInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSizeBetween(int, int)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThanOrEqualTo(int)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThan(int)",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractSeqAssert::doesNotContain(java.lang.Object, org.assertj.core.data.Index)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.TryAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.OptionAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.TryAssert::contains(java.lang.Object)",
            "org.assertj.vavr.api.OptionAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.EitherAssert::containsOnLeft(java.lang.Object)",
            "org.assertj.vavr.api.EitherAssert::containsOnRight(java.lang.Object)",
            "org.assertj.vavr.api.ValidationAssert::containsValid(java.lang.Object)",
            "org.assertj.vavr.api.ValidationAssert::containsInvalid(java.lang.Object)",
            "org.assertj.vavr.api.OptionAssert::containsInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.ValidationAssert::containsInvalidInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.ValidationAssert::containsValidInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.VavrAssumptions::lambda.createAssumptionClass.0(java.lang.Class)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.assertj.vavr.api.SeqAssert::newAbstractIterableAssert(java.lang.Iterable)",
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(java.lang.Class, java.lang.Class, java.lang.Object)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSize(int)",
            "org.assertj.vavr.api.EitherShouldBeRight::<init>(io.vavr.control.Either)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeGreaterThan(int)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThanOrEqualTo(int)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThan(int)",
            "org.assertj.vavr.api.EitherShouldBeLeft::<init>(io.vavr.control.Either)",
            "org.assertj.vavr.api.VavrAssumptions::getAssumptionClass(java.lang.String)",
            "org.assertj.vavr.api.AbstractTraversableAssert::propagateAssertionInfoFrom(org.assertj.vavr.api.AbstractVavrAssert)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.assertj.vavr.api.AbstractMultimapAssert::containsValue(java.lang.Object)",
            "org.assertj.vavr.api.AbstractValidationAssert::containsInvalidSame(java.lang.Object)",
            "org.assertj.vavr.internal.Maps::failIfNull(java.lang.Object[])",
            "org.assertj.vavr.api.AbstractValidationAssert::containsInvalid(java.lang.Object)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSize(int)",
            "org.assertj.vavr.api.AbstractLazyAssert::isEvaluated()",
            "org.assertj.vavr.api.TryShouldBeSuccess::shouldBeSuccess(java.lang.Class, java.lang.String, java.lang.StackTraceElement[])",
            "org.assertj.vavr.api.OptionShouldContain::<init>(java.lang.Object)",
            "org.assertj.vavr.api.SetAssert::toAssert(java.lang.Object, java.lang.String)",
            "org.assertj.vavr.api.VavrAssumptions.AssumptionMethodInterceptor::intercept(org.assertj.vavr.api.AbstractVavrAssert, java.util.concurrent.Callable)",
            "org.assertj.vavr.api.AbstractTryAssert::usingFieldByFieldValueComparator()",
            "org.assertj.vavr.api.AbstractMultimapAssert::isNullOrEmpty()",
            "org.assertj.vavr.api.AbstractEitherAssert::containsRightInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.AbstractMapAssert::hasSizeLessThanOrEqualTo(int)",
            "org.assertj.vavr.api.AbstractSeqAssert::usingElementComparator(java.util.Comparator)",
            "org.assertj.vavr.api.AbstractMapAssert::doesNotContainKeys(java.lang.Object[])"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.assertj.vavr.api.AbstractMapAssert::hasSameSizeAs(java.lang.Object)",
            "org.assertj.vavr.api.LazyShouldBeNotEvaluated::shouldBeNotEvaluated(io.vavr.Lazy)",
            "org.assertj.vavr.api.AbstractOptionAssert::usingFieldByFieldValueComparator()",
            "org.assertj.vavr.api.VavrAssumptions::generateAssumptionClass(java.lang.Class)",
            "org.assertj.vavr.api.AbstractMultimapAssert::doesNotContainValues(java.lang.Object[])",
            "org.assertj.vavr.api.TryShouldContain::shouldContain(java.lang.Object)",
            "org.assertj.vavr.api.AbstractOptionAssert::containsInstanceOf(java.lang.Class)",
            "org.assertj.vavr.api.AbstractOptionAssert::assertValueIsPresent()",
            "org.assertj.vavr.api.AbstractTryAssert::checkNotNull(java.lang.Object)",
            "org.assertj.vavr.api.TryShouldContainInstanceOf::<init>(java.lang.String)",
            "org.assertj.vavr.api.EitherShouldContainInstanceOf::shouldContainOnLeftInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.internal.Maps::areNotEqual(java.lang.Object, java.lang.Object)",
            "org.assertj.vavr.api.AbstractOptionAssert::containsSame(java.lang.Object)",
            "org.assertj.vavr.api.AbstractMapAssert::containsEntry(java.lang.Object, java.lang.Object)",
            "org.assertj.vavr.api.OptionShouldContain::shouldContain(java.lang.Object)",
            "org.assertj.vavr.api.ShouldNotContainValues::<init>(java.lang.Object, java.lang.Object)",
            "org.assertj.vavr.api.AbstractSeqAssert::isSortedAccordingTo(java.util.Comparator)",
            "org.assertj.vavr.api.TryShouldContain::<init>(java.lang.String, java.lang.Object, java.lang.Object)",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSizeLessThan(int)",
            "org.assertj.vavr.api.AbstractEitherAssert::assertIsRight()",
            "org.assertj.vavr.api.SetAssert::newAbstractIterableAssert(java.lang.Iterable)",
            "org.assertj.vavr.api.OptionShouldBePresent::<init>()",
            "org.assertj.vavr.api.VavrAssumptions::asAssumption(org.assertj.vavr.api.AbstractVavrAssert)",
            "org.assertj.vavr.api.AbstractOptionAssert::checkNotNull(java.lang.Object)",
            "org.assertj.vavr.api.EitherShouldBeRight::<init>(io.vavr.control.Either)",
            "org.assertj.vavr.api.AbstractTryAssert::assertIsFailure()",
            "org.assertj.vavr.api.OptionShouldContainInstanceOf::shouldContainInstanceOf(java.lang.Object, java.lang.Class)",
            "org.assertj.vavr.api.AbstractMapAssert::isNotEmpty()",
            "org.assertj.vavr.api.AbstractValueAssert::propagateAssertionInfoFrom(org.assertj.vavr.api.AbstractVavrAssert)",
            "org.assertj.vavr.api.AbstractMultimapAssert::isNullOrEmpty()",
            "org.assertj.vavr.api.AbstractMultimapAssert::hasSameSizeAs(java.lang.Iterable)",
            "org.assertj.vavr.api.AbstractEitherAssert::checkNotNull(java.lang.Object)",
            "org.assertj.vavr.api.AbstractMultimapAssert::containsValues(java.lang.Object[])"
        ]
    }
]