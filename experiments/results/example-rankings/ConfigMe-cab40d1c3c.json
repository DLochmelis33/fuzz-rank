[
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::convert(java.lang.Class, java.lang.Object)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.beanmapper.MapperImpl::createBean(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.EnumLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.beanmapper.MapperImpl::convertValueForType(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createSequenceNode(java.util.stream.Stream, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::fromNumber(java.lang.Class, java.lang.Number)",
            "ch.jalu.configme.beanmapper.MapperImpl::createMap(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.beanmapper.MapperImpl::createBean(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.EnumLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.beanmapper.MapperImpl::convertValueForType(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createSequenceNode(java.util.stream.Stream, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::fromNumber(java.lang.Class, java.lang.Number)",
            "ch.jalu.configme.beanmapper.MapperImpl::createMap(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.resource.MapNormalizer::addValueIntoMap(java.util.Map, java.lang.String, java.lang.Object)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::fromString(java.lang.Class, java.lang.String)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.beanmapper.MapperImpl::toExportValue(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::collectComments(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.MapperImpl::createCollection(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.resource.YamlFileResource::createAndAddYamlNode(java.lang.Object, java.lang.String, java.util.List, ch.jalu.configme.resource.yaml.SnakeYamlNodeContainer, ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilder)",
            "ch.jalu.configme.resource.PropertyPathTraverser::returnLevelOfFirstNewPathElement(java.lang.String)",
            "ch.jalu.configme.resource.MapNormalizer::createNormalizedMapIfNeeded(java.lang.Object)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.properties.types.EnumPropertyType::convert(java.lang.Object, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.beanmapper.MapperImpl::createBean(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.EnumLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.beanmapper.MapperImpl::convertValueForType(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createSequenceNode(java.util.stream.Stream, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::fromNumber(java.lang.Class, java.lang.Number)",
            "ch.jalu.configme.beanmapper.MapperImpl::createMap(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.resource.MapNormalizer::addValueIntoMap(java.util.Map, java.lang.String, java.lang.Object)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::fromString(java.lang.Class, java.lang.String)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.beanmapper.MapperImpl::toExportValue(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::collectComments(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.MapperImpl::createCollection(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.resource.YamlFileResource::createAndAddYamlNode(java.lang.Object, java.lang.String, java.util.List, ch.jalu.configme.resource.yaml.SnakeYamlNodeContainer, ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilder)",
            "ch.jalu.configme.resource.PropertyPathTraverser::returnLevelOfFirstNewPathElement(java.lang.String)",
            "ch.jalu.configme.resource.MapNormalizer::createNormalizedMapIfNeeded(java.lang.Object)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.properties.types.EnumPropertyType::convert(java.lang.Object, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)",
            "ch.jalu.configme.migration.version.VersionMigrationService::performMigrations(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.properties.ListProperty::getFromReader(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Iterable)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::getPropertyField(java.lang.reflect.Field)",
            "ch.jalu.configme.migration.PlainMigrationService::checkAndMigrate(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.TypeInformation::getGenericType(int)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::toExportValue(java.lang.Object)",
            "ch.jalu.configme.properties.MapProperty::getFromReader(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.properties.OptionalProperty::determineValue(ch.jalu.configme.resource.PropertyReader)",
            "ch.jalu.configme.resource.PropertyPathTraverser::getPathElements(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getComments(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.properties.ArrayProperty::getFromReader(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.properties.SetProperty::getFromReader(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::setCommentForPropertyField(java.lang.reflect.Field, java.lang.String)",
            "ch.jalu.configme.resource.YamlFileReader::getObject(java.lang.String)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateAllPropertiesAreConstants(java.lang.Iterable)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createMapNode(java.util.Map, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeContainerImpl::convertToNode(ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilder)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::createFieldNameOrderMap(java.lang.Class)",
            "ch.jalu.configme.beanmapper.MapperImpl::createMapMatchingType(ch.jalu.configme.beanmapper.MappingContext)",
            "ch.jalu.configme.beanmapper.MapperImpl::convertToBean(java.lang.Object, ch.jalu.configme.utils.TypeInformation, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.beanmapper.MapperImpl::createCollectionMatchingType(ch.jalu.configme.beanmapper.MappingContext)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::validateProperties(java.lang.Class, java.util.Collection)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::collectProperties(java.lang.Class)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::toExportValue(java.lang.Object)",
            "ch.jalu.configme.beanmapper.MappingContext::getGenericTypeInfoOrFail(int)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::createValidLengthPredicate(java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.migration.version.VersionMigrationService::validateAndGroupMigrationsByFromVersion(java.lang.Iterable)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateSettingsHolderClassesFinal(java.lang.Iterable)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateClassesHaveHiddenNoArgConstructor(java.lang.Iterable)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)",
            "ch.jalu.configme.migration.version.VersionMigrationService::performMigrations(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Iterable)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::getPropertyField(java.lang.reflect.Field)",
            "ch.jalu.configme.migration.PlainMigrationService::checkAndMigrate(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getComments(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::setCommentForPropertyField(java.lang.reflect.Field, java.lang.String)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::validateProperties(java.lang.Class, java.util.Collection)",
            "ch.jalu.configme.migration.version.VersionMigrationService::validateAndGroupMigrationsByFromVersion(java.lang.Iterable)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, ch.jalu.configme.migration.version.VersionMigration[])"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.CombiningLeafValueHandler::lambda.convert.0(ch.jalu.configme.utils.TypeInformation, java.lang.Object, ch.jalu.configme.beanmapper.leafvaluehandler.LeafValueHandler)",
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, ch.jalu.configme.migration.version.VersionMigration[])"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.properties.types.PrimitivePropertyType::<init>(java.util.function.Function)",
            "ch.jalu.configme.beanmapper.MappingContext::getGenericTypeInfoOrFail(int)",
            "ch.jalu.configme.beanmapper.MapperImpl::createRootMappingContext(ch.jalu.configme.utils.TypeInformation, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.properties.PropertyInitializer::newSetProperty(java.lang.String, java.util.Set)",
            "ch.jalu.configme.properties.types.PrimitivePropertyType::fromNumber(java.util.function.Function)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::hasValidConstructorSetup(java.lang.Class)",
            "ch.jalu.configme.properties.SetProperty::<init>(java.lang.String, ch.jalu.configme.properties.types.PropertyType, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateAllPropertiesAreConstants(java.lang.Iterable)",
            "ch.jalu.configme.properties.RegexProperty::matches(java.lang.String, ch.jalu.configme.SettingsManager)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::createConfiguration(java.lang.Iterable)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::create()",
            "ch.jalu.configme.properties.PropertyInitializer::optionalEnumProperty(java.lang.Class, java.lang.String)",
            "ch.jalu.configme.resource.YamlFileReader::<init>(java.nio.file.Path, java.nio.charset.Charset, boolean)",
            "ch.jalu.configme.resource.YamlFileReader::<init>(java.nio.file.Path)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createMapNode(java.util.Map, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getEntryIfIsMap(java.lang.String, java.lang.Object)",
            "ch.jalu.configme.properties.SetProperty::<init>(java.lang.String, ch.jalu.configme.properties.types.PropertyType, java.lang.Object[])",
            "ch.jalu.configme.properties.types.EnumPropertyType::of(java.lang.Class)",
            "ch.jalu.configme.properties.PropertyBuilder::<init>(ch.jalu.configme.properties.types.PropertyType)",
            "ch.jalu.configme.properties.PropertyInitializer::inlineArrayProperty(ch.jalu.configme.properties.inlinearray.InlineArrayConverter)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.properties.PropertyInitializer::mapProperty(ch.jalu.configme.properties.types.PropertyType)",
            "ch.jalu.configme.resource.PropertyPathTraverser.PathElement::setFirstOfGroup(boolean)",
            "ch.jalu.configme.beanmapper.MappingContext::getGenericTypeInfoOrFail(int)",
            "ch.jalu.configme.properties.PropertyInitializer::listProperty(ch.jalu.configme.properties.types.PropertyType)",
            "ch.jalu.configme.resource.YamlFileResourceOptions.Builder::indentationSize(int)",
            "ch.jalu.configme.properties.types.EnumPropertyType::convert(java.lang.Object, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.properties.BaseProperty::<init>(java.lang.String, java.lang.Object)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.properties.types.PrimitivePropertyType::<init>(java.util.function.Function, java.util.function.Function)",
            "ch.jalu.configme.SettingsManagerBuilder::withResource(ch.jalu.configme.resource.PropertyResource)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::createConfiguration(java.util.List, ch.jalu.configme.configurationdata.CommentsConfiguration)",
            "ch.jalu.configme.properties.LongProperty::<init>(java.lang.String, java.lang.Long)",
            "ch.jalu.configme.properties.StringProperty::<init>(java.lang.String, java.lang.String)",
            "ch.jalu.configme.SettingsManagerBuilder::migrationService(ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.properties.PropertyInitializer::newLowercaseStringSetProperty(java.lang.String, java.util.Collection)",
            "ch.jalu.configme.properties.SetProperty::toExportValue(java.util.Set)",
            "ch.jalu.configme.properties.PropertyInitializer::optionalListProperty(java.lang.String)",
            "ch.jalu.configme.properties.types.PrimitivePropertyType::toExportValue(java.lang.Object)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.leafvaluehandler.StringLeafValueHandler::toExportValue(java.lang.Object)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::hasValidConstructorSetup(java.lang.Class)",
            "ch.jalu.configme.configurationdata.CommentsConfiguration::<init>(java.util.Map)",
            "ch.jalu.configme.properties.StringListProperty::<init>(java.lang.String, java.lang.String[])",
            "ch.jalu.configme.beanmapper.leafvaluehandler.EnumLeafValueHandler::toExportValue(java.lang.Object)",
            "ch.jalu.configme.properties.RegexProperty::<init>(java.lang.String, java.util.regex.Pattern)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::createTypeInfo(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.properties.StringSetProperty::toExportValue(java.util.Set)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.StandardLeafValueHandlers::getDefaultLeafValueHandler()",
            "ch.jalu.configme.beanmapper.MappingContextImpl::createChild(java.lang.String, ch.jalu.configme.utils.TypeInformation)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BooleanLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::setFieldAccessibleIfNeeded(java.lang.reflect.Field)",
            "ch.jalu.configme.properties.PropertyInitializer::optionalEnumProperty(java.lang.Class, java.lang.String)",
            "ch.jalu.configme.beanmapper.ConfigMeMapperException::<init>(java.lang.String)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::convert(java.lang.Class, java.lang.Object)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.properties.OptionalProperty::isValidValue(java.util.Optional)",
            "ch.jalu.configme.properties.StringSetProperty::<init>(java.lang.String, java.lang.String[])",
            "ch.jalu.configme.SettingsManagerImpl::loadFromResourceAndValidate()",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createKeyNode(java.lang.String)",
            "ch.jalu.configme.migration.version.VersionMigrationService::validateVersions(ch.jalu.configme.migration.version.VersionMigration)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::createConfiguration(java.lang.Class[])",
            "ch.jalu.configme.properties.types.BeanPropertyType::of(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::getInt(java.lang.String)",
            "ch.jalu.configme.properties.RegexProperty::<init>(java.lang.String, java.lang.String)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::createConfiguration(java.util.List)",
            "ch.jalu.configme.beanmapper.MapperImpl::unwrapReturnNull(java.lang.Object)",
            "ch.jalu.configme.properties.PropertyInitializer::optionalDoubleProperty(java.lang.String)",
            "ch.jalu.configme.properties.PropertyBuilder::<init>(ch.jalu.configme.properties.types.PropertyType)",
            "ch.jalu.configme.properties.PropertyBuilder::path(java.lang.String)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.EnumLeafValueHandler::toExportValue(java.lang.Object)",
            "ch.jalu.configme.properties.convertresult.ValueWithComments::streamThroughCommentsIfApplicable(java.lang.Object)",
            "ch.jalu.configme.resource.YamlFileReader::getEntryIfIsMap(java.lang.String, java.lang.Object)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File)",
            "ch.jalu.configme.properties.LowercaseStringSetProperty::<init>(java.lang.String, java.lang.String[])",
            "ch.jalu.configme.beanmapper.ConfigMeMapperException::<init>(ch.jalu.configme.beanmapper.MappingContext, java.lang.String, java.lang.Throwable)",
            "ch.jalu.configme.properties.PropertyInitializer::newSetProperty(java.lang.String, java.util.Set)",
            "ch.jalu.configme.utils.StreamUtils::repeat(java.lang.Object, int)",
            "ch.jalu.configme.resource.YamlFileReader::<init>(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.CombiningLeafValueHandler::<init>(ch.jalu.configme.beanmapper.leafvaluehandler.LeafValueHandler[])",
            "ch.jalu.configme.resource.YamlFileResourceOptions.Builder::numberOfLinesBeforeFunction(java.util.function.ToIntFunction)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::<init>(java.lang.String, java.util.function.IntFunction, java.util.function.Function, boolean)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::collectSectionComments(java.lang.Class)",
            "ch.jalu.configme.properties.types.EnumPropertyType::toExportValue(java.lang.Enum)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.properties.EnumProperty::<init>(java.lang.Class, java.lang.String, java.lang.Enum)",
            "ch.jalu.configme.configurationdata.ConfigurationDataImpl::setValueForProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::createConfiguration(java.lang.Iterable)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getComments(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.CombiningLeafValueHandler::<init>(java.util.Collection)",
            "ch.jalu.configme.properties.convertresult.PropertyValue::withValueRequiringRewrite(java.lang.Object)",
            "ch.jalu.configme.utils.TypeInformation::getGenericType(int)",
            "ch.jalu.configme.properties.BeanProperty::<init>(java.lang.Class, java.lang.String, java.lang.Object)",
            "ch.jalu.configme.migration.version.VersionMigrationService::validateAndGroupMigrationsByFromVersion(java.lang.Iterable)",
            "ch.jalu.configme.exception.ConfigMeException::<init>(java.lang.String, java.lang.Throwable)",
            "ch.jalu.configme.beanmapper.ConfigMeMapperException::<init>(java.lang.String, java.lang.Throwable)",
            "ch.jalu.configme.utils.TypeInformation::getGenericTypeAsClass(int)",
            "ch.jalu.configme.configurationdata.ConfigurationDataImpl::<init>(java.util.List, java.util.Map)",
            "ch.jalu.configme.properties.PropertyInitializer::optionalFloatProperty(java.lang.String)",
            "ch.jalu.configme.properties.BeanProperty::<init>(ch.jalu.configme.utils.TypeInformation, java.lang.String, java.lang.Object, ch.jalu.configme.beanmapper.Mapper)",
            "ch.jalu.configme.properties.TypeBasedProperty::<init>(java.lang.String, java.lang.Object, ch.jalu.configme.properties.types.PropertyType)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::createTypeInfo(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createBooleanNode(boolean)",
            "ch.jalu.configme.properties.convertresult.ConvertErrorRecorder::setHasError(java.lang.String)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.YamlFileResource::getYamlObject()",
            "ch.jalu.configme.properties.PropertyBuilder.TypeBasedPropertyBuilder::createFunction(ch.jalu.configme.properties.PropertyBuilder.CreateFunction)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateAllPropertiesAreConstants(java.lang.Iterable)",
            "ch.jalu.configme.properties.MapProperty::<init>(java.lang.String, java.util.Map, ch.jalu.configme.properties.types.PropertyType)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.EnumLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.properties.InlineArrayProperty::getFromReader(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::toExportValue(java.lang.Object)",
            "ch.jalu.configme.resource.YamlFileResource::<init>(java.io.File)",
            "ch.jalu.configme.properties.convertresult.ValueWithComments::<init>(java.lang.Object, java.util.List)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, java.lang.Iterable)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::createFieldNameOrderMap(java.lang.Class)",
            "ch.jalu.configme.SettingsManagerBuilder::migrationService(ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.properties.OptionalProperty::determineValue(ch.jalu.configme.resource.PropertyReader)",
            "ch.jalu.configme.beanmapper.leafvaluehandler.BigNumberLeafValueHandler::convert(java.lang.Class, java.lang.Object)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanPropertyDescriptionImpl::<init>(java.lang.String, ch.jalu.configme.utils.TypeInformation, java.lang.reflect.Method, java.lang.reflect.Method, ch.jalu.configme.beanmapper.propertydescription.BeanPropertyComments)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::createConfigurationData(java.lang.Iterable)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getAllProperties(java.lang.Class)",
            "ch.jalu.configme.beanmapper.MapperImpl::convertValueForType(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.properties.PropertyInitializer::optionalEnumProperty(java.lang.Class, java.lang.String)"
        ]
    }
]