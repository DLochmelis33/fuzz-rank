[
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.01,
        "entryPoints": [
            "leetcode.TrimABinarySearchTree::trimBST(util.TreeNode, int, int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::modifiedBinarySearch(int[], int, int, int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.05,
        "entryPoints": [
            "leetcode.TrimABinarySearchTree::trimBST(util.TreeNode, int, int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::modifiedBinarySearch(int[], int, int, int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.MaxAreaOfIsland::floodFill(int[][], int, int, int, int)",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.ThreeSum::findSum(int[], int, int, java.util.Set)",
            "leetcode.hard.SerializeAndDeserializeABinaryTree::deserialize(java.lang.String)",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "hackerrank.expedia.LongestVowelSubsequence::longestSubsequence(java.lang.String)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "leetcode.WordLadderII::bfs(java.lang.String, java.lang.String, java.util.Set, java.util.HashMap, java.util.HashMap)",
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.RomanToInteger::romanToInt(java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.1,
        "entryPoints": [
            "leetcode.TrimABinarySearchTree::trimBST(util.TreeNode, int, int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::modifiedBinarySearch(int[], int, int, int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.MaxAreaOfIsland::floodFill(int[][], int, int, int, int)",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.ThreeSum::findSum(int[], int, int, java.util.Set)",
            "leetcode.hard.SerializeAndDeserializeABinaryTree::deserialize(java.lang.String)",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "hackerrank.expedia.LongestVowelSubsequence::longestSubsequence(java.lang.String)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "leetcode.WordLadderII::bfs(java.lang.String, java.lang.String, java.util.Set, java.util.HashMap, java.util.HashMap)",
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.RomanToInteger::romanToInt(java.lang.String)",
            "leetcode.medium.ValidTicTacToeState::validTicTacToe(java.lang.String[])",
            "leetcode.hard.TrappingRainWaterII::trapRainWater(int[][])",
            "leetcode.easy.ReorderDataInLogFiles::reorderLogFiles(java.lang.String[])",
            "leetcode.medium.NumberOfDiceRollsWIthTargetSum::main(java.lang.String[])",
            "leetcode.ConstructStringFromBinaryTree::tree2str(util.TreeNode)",
            "codility.painless.CroppedMessage::solution(java.lang.String, int)",
            "leetcode.medium.Permutations::backtrack(java.util.List, java.util.ArrayList, int[])",
            "leetcode.FloodFill::fill(int[][], int, int, int, int)",
            "leetcode.easy.SymmetricTree::isSymmetric(util.TreeNode)",
            "hackerrank.expedia.Braces::isValid(java.lang.String)",
            "leetcode.ValidParantheses::isValid(java.lang.String)",
            "leetcode.StringToInteger::myAtoi(java.lang.String)",
            "leetcode.easy.TwoSum::twoSumSorting(int[], int)",
            "hackerrank.datastructures.stacks.BalancedBrackets::isBalanced(java.lang.String)",
            "leetcode.hard.LongestValidParentheses::longestValidParentheses(java.lang.String)",
            "leetcode.hard.MinimumWindowSubstring::minWindow(java.lang.String, java.lang.String)",
            "hackerrank.datastructures.stacks.EqualStacks::equalStacks(int[], int[], int[])",
            "leetcode.NextGreaterElement1::nextGreaterElement(int[], int[])",
            "hackerrank.projecteuler.Problem4::main(java.lang.String[])",
            "leetcode.medium.LongestPalindromicSubstring::longestPalindrome(java.lang.String)",
            "leetcode.ZombieClusters::numIslands(char[][])",
            "util.WriteToFile::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "SimpleStrategy",
        "topK": 0.2,
        "entryPoints": [
            "leetcode.TrimABinarySearchTree::trimBST(util.TreeNode, int, int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::modifiedBinarySearch(int[], int, int, int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.MaxAreaOfIsland::floodFill(int[][], int, int, int, int)",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.ThreeSum::findSum(int[], int, int, java.util.Set)",
            "leetcode.hard.SerializeAndDeserializeABinaryTree::deserialize(java.lang.String)",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "hackerrank.expedia.LongestVowelSubsequence::longestSubsequence(java.lang.String)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "leetcode.WordLadderII::bfs(java.lang.String, java.lang.String, java.util.Set, java.util.HashMap, java.util.HashMap)",
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.RomanToInteger::romanToInt(java.lang.String)",
            "leetcode.medium.ValidTicTacToeState::validTicTacToe(java.lang.String[])",
            "leetcode.hard.TrappingRainWaterII::trapRainWater(int[][])",
            "leetcode.easy.ReorderDataInLogFiles::reorderLogFiles(java.lang.String[])",
            "leetcode.medium.NumberOfDiceRollsWIthTargetSum::main(java.lang.String[])",
            "leetcode.ConstructStringFromBinaryTree::tree2str(util.TreeNode)",
            "codility.painless.CroppedMessage::solution(java.lang.String, int)",
            "leetcode.medium.Permutations::backtrack(java.util.List, java.util.ArrayList, int[])",
            "leetcode.FloodFill::fill(int[][], int, int, int, int)",
            "leetcode.easy.SymmetricTree::isSymmetric(util.TreeNode)",
            "hackerrank.expedia.Braces::isValid(java.lang.String)",
            "leetcode.ValidParantheses::isValid(java.lang.String)",
            "leetcode.StringToInteger::myAtoi(java.lang.String)",
            "leetcode.easy.TwoSum::twoSumSorting(int[], int)",
            "hackerrank.datastructures.stacks.BalancedBrackets::isBalanced(java.lang.String)",
            "leetcode.hard.LongestValidParentheses::longestValidParentheses(java.lang.String)",
            "leetcode.hard.MinimumWindowSubstring::minWindow(java.lang.String, java.lang.String)",
            "hackerrank.datastructures.stacks.EqualStacks::equalStacks(int[], int[], int[])",
            "leetcode.NextGreaterElement1::nextGreaterElement(int[], int[])",
            "hackerrank.projecteuler.Problem4::main(java.lang.String[])",
            "leetcode.medium.LongestPalindromicSubstring::longestPalindrome(java.lang.String)",
            "leetcode.ZombieClusters::numIslands(char[][])",
            "util.WriteToFile::main(java.lang.String[])",
            "util.HashMapExample::main(java.lang.String[])",
            "leetcode.medium.GenerateParantheses::backtrack(java.util.List, java.lang.String, int, int, int)",
            "leetcode.medium.LowestCommonAncestorOfBinaryTree::lowestCommonAncestor(util.TreeNode, util.TreeNode, util.TreeNode)",
            "leetcode.WordLadderII::dfs(java.lang.String, java.lang.String, java.util.HashMap, java.util.HashMap, java.util.ArrayList, java.util.List)",
            "hackerrank.algorithms.search.MinimumLoss::minimumLoss(java.util.List)",
            "leetcode.StringCompression::compress(char[])",
            "leetcode.FizzBuzz::fizzBuzz(int)",
            "leetcode.easy.DiameterOfABinaryTree::diameterOfBinaryTree(util.TreeNode)",
            "leetcode.medium.TopKFrequentWords::topKFrequent(java.lang.String[], int)",
            "leetcode.AssignCookies::findContentChildren(int[], int[])",
            "leetcode.BinaryTreeRightSIdeView::rightSideView(util.TreeNode)",
            "hackerrank.expedia.ReachableEmployees::order(int, java.util.List, java.util.List, int)",
            "leetcode.medium.EditDistance::minDistance(java.lang.String, java.lang.String)",
            "leetcode.easy.NextGreaterElementI::nextGreaterElement(int[], int[])",
            "hackerrank.algorithms.strings.BetterCompression::betterCompression(java.lang.String)",
            "leetcode.medium.ReorganizeString::reorganizeString(java.lang.String)",
            "leetcode.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "leetcode.medium.SpiralMatrix::spiralOrder(int[][])",
            "codility.painless.CroppedMessage::main(java.lang.String[])",
            "leetcode.medium.LRUCache::put(int, int)",
            "util.QuickSort::quickSort(int[], int, int)",
            "leetcode.medium.BinaryTreeFromPreorderInOrderTraversal::splitTree(int[], java.util.Map, int, int, int)",
            "leetcode.medium.MaximumBinaryTree::build(int[], int, int)",
            "leetcode.medium.TicTacToe::move(int, int, int)",
            "leetcode.ToeplitzMatrix::isToeplitzMatrix(int[][])",
            "leetcode.medium.SearchA2DMatrix::searchPotentialRow(int[][], int)",
            "leetcode.easy.PathSum::hasPathSum(util.TreeNode, int)",
            "hackerrank.algorithms.sorting.InsertionSortPartOne::insertIntoSorted(int[])",
            "hackerrank.algorithms.strings.SherlockAndTheValidString::isValid(java.lang.String)",
            "leetcode.medium.LongestSubstringWithoutRepeatingCharacters::lengthOfLongestSubstring(java.lang.String)",
            "leetcode.WordLadderII::getNeighbors(java.lang.String, java.util.Set)",
            "leetcode.medium.KClosestPointsToOrigin::kClosest(int[][], int)",
            "leetcode.AddTwoNumbers::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.RotateImage::rotate2(int[][])",
            "leetcode.KeyboardRow::findWords(java.lang.String[])",
            "leetcode.MaxAreaOfIsland::maxAreaOfIsland(int[][])",
            "leetcode.easy.FindCommonCharacters::commonChars(java.lang.String[])",
            "leetcode.LoggerRateLimiter::shouldPrintMessage(int, java.lang.String)",
            "leetcode.LeafSimilar::traverse(java.util.List, util.TreeNode)",
            "leetcode.easy.LowestCommonAncestorOfBinarySearchTree::lowestCommonAncestor(util.TreeNode, util.TreeNode, util.TreeNode)",
            "leetcode.TwoSumIV::findTarget(util.TreeNode, int)",
            "leetcode.medium.PermutationsII::backtrack(java.util.List, java.util.ArrayList, int[], boolean[])",
            "leetcode.ZombieClusters::DFS(int[][], int, boolean[], int)",
            "leetcode.easy.ConvertBstToGreaterTree::convertBST(util.TreeNode)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "leetcode.TrimABinarySearchTree::trimBST(util.TreeNode, int, int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::modifiedBinarySearch(int[], int, int, int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "leetcode.TrimABinarySearchTree::trimBST(util.TreeNode, int, int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::modifiedBinarySearch(int[], int, int, int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.MaxAreaOfIsland::floodFill(int[][], int, int, int, int)",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.ThreeSum::findSum(int[], int, int, java.util.Set)",
            "leetcode.hard.SerializeAndDeserializeABinaryTree::deserialize(java.lang.String)",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "hackerrank.expedia.LongestVowelSubsequence::longestSubsequence(java.lang.String)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "leetcode.WordLadderII::bfs(java.lang.String, java.lang.String, java.util.Set, java.util.HashMap, java.util.HashMap)",
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.RomanToInteger::romanToInt(java.lang.String)"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "leetcode.TrimABinarySearchTree::trimBST(util.TreeNode, int, int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::modifiedBinarySearch(int[], int, int, int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.MaxAreaOfIsland::floodFill(int[][], int, int, int, int)",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.ThreeSum::findSum(int[], int, int, java.util.Set)",
            "leetcode.hard.SerializeAndDeserializeABinaryTree::deserialize(java.lang.String)",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "hackerrank.expedia.LongestVowelSubsequence::longestSubsequence(java.lang.String)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "leetcode.WordLadderII::bfs(java.lang.String, java.lang.String, java.util.Set, java.util.HashMap, java.util.HashMap)",
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.RomanToInteger::romanToInt(java.lang.String)",
            "leetcode.medium.ValidTicTacToeState::validTicTacToe(java.lang.String[])",
            "leetcode.hard.TrappingRainWaterII::trapRainWater(int[][])",
            "leetcode.easy.ReorderDataInLogFiles::reorderLogFiles(java.lang.String[])",
            "leetcode.medium.NumberOfDiceRollsWIthTargetSum::main(java.lang.String[])",
            "leetcode.ConstructStringFromBinaryTree::tree2str(util.TreeNode)",
            "codility.painless.CroppedMessage::solution(java.lang.String, int)",
            "leetcode.medium.Permutations::backtrack(java.util.List, java.util.ArrayList, int[])",
            "leetcode.FloodFill::fill(int[][], int, int, int, int)",
            "leetcode.easy.SymmetricTree::isSymmetric(util.TreeNode)",
            "hackerrank.expedia.Braces::isValid(java.lang.String)",
            "leetcode.ValidParantheses::isValid(java.lang.String)",
            "leetcode.StringToInteger::myAtoi(java.lang.String)",
            "leetcode.easy.TwoSum::twoSumSorting(int[], int)",
            "hackerrank.datastructures.stacks.BalancedBrackets::isBalanced(java.lang.String)",
            "leetcode.hard.LongestValidParentheses::longestValidParentheses(java.lang.String)",
            "leetcode.hard.MinimumWindowSubstring::minWindow(java.lang.String, java.lang.String)",
            "hackerrank.datastructures.stacks.EqualStacks::equalStacks(int[], int[], int[])",
            "leetcode.NextGreaterElement1::nextGreaterElement(int[], int[])",
            "hackerrank.projecteuler.Problem4::main(java.lang.String[])",
            "leetcode.medium.LongestPalindromicSubstring::longestPalindrome(java.lang.String)",
            "leetcode.ZombieClusters::numIslands(char[][])",
            "util.WriteToFile::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "SimpleWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "leetcode.TrimABinarySearchTree::trimBST(util.TreeNode, int, int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::modifiedBinarySearch(int[], int, int, int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.MaxAreaOfIsland::floodFill(int[][], int, int, int, int)",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.ThreeSum::findSum(int[], int, int, java.util.Set)",
            "leetcode.hard.SerializeAndDeserializeABinaryTree::deserialize(java.lang.String)",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "hackerrank.expedia.LongestVowelSubsequence::longestSubsequence(java.lang.String)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "leetcode.WordLadderII::bfs(java.lang.String, java.lang.String, java.util.Set, java.util.HashMap, java.util.HashMap)",
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.RomanToInteger::romanToInt(java.lang.String)",
            "leetcode.medium.ValidTicTacToeState::validTicTacToe(java.lang.String[])",
            "leetcode.hard.TrappingRainWaterII::trapRainWater(int[][])",
            "leetcode.easy.ReorderDataInLogFiles::reorderLogFiles(java.lang.String[])",
            "leetcode.medium.NumberOfDiceRollsWIthTargetSum::main(java.lang.String[])",
            "leetcode.ConstructStringFromBinaryTree::tree2str(util.TreeNode)",
            "codility.painless.CroppedMessage::solution(java.lang.String, int)",
            "leetcode.medium.Permutations::backtrack(java.util.List, java.util.ArrayList, int[])",
            "leetcode.FloodFill::fill(int[][], int, int, int, int)",
            "leetcode.easy.SymmetricTree::isSymmetric(util.TreeNode)",
            "hackerrank.expedia.Braces::isValid(java.lang.String)",
            "leetcode.ValidParantheses::isValid(java.lang.String)",
            "leetcode.StringToInteger::myAtoi(java.lang.String)",
            "leetcode.easy.TwoSum::twoSumSorting(int[], int)",
            "hackerrank.datastructures.stacks.BalancedBrackets::isBalanced(java.lang.String)",
            "leetcode.hard.LongestValidParentheses::longestValidParentheses(java.lang.String)",
            "leetcode.hard.MinimumWindowSubstring::minWindow(java.lang.String, java.lang.String)",
            "hackerrank.datastructures.stacks.EqualStacks::equalStacks(int[], int[], int[])",
            "leetcode.NextGreaterElement1::nextGreaterElement(int[], int[])",
            "hackerrank.projecteuler.Problem4::main(java.lang.String[])",
            "leetcode.medium.LongestPalindromicSubstring::longestPalindrome(java.lang.String)",
            "leetcode.ZombieClusters::numIslands(char[][])",
            "util.WriteToFile::main(java.lang.String[])",
            "util.HashMapExample::main(java.lang.String[])",
            "leetcode.medium.GenerateParantheses::backtrack(java.util.List, java.lang.String, int, int, int)",
            "leetcode.medium.LowestCommonAncestorOfBinaryTree::lowestCommonAncestor(util.TreeNode, util.TreeNode, util.TreeNode)",
            "leetcode.WordLadderII::dfs(java.lang.String, java.lang.String, java.util.HashMap, java.util.HashMap, java.util.ArrayList, java.util.List)",
            "hackerrank.algorithms.search.MinimumLoss::minimumLoss(java.util.List)",
            "leetcode.StringCompression::compress(char[])",
            "leetcode.FizzBuzz::fizzBuzz(int)",
            "leetcode.easy.DiameterOfABinaryTree::diameterOfBinaryTree(util.TreeNode)",
            "leetcode.medium.TopKFrequentWords::topKFrequent(java.lang.String[], int)",
            "leetcode.AssignCookies::findContentChildren(int[], int[])",
            "leetcode.BinaryTreeRightSIdeView::rightSideView(util.TreeNode)",
            "hackerrank.expedia.ReachableEmployees::order(int, java.util.List, java.util.List, int)",
            "leetcode.medium.EditDistance::minDistance(java.lang.String, java.lang.String)",
            "leetcode.easy.NextGreaterElementI::nextGreaterElement(int[], int[])",
            "hackerrank.algorithms.strings.BetterCompression::betterCompression(java.lang.String)",
            "leetcode.medium.ReorganizeString::reorganizeString(java.lang.String)",
            "leetcode.WordLadder::ladderLength(java.lang.String, java.lang.String, java.util.List)",
            "leetcode.medium.SpiralMatrix::spiralOrder(int[][])",
            "codility.painless.CroppedMessage::main(java.lang.String[])",
            "leetcode.medium.LRUCache::put(int, int)",
            "util.QuickSort::quickSort(int[], int, int)",
            "leetcode.medium.BinaryTreeFromPreorderInOrderTraversal::splitTree(int[], java.util.Map, int, int, int)",
            "leetcode.medium.MaximumBinaryTree::build(int[], int, int)",
            "leetcode.medium.TicTacToe::move(int, int, int)",
            "leetcode.ToeplitzMatrix::isToeplitzMatrix(int[][])",
            "leetcode.medium.SearchA2DMatrix::searchPotentialRow(int[][], int)",
            "leetcode.easy.PathSum::hasPathSum(util.TreeNode, int)",
            "hackerrank.algorithms.sorting.InsertionSortPartOne::insertIntoSorted(int[])",
            "hackerrank.algorithms.strings.SherlockAndTheValidString::isValid(java.lang.String)",
            "leetcode.medium.LongestSubstringWithoutRepeatingCharacters::lengthOfLongestSubstring(java.lang.String)",
            "leetcode.medium.KClosestPointsToOrigin::kClosest(int[][], int)",
            "leetcode.AddTwoNumbers::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.RotateImage::rotate2(int[][])",
            "leetcode.KeyboardRow::findWords(java.lang.String[])",
            "leetcode.MaxAreaOfIsland::maxAreaOfIsland(int[][])",
            "leetcode.easy.FindCommonCharacters::commonChars(java.lang.String[])",
            "leetcode.LoggerRateLimiter::shouldPrintMessage(int, java.lang.String)",
            "leetcode.LeafSimilar::traverse(java.util.List, util.TreeNode)",
            "leetcode.easy.LowestCommonAncestorOfBinarySearchTree::lowestCommonAncestor(util.TreeNode, util.TreeNode, util.TreeNode)",
            "leetcode.TwoSumIV::findTarget(util.TreeNode, int)",
            "leetcode.medium.PermutationsII::backtrack(java.util.List, java.util.ArrayList, int[], boolean[])",
            "leetcode.ZombieClusters::DFS(int[][], int, boolean[], int)",
            "leetcode.easy.ConvertBstToGreaterTree::convertBST(util.TreeNode)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.medium.SearchInRotatedSortedArray::alternateSearch(int[], int)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.medium.SearchInRotatedSortedArray::alternateSearch(int[], int)",
            "leetcode.ThreeSum::threeSum(int[])",
            "hackerrank.expedia.LongestVowelSubsequence::main(java.lang.String[])",
            "leetcode.RomanToInteger::main(java.lang.String[])",
            "leetcode.MaxAreaOfIsland::main(java.lang.String[])",
            "leetcode.WordLadderII::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.medium.ValidTicTacToeState::validTicTacToe(java.lang.String[])",
            "leetcode.hard.TrappingRainWaterII::trapRainWater(int[][])",
            "leetcode.easy.ReorderDataInLogFiles::reorderLogFiles(java.lang.String[])",
            "leetcode.medium.NumberOfDiceRollsWIthTargetSum::main(java.lang.String[])",
            "leetcode.easy.SymmetricTree::isSymmetric(util.TreeNode)",
            "leetcode.ValidParantheses::isValid(java.lang.String)",
            "leetcode.StringToInteger::myAtoi(java.lang.String)",
            "leetcode.easy.TwoSum::twoSumSorting(int[], int)",
            "hackerrank.datastructures.stacks.BalancedBrackets::isBalanced(java.lang.String)",
            "leetcode.hard.LongestValidParentheses::longestValidParentheses(java.lang.String)",
            "leetcode.hard.MinimumWindowSubstring::minWindow(java.lang.String, java.lang.String)",
            "hackerrank.datastructures.stacks.EqualStacks::equalStacks(int[], int[], int[])",
            "hackerrank.projecteuler.Problem4::main(java.lang.String[])",
            "leetcode.medium.LongestPalindromicSubstring::longestPalindrome(java.lang.String)",
            "util.WriteToFile::main(java.lang.String[])",
            "leetcode.medium.SearchInRotatedSortedArray::alternateSearch(int[], int)",
            "leetcode.ThreeSum::threeSum(int[])",
            "hackerrank.expedia.LongestVowelSubsequence::main(java.lang.String[])",
            "leetcode.RomanToInteger::main(java.lang.String[])",
            "codility.painless.CroppedMessage::main(java.lang.String[])",
            "leetcode.medium.Permutations::permute(int[])",
            "leetcode.NextGreaterElement1::main(java.lang.String[])",
            "leetcode.MaxAreaOfIsland::main(java.lang.String[])",
            "leetcode.WordLadderII::main(java.lang.String[])",
            "leetcode.FloodFill::main(java.lang.String[])",
            "hackerrank.expedia.Braces::main(java.lang.String[])",
            "leetcode.ZombieClusters::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "leetcode.WordLadderII::main(java.lang.String[])",
            "codility.painless.CroppedMessage::main(java.lang.String[])",
            "leetcode.MaxAreaOfIsland::main(java.lang.String[])",
            "leetcode.ZombieClusters::main(java.lang.String[])",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.medium.ValidTicTacToeState::validTicTacToe(java.lang.String[])",
            "leetcode.hard.TrappingRainWaterII::trapRainWater(int[][])",
            "leetcode.easy.ReorderDataInLogFiles::reorderLogFiles(java.lang.String[])",
            "leetcode.medium.NumberOfDiceRollsWIthTargetSum::main(java.lang.String[])",
            "leetcode.easy.SymmetricTree::isSymmetric(util.TreeNode)",
            "leetcode.ValidParantheses::isValid(java.lang.String)",
            "leetcode.StringToInteger::myAtoi(java.lang.String)",
            "leetcode.easy.TwoSum::twoSumSorting(int[], int)",
            "hackerrank.datastructures.stacks.BalancedBrackets::isBalanced(java.lang.String)",
            "leetcode.hard.LongestValidParentheses::longestValidParentheses(java.lang.String)",
            "leetcode.hard.MinimumWindowSubstring::minWindow(java.lang.String, java.lang.String)",
            "hackerrank.datastructures.stacks.EqualStacks::equalStacks(int[], int[], int[])",
            "hackerrank.projecteuler.Problem4::main(java.lang.String[])",
            "leetcode.medium.LongestPalindromicSubstring::longestPalindrome(java.lang.String)",
            "util.WriteToFile::main(java.lang.String[])",
            "util.HashMapExample::main(java.lang.String[])",
            "hackerrank.algorithms.search.MinimumLoss::minimumLoss(java.util.List)",
            "leetcode.FizzBuzz::fizzBuzz(int)",
            "leetcode.easy.DiameterOfABinaryTree::diameterOfBinaryTree(util.TreeNode)",
            "leetcode.medium.TopKFrequentWords::topKFrequent(java.lang.String[], int)",
            "leetcode.AssignCookies::findContentChildren(int[], int[])",
            "leetcode.medium.EditDistance::minDistance(java.lang.String, java.lang.String)",
            "leetcode.easy.NextGreaterElementI::nextGreaterElement(int[], int[])",
            "hackerrank.algorithms.strings.BetterCompression::betterCompression(java.lang.String)",
            "leetcode.medium.ReorganizeString::reorganizeString(java.lang.String)",
            "leetcode.medium.SpiralMatrix::spiralOrder(int[][])",
            "leetcode.medium.LRUCache::put(int, int)",
            "leetcode.medium.TicTacToe::move(int, int, int)",
            "leetcode.ToeplitzMatrix::isToeplitzMatrix(int[][])",
            "leetcode.easy.PathSum::hasPathSum(util.TreeNode, int)",
            "hackerrank.algorithms.strings.SherlockAndTheValidString::isValid(java.lang.String)",
            "leetcode.medium.LongestSubstringWithoutRepeatingCharacters::lengthOfLongestSubstring(java.lang.String)",
            "leetcode.AddTwoNumbers::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.RotateImage::rotate2(int[][])",
            "leetcode.easy.FindCommonCharacters::commonChars(java.lang.String[])",
            "leetcode.LoggerRateLimiter::shouldPrintMessage(int, java.lang.String)",
            "leetcode.TwoSumIV::findTarget(util.TreeNode, int)",
            "leetcode.easy.ConvertBstToGreaterTree::convertBST(util.TreeNode)",
            "leetcode.medium.SearchInRotatedSortedArray::alternateSearch(int[], int)",
            "leetcode.ThreeSum::threeSum(int[])",
            "hackerrank.expedia.LongestVowelSubsequence::main(java.lang.String[])",
            "leetcode.RomanToInteger::main(java.lang.String[])",
            "leetcode.medium.Permutations::permute(int[])",
            "leetcode.NextGreaterElement1::main(java.lang.String[])",
            "leetcode.medium.GenerateParantheses::generateParenthesis(int)",
            "leetcode.StringCompression::main(java.lang.String[])",
            "leetcode.BinaryTreeRightSIdeView::main(java.lang.String[])",
            "hackerrank.expedia.ReachableEmployees::main(java.lang.String[])",
            "leetcode.WordLadder::main(java.lang.String[])",
            "leetcode.medium.BinaryTreeFromPreorderInOrderTraversal::buildTree(int[], int[])",
            "leetcode.medium.MaximumBinaryTree::constructMaximumBinaryTree(int[])",
            "leetcode.medium.SearchA2DMatrix::searchMatrix(int[][], int)",
            "hackerrank.algorithms.sorting.InsertionSortPartOne::main(java.lang.String[])",
            "leetcode.medium.KClosestPointsToOrigin::main(java.lang.String[])",
            "leetcode.KeyboardRow::main(java.lang.String[])",
            "leetcode.LeafSimilar::leafSimilar(util.TreeNode, util.TreeNode)",
            "leetcode.medium.PermutationsII::permuteUnique(int[])",
            "leetcode.FloodFill::main(java.lang.String[])",
            "hackerrank.expedia.Braces::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "leetcode.medium.SearchInRotatedSortedArray::alternateSearch(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.medium.SearchInRotatedSortedArray::alternateSearch(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "leetcode.RomanToInteger::main(java.lang.String[])",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.ThreeSum::threeSum(int[])",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.MaxAreaOfIsland::main(java.lang.String[])",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "hackerrank.expedia.LongestVowelSubsequence::main(java.lang.String[])",
            "leetcode.WordLadderII::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.medium.ValidTicTacToeState::validTicTacToe(java.lang.String[])",
            "leetcode.easy.ReorderDataInLogFiles::reorderLogFiles(java.lang.String[])",
            "leetcode.medium.SearchInRotatedSortedArray::alternateSearch(int[], int)",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "leetcode.hard.TrappingRainWaterII::trapRainWater(int[][])",
            "leetcode.easy.TwoSum::twoSumSorting(int[], int)",
            "leetcode.hard.LongestValidParentheses::longestValidParentheses(java.lang.String)",
            "leetcode.medium.LongestPalindromicSubstring::longestPalindrome(java.lang.String)",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "leetcode.easy.SymmetricTree::isSymmetric(util.TreeNode)",
            "leetcode.StringToInteger::myAtoi(java.lang.String)",
            "leetcode.hard.MinimumWindowSubstring::minWindow(java.lang.String, java.lang.String)",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "leetcode.medium.NumberOfDiceRollsWIthTargetSum::main(java.lang.String[])",
            "leetcode.RomanToInteger::main(java.lang.String[])",
            "leetcode.FloodFill::main(java.lang.String[])",
            "leetcode.ValidParantheses::isValid(java.lang.String)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "hackerrank.datastructures.stacks.BalancedBrackets::isBalanced(java.lang.String)",
            "hackerrank.datastructures.stacks.EqualStacks::equalStacks(int[], int[], int[])",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.ThreeSum::threeSum(int[])",
            "leetcode.medium.Permutations::permute(int[])",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "hackerrank.projecteuler.Problem4::main(java.lang.String[])",
            "codility.painless.CroppedMessage::main(java.lang.String[])",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.MaxAreaOfIsland::main(java.lang.String[])",
            "hackerrank.expedia.Braces::main(java.lang.String[])",
            "util.WriteToFile::main(java.lang.String[])",
            "leetcode.NextGreaterElement1::main(java.lang.String[])",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "hackerrank.expedia.LongestVowelSubsequence::main(java.lang.String[])",
            "leetcode.ZombieClusters::main(java.lang.String[])",
            "leetcode.WordLadderII::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "leetcode.medium.CountServersThatCommunicate::countServers(int[][])",
            "leetcode.medium.SetMatrixZeroes::setZeroes(int[][])",
            "leetcode.medium.RotateImage::rotate2(int[][])",
            "leetcode.medium.MinimumDominoRotationsForEqualRow::minDominoRotations(int[], int[])",
            "leetcode.medium.ValidTicTacToeState::validTicTacToe(java.lang.String[])",
            "leetcode.easy.ReorderDataInLogFiles::reorderLogFiles(java.lang.String[])",
            "leetcode.AssignCookies::findContentChildren(int[], int[])",
            "leetcode.ToeplitzMatrix::isToeplitzMatrix(int[][])",
            "leetcode.medium.SearchInRotatedSortedArray::alternateSearch(int[], int)",
            "codility.painless.CroppedMessage::main(java.lang.String[])",
            "leetcode.medium.SearchInRotatedSortedArray::search(int[], int)",
            "leetcode.hard.MedianOfTwoSortedArrays::findMedianSortedArrays(int[], int[])",
            "leetcode.hard.TrappingRainWaterII::trapRainWater(int[][])",
            "leetcode.easy.TwoSum::twoSumSorting(int[], int)",
            "leetcode.AddTwoNumbers::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.medium.SearchA2DMatrix::searchMatrix(int[][], int)",
            "leetcode.MaxAreaOfIsland::main(java.lang.String[])",
            "leetcode.WordLadderII::main(java.lang.String[])",
            "leetcode.hard.LongestValidParentheses::longestValidParentheses(java.lang.String)",
            "leetcode.medium.LongestPalindromicSubstring::longestPalindrome(java.lang.String)",
            "leetcode.FizzBuzz::fizzBuzz(int)",
            "leetcode.medium.EditDistance::minDistance(java.lang.String, java.lang.String)",
            "leetcode.medium.ReorganizeString::reorganizeString(java.lang.String)",
            "leetcode.medium.SpiralMatrix::spiralOrder(int[][])",
            "leetcode.StringCompression::main(java.lang.String[])",
            "leetcode.medium.MaximumBinaryTree::constructMaximumBinaryTree(int[])",
            "hackerrank.algorithms.strings.TwoCharacters::alternate(java.lang.String)",
            "leetcode.easy.SymmetricTree::isSymmetric(util.TreeNode)",
            "leetcode.StringToInteger::myAtoi(java.lang.String)",
            "leetcode.ZombieClusters::main(java.lang.String[])",
            "leetcode.hard.MinimumWindowSubstring::minWindow(java.lang.String, java.lang.String)",
            "leetcode.LoggerRateLimiter::shouldPrintMessage(int, java.lang.String)",
            "leetcode.LeafSimilar::leafSimilar(util.TreeNode, util.TreeNode)",
            "hackerrank.datastructures.stacks.GameOfTwoStacks::twoStacks(int, java.util.List, java.util.List)",
            "leetcode.medium.NumberOfDiceRollsWIthTargetSum::main(java.lang.String[])",
            "leetcode.medium.TicTacToe::move(int, int, int)",
            "leetcode.easy.PathSum::hasPathSum(util.TreeNode, int)",
            "leetcode.RomanToInteger::main(java.lang.String[])",
            "leetcode.FloodFill::main(java.lang.String[])",
            "leetcode.ValidParantheses::isValid(java.lang.String)",
            "util.HashMapExample::main(java.lang.String[])",
            "leetcode.TwoSumIV::findTarget(util.TreeNode, int)",
            "leetcode.medium.GenerateParantheses::generateParenthesis(int)",
            "hackerrank.projecteuler.Problem5::main(java.lang.String[])",
            "hackerrank.datastructures.stacks.BalancedBrackets::isBalanced(java.lang.String)",
            "hackerrank.datastructures.stacks.EqualStacks::equalStacks(int[], int[], int[])",
            "leetcode.easy.FindCommonCharacters::commonChars(java.lang.String[])",
            "leetcode.medium.BinaryTreeFromPreorderInOrderTraversal::buildTree(int[], int[])",
            "leetcode.medium.IsomorphicStrings::isIsomorphic(java.lang.String, java.lang.String)",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.ThreeSum::threeSum(int[])",
            "leetcode.medium.Permutations::permute(int[])",
            "leetcode.KeyboardRow::main(java.lang.String[])",
            "leetcode.BaseballGame::calPoints(java.lang.String[])",
            "leetcode.WordBreak::wordBreak(java.lang.String, java.util.List)",
            "hackerrank.projecteuler.Problem4::main(java.lang.String[])",
            "hackerrank.algorithms.search.MinimumLoss::minimumLoss(java.util.List)",
            "leetcode.easy.NextGreaterElementI::nextGreaterElement(int[], int[])",
            "hackerrank.algorithms.sorting.InsertionSortPartOne::main(java.lang.String[])",
            "leetcode.medium.PermutationsII::permuteUnique(int[])",
            "leetcode.medium.LRUCache::put(int, int)",
            "leetcode.medium.LongestSubstringWithoutRepeatingCharacters::lengthOfLongestSubstring(java.lang.String)",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.easy.DiameterOfABinaryTree::diameterOfBinaryTree(util.TreeNode)",
            "hackerrank.expedia.Braces::main(java.lang.String[])",
            "util.WriteToFile::main(java.lang.String[])",
            "leetcode.BinaryTreeRightSIdeView::main(java.lang.String[])",
            "leetcode.easy.ConvertBstToGreaterTree::convertBST(util.TreeNode)",
            "leetcode.NextGreaterElement1::main(java.lang.String[])",
            "leetcode.medium.DecodeString::decodeString(java.lang.String)",
            "hackerrank.algorithms.strings.SherlockAndTheValidString::isValid(java.lang.String)",
            "hackerrank.expedia.LongestVowelSubsequence::main(java.lang.String[])",
            "leetcode.WordLadder::main(java.lang.String[])",
            "leetcode.medium.TopKFrequentWords::topKFrequent(java.lang.String[], int)",
            "hackerrank.expedia.ReachableEmployees::main(java.lang.String[])",
            "hackerrank.algorithms.strings.BetterCompression::betterCompression(java.lang.String)",
            "leetcode.medium.KClosestPointsToOrigin::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.01,
        "entryPoints": [
            "leetcode.medium.GroupAnagrams::getFrequencyString(java.lang.String)",
            "util.QuickSort::quickSort(int[], int, int)",
            "leetcode.ConvertSortedArrayToBinarySearchTree::helper(int[], int, int)",
            "leetcode.medium.CompareVersionNumbers::compareVersion(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.05,
        "entryPoints": [
            "leetcode.medium.Permutations::permute(int[])",
            "leetcode.DetectCapital::detectCapitalUse(java.lang.String)",
            "util.DoubleListNode::deleteFromBeginning(util.DoubleListNode)",
            "leetcode.FindAllNumbersDisappearedInArray::findDisappearedNumbers(int[])",
            "hackerrank.algorithms.implementation.RepeatedString::repeatedString(java.lang.String, long)",
            "leetcode.IslandPerimeter::islandPerimeter(int[][])",
            "hackerrank.datastructures.stacks.EqualStacks::equalStacks(int[], int[], int[])",
            "leetcode.AsciiDistance::main(java.lang.String[])",
            "leetcode.NumberOfIslands::numIslands(char[][])",
            "leetcode.medium.SwapForLongestRepeatedCharacterSubstring::main(java.lang.String[])",
            "leetcode.medium.AddTwoNumbers::addTwoNumbers(util.ListNode, util.ListNode)",
            "util.DoubleListNode::main(java.lang.String[])",
            "hackerrank.algorithms.strings.TwoStrings::twoStrings(java.lang.String, java.lang.String)",
            "leetcode.easy.PascalTriangleII::getRow(int)",
            "util.CountingSort::countingSort(int[])",
            "leetcode.easy.BackspaceStringCompare::getActual(java.lang.String)",
            "leetcode.easy.TwoSum::twoSumHashing(int[], int)",
            "leetcode.medium.DailyTemperatures::dailyTemperatures(int[])",
            "leetcode.medium.LongestCommonSubsequence::longestCommonSubsequence(java.lang.String, java.lang.String)",
            "leetcode.medium.MergeIntervals::merge(int[][])",
            "leetcode.medium.MaximumBinaryTree::build(int[], int, int)",
            "hackerrank.algorithms.sorting.InsertionSortPartOne::main(java.lang.String[])"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.1,
        "entryPoints": [
            "leetcode.DiameterOfBinaryTree::depth(util.TreeNode)",
            "util.TreeNode::preOrderTraversal(util.TreeNode)",
            "leetcode.NumberOfLinesToWriteString::main(java.lang.String[])",
            "leetcode.medium.LongestCommonSubsequence::longestCommonSubsequence(java.lang.String, java.lang.String)",
            "leetcode.medium.Subsets::backtrack(java.util.List, java.util.List, int[], int)",
            "util.MergeSort::merge(int[], int[], int[], int, int)",
            "leetcode.ZombieClusters::DFS(int[][], int, boolean[], int)",
            "leetcode.medium.SubsetsII::subsetsWithDup(int[])",
            "leetcode.medium.SubArraySumDivisibleByK::main(java.lang.String[])",
            "util.QuickSort::findPartition(int[], int, int)",
            "leetcode.ZombieClusters::zombieClusterDFS(java.lang.String[])",
            "leetcode.medium.LRUCache::addToHead(leetcode.DoubleListNode)",
            "util.TreeNode::levelOrderTraversal(util.TreeNode)",
            "leetcode.AddTwoNumbers::addTwoNumbers(util.ListNode, util.ListNode)",
            "hackerrank.algorithms.strings.TwoStrings::twoStrings(java.lang.String, java.lang.String)",
            "leetcode.AddDigits::addDigits(int)",
            "leetcode.easy.PascalTriangleII::getRow(int)",
            "leetcode.easy.SortingTheSentence::sortSentence(java.lang.String)",
            "leetcode.easy.SearchInsertPosition::searchInsert(int[], int)",
            "leetcode.medium.HouseRobberII::rob(int[])",
            "util.ReadFromFile::linearSearchAlgorithm1(int[], int)",
            "hackerrank.projecteuler.Problem1::main(java.lang.String[])",
            "leetcode.easy.TwoSum::twoSumHashing(int[], int)",
            "hackerrank.datastructures.stacks.EqualStacks::equalStacks(int[], int[], int[])",
            "util.TreeNode::main(java.lang.String[])",
            "util.DoubleListNode::traverseFromBeginning(util.DoubleListNode)",
            "leetcode.CopyListWithRandomPointer::main(java.lang.String[])",
            "leetcode.medium.LowestCommonAncestorOfBinaryTree::lowestCommonAncestor(util.TreeNode, util.TreeNode, util.TreeNode)",
            "leetcode.medium.PartitionLabels::partitionLabels(java.lang.String)",
            "leetcode.NumberOfLinesToWriteString::numberOfLines(int[], java.lang.String)",
            "leetcode.medium.Triangle::minimumTotal(java.util.List)",
            "leetcode.medium.GenerateParantheses::generateParenthesis(int)",
            "leetcode.LeafSimilar::traverse(java.util.List, util.TreeNode)",
            "leetcode.medium.SearchA2DMatrixII::searchMatrix(int[][], int)",
            "codility.painless.OddOccurencesInAnArray::solution(int[])",
            "util.WriteToFile::getPayload(int, java.lang.String)",
            "leetcode.easy.ConvertBstToGreaterTree::inorder(util.TreeNode, java.util.List)",
            "leetcode.MissingNumber::missingNumber(int[])",
            "leetcode.medium.TopKFrequentWords::topKFrequent(java.lang.String[], int)",
            "leetcode.AverageOfLevelsInBinaryTree::averageOfLevels(util.TreeNode)",
            "leetcode.hard.MinimumWindowSubstring::minWindow(java.lang.String, java.lang.String)",
            "hackerrank.algorithms.search.Pairs::pairs(int, int[])",
            "util.DoubleListNode::deleteAtPosition(util.DoubleListNode, int)",
            "hackerrank.algorithms.strings.TwoStrings::twoStringsMethodTwo(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "RandomStrategy",
        "topK": 0.2,
        "entryPoints": [
            "leetcode.medium.SortColors::sortColors(int[])",
            "leetcode.StringCompression::main(java.lang.String[])",
            "leetcode.MovingAverage::<init>(int)",
            "hackerrank.datastructures.linkedlists.ReverseALinkedList::reverseWithoutExtraSpace(util.ListNode)",
            "leetcode.easy.ShuffleString::restoreString(java.lang.String, int[])",
            "leetcode.medium.SearchA2DMatrix::binarySearchOverRow(int, int[][], int)",
            "util.QuickSort::swap(int[], int, int)",
            "leetcode.MinStack::push(int)",
            "leetcode.medium.SearchA2DMatrixII::main(java.lang.String[])",
            "leetcode.easy.ReorderDataInLogFiles::reorderLogFiles(java.lang.String[])",
            "leetcode.medium.MaximumProductSubarray::maxProduct(int[])",
            "leetcode.hard.TrappingRainWater::trap(int[])",
            "leetcode.BinaryTreeRightSIdeView::main(java.lang.String[])",
            "leetcode.medium.ThreeSum::threeSum(int[])",
            "hackerrank.datastructures.arrays.LeftRotation::reverse(int[], int, int)",
            "leetcode.NumberOfIslands::explore(char[][], int, int)",
            "leetcode.hard.MergeKSortedLists::mergeTwoLists(util.ListNode, util.ListNode)",
            "leetcode.easy.JewelsAndStones::numJewelsInStones(java.lang.String, java.lang.String)",
            "leetcode.medium.CompareVersionNumbers::compareVersion(java.lang.String, java.lang.String)",
            "leetcode.ReverseString::reverseString(java.lang.String)",
            "util.DoubleListNode::<init>(int)",
            "leetcode.medium.Subsets::subsets(int[])",
            "leetcode.medium.GroupAnagrams::getFrequencyString(java.lang.String)",
            "leetcode.easy.ConvertBstToGreaterTree::convertBST(util.TreeNode)",
            "leetcode.medium.LRUCache::<init>(int)",
            "leetcode.easy.RotateArray::reverse(int[], int, int)",
            "leetcode.easy.BackspaceStringCompare::backspaceCompare(java.lang.String, java.lang.String)",
            "util.LinearSearch::sortedLinearSearch(int[], int)",
            "hackerrank.algorithms.strings.SuperReducedString::superReducedString(java.lang.String)",
            "leetcode.medium.AddTwoNumbersII::addTwoNumbers(util.ListNode, util.ListNode)",
            "leetcode.RomanToInteger::romanToInt(java.lang.String)",
            "leetcode.ThreeSum::threeSum(int[])",
            "hackerrank.algorithms.implementation.RepeatedString::repeatedString(java.lang.String, long)",
            "leetcode.medium.SearchInRotatedSortedArray::modifiedBinarySearch(int[], int, int, int)",
            "leetcode.BinaryTreeInOrderTraversal::inorderTraversal(util.TreeNode)",
            "leetcode.medium.TicTacToe::<init>(int)",
            "leetcode.RandomizedSet::getRandom()",
            "leetcode.MaxAreaOfIsland::main(java.lang.String[])",
            "leetcode.easy.FindWordsThatCanBeFormedByCharacters::countCharacters(java.lang.String[], java.lang.String)",
            "leetcode.easy.LongestCommonPrefix::longestCommonPrefix(java.lang.String[])",
            "leetcode.medium.Tuple::<init>(int, boolean)",
            "util.ReadFromFile::main(java.lang.String[])",
            "leetcode.BinaryNumberWithAlternatingBits::hasAlternatingBits(int)",
            "leetcode.easy.TwoSum::twoSumBruteForce(int[], int)",
            "leetcode.ValidParantheses::isValid(java.lang.String)",
            "leetcode.FloodFill::main(java.lang.String[])",
            "leetcode.hard.LongestValidParentheses::longestValidParentheses(java.lang.String)",
            "leetcode.medium.HouseRobberII::robHelper(int[])",
            "leetcode.easy.NumberOf1Bits::hammingWeight(int)",
            "util.ReadFromFile::binarySearchAlgorithm2(int[], int)",
            "leetcode.easy.BestTimeToBuyAndSellAStock::maxProfit(int[])",
            "leetcode.easy.LengthOfLastWord::lengthOfLastWord(java.lang.String)",
            "leetcode.LetterCombinations::combine(java.lang.String, java.util.List)",
            "hackerrank.datastructures.stacks.BalancedBrackets::isBalanced(java.lang.String)",
            "leetcode.medium.SwapNodesInPairs::swapPairs(util.ListNode)",
            "leetcode.medium.LongestPalindromicSubstring::longestPalindrome(java.lang.String)",
            "util.DoubleListNode::insertAtBeginning(util.DoubleListNode, int)",
            "leetcode.FizzBuzz::fizzBuzz(int)",
            "leetcode.DiameterOfBinaryTree::diameterOfBinaryTree(util.TreeNode)",
            "leetcode.MergeTwoSortedLists::mergeTwoLists(util.ListNode, util.ListNode)",
            "leetcode.easy.FindAllNumbersDisappearedInAnArray::findDisappearedNumbers(int[])",
            "hackerrank.projecteuler.Problem7::main(java.lang.String[])",
            "util.BucketSort::bucketSort(int[], int)",
            "leetcode.medium.HouseRobberIII::travel(util.TreeNode)",
            "hackerrank.projecteuler.Problem2::solve(long)",
            "leetcode.IslandPerimeter::islandPerimeter(int[][])",
            "hackerrank.datastructures.linkedlists.CycleDetection::getIntersectNode(util.ListNode)",
            "leetcode.easy.RemoveLinkedListElements::removeElements(util.ListNode, int)",
            "leetcode.MaximumSumTwoNonOverlappingSubarrays::maxSumTwoNoOverlap(int[], int, int)",
            "leetcode.medium.TicTacToe::move(int, int, int)",
            "leetcode.easy.IntersectionOfTwoArraysII::intersect(int[], int[])",
            "hackerrank.expedia.Braces::isValid(java.lang.String)",
            "hackerrank.algorithms.implementation.BetweenTwoSets::getLCM(int, int)",
            "leetcode.FloodFill::fill(int[][], int, int, int, int)",
            "leetcode.medium.TopKFrequentWords::topKFrequent(java.lang.String[], int)",
            "leetcode.hard.SerializeAndDeserializeABinaryTree::serialize(util.TreeNode)",
            "leetcode.medium.FirstAndLastPositionOfElementInSortedArray::findLeftBound(int[], int)",
            "util.DoubleListNode::deleteFromBeginning(util.DoubleListNode)",
            "leetcode.MaxAreaOfIsland::floodFill(int[][], int, int, int, int)",
            "leetcode.hard.SlidingWindowMaximum::maxSlidingWindow(int[], int)",
            "util.ListNode::insertAtBeginning(util.ListNode, int)",
            "leetcode.CopyListWithRandomPointer::copyRandomList(leetcode.Node)",
            "leetcode.easy.BackspaceStringCompare::getActual(java.lang.String)",
            "leetcode.medium.SubsetsII::backtrack(java.util.List, java.util.List, int[], int)",
            "leetcode.hard.MergeKSortedLists::mergeKLists(util.ListNode[])",
            "leetcode.TrimABinarySearchTree::trimBST(util.TreeNode, int, int)",
            "codility.painless.CroppedMessage::solution(java.lang.String, int)",
            "leetcode.ZombieClusters::zombieClusterDFS(java.lang.String[])"
        ]
    }
]