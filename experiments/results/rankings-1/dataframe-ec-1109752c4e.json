[
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ExceptionFactory::exception(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::lambda.processBuiltInFunction.fd27f10d.1(io.github.vmzakharov.ecdataframe.dsl.Expression)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfIndexKeeper::computeKeyFrom(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsLongAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfTuple::compareMindingNulls(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::initializeValue(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.StringValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectByMarkValue(org.eclipse.collections.api.block.predicate.primitive.IntPredicate, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnComputed::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsDoubleAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::unEscape(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateTimeColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfStringColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnAbstract::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDecimalColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDecimal(java.lang.String, int)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.3269c427.1(int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDecimalColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDecimal(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.1(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.join.bbb68325.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, org.eclipse.collections.api.list.ListIterable, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectNotFlagged()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.2(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.AliasExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.3269c427.1(int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.sortBy.0(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfTuple, io.github.vmzakharov.ecdataframe.dataframe.DfTuple)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.1(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.2(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.VarExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectFlagged()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDecimal(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDecimalColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ExceptionFactory::exception(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::lambda.processBuiltInFunction.fd27f10d.1(io.github.vmzakharov.ecdataframe.dsl.Expression)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfIndexKeeper::computeKeyFrom(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsLongAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfTuple::compareMindingNulls(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::initializeValue(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.StringValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectByMarkValue(org.eclipse.collections.api.block.predicate.primitive.IntPredicate, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnComputed::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsDoubleAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::unEscape(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateTimeColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfStringColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnAbstract::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(java.lang.String, int)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.3269c427.1(int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.1(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.join.bbb68325.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, org.eclipse.collections.api.list.ListIterable, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectNotFlagged()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.2(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.AliasExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.3269c427.1(int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.sortBy.0(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfTuple, io.github.vmzakharov.ecdataframe.dataframe.DfTuple)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.1(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.2(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.VarExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectNotFlagged()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ExceptionFactory::exception(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::lambda.processBuiltInFunction.fd27f10d.1(io.github.vmzakharov.ecdataframe.dsl.Expression)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfIndexKeeper::computeKeyFrom(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsLongAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfTuple::compareMindingNulls(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::initializeValue(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.StringValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectByMarkValue(org.eclipse.collections.api.block.predicate.primitive.IntPredicate, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnComputed::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsDoubleAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::unEscape(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateTimeColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfStringColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnAbstract::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDouble(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValueAsString(int, int)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.3269c427.1(int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDouble(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValueAsString(int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.1(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.join.bbb68325.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, org.eclipse.collections.api.list.ListIterable, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectNotFlagged()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.2(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.AliasExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.3269c427.1(int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.sortBy.0(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfTuple, io.github.vmzakharov.ecdataframe.dataframe.DfTuple)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.1(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.2(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.VarExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectNotFlagged()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValueAsString(int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getDouble(java.lang.String, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ExceptionFactory::exception(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::lambda.processBuiltInFunction.fd27f10d.1(io.github.vmzakharov.ecdataframe.dsl.Expression)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumByWithIndex(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.loadAsDataFrame.777be636.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.util.ConfigureMessages::initialize()",
            "io.github.vmzakharov.ecdataframe.dsl.function.BuiltInFunctions::resetFunctionList()",
            "io.github.vmzakharov.ecdataframe.dataset.DoubleFormatter::<init>(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::getGetters(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.InMemoryEvaluationVisitor::visitFunctionCallExpr(io.github.vmzakharov.ecdataframe.dsl.FunctionCallExpr)",
            "io.github.vmzakharov.ecdataframe.dataframe.compare.LongComparisonResult::<init>(java.util.function.LongSupplier, java.util.function.LongSupplier, boolean, boolean)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::writeValue(java.io.Writer, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::<init>(io.github.vmzakharov.ecdataframe.dataset.CsvSchema, java.lang.String, io.github.vmzakharov.ecdataframe.dsl.value.ValueType, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.visitor.TypeInferenceVisitor::visitUnaryExpr(io.github.vmzakharov.ecdataframe.dsl.UnaryExpr)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::resolveValueType(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Avg::finishAggregating(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[])",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int, boolean)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnStored::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::stripQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::attachColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lookup(io.github.vmzakharov.ecdataframe.dataframe.DfJoin)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::cloneSchemaAndAttachTo(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToObjectColumn(io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumn::aggregate(io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::throwAddingIncompatibleValueException(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnAbstract::validateAndCreateTargetColumn(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.AbstractValue::checkSameTypeForComparison(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumnSortOrder)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateTimeValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DateValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dsl.value.DecimalValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToLongColumn(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.aggregation.Same::applyToDoubleColumn(io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfIndexKeeper::computeKeyFrom(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsLongAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfTuple::compareMindingNulls(java.lang.Object, java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction::initializeValue(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.StringValue::compareTo(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectByMarkValue(org.eclipse.collections.api.block.predicate.primitive.IntPredicate, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfColumnComputed::applyAggregator(int, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn::parseAsDoubleAndAdd(java.lang.String, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptTreeBuilderVisitor::unEscape(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDateTimeColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDecimalColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfStringColumnStored::addValue(io.github.vmzakharov.ecdataframe.dsl.value.Value)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfDoubleColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumnStored::getValue(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfObjectColumnAbstract::mergeWithInto(io.github.vmzakharov.ecdataframe.dataframe.DfColumn, io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getAggregateIndex(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDecimalColumn(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.3269c427.1(int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getAggregateIndex(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDecimalColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.1(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.join.bbb68325.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, org.eclipse.collections.api.list.ListIterable, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectFlagged()",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.2(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.AliasExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sumBy(org.eclipse.collections.api.list.ListIterable, org.eclipse.collections.api.list.ListIterable)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::loadAsDataFrame(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregate.c85fe9ea.1(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::match(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::columnComparator(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.addRow.1ceab63e.1(io.github.vmzakharov.ecdataframe.dsl.value.Value, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::select(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dsl.value.Value::compareTo(java.lang.Object)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.union.7468cd43.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.3269c427.1(int, io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::removeSurroundingQuotes(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getAggregateIndex(int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::getValue(int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::outerJoin(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::write(io.github.vmzakharov.ecdataframe.dataframe.DataFrame)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.sortBy.0(org.eclipse.collections.api.list.ListIterable, io.github.vmzakharov.ecdataframe.dataframe.DfTuple, io.github.vmzakharov.ecdataframe.dataframe.DfTuple)",
            "io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn::lambda.columnComparator.2(io.github.vmzakharov.ecdataframe.dataframe.DfLongColumn, int, int)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.1(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::lambda.addDataFrameColumn.f0b43f44.2(io.github.vmzakharov.ecdataframe.dataset.CsvSchemaColumn, io.github.vmzakharov.ecdataframe.dataframe.DfColumn, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataset.CsvDataSet::inferSchema()",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.VarExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.cloneStructure.c49d432f.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, io.github.vmzakharov.ecdataframe.dataframe.DfColumn)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::join(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::lambda.aggregateByWithIndex.4ad5fcbd.1(io.github.vmzakharov.ecdataframe.dataframe.DataFrame, int[], io.github.vmzakharov.ecdataframe.dataframe.AggregateFunction)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::selectNotFlagged()",
            "io.github.vmzakharov.ecdataframe.dataframe.DfJoin::resolveLookup()",
            "io.github.vmzakharov.ecdataframe.dataset.ObjectListDataSet::lambda.getFieldType.ddeafad2.1(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::partition(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.grammar.ModelScriptParser.StringLiteralExprContext::accept(org.antlr.v4.runtime.tree.ParseTreeVisitor)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::flagRowsBy(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::addDecimalColumn(java.lang.String, java.lang.String)",
            "io.github.vmzakharov.ecdataframe.dataframe.DataFrame::sortByExpression(java.lang.String)",
            "io.github.vmzakharov.ecdataframe.util.ExpressionParserHelper::toProjection(java.lang.String)"
        ]
    }
]