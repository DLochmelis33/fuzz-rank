[
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.TimeUtil::printDuration(long)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.TimeUtil::printDuration(long)",
            "net.revelc.code.formatter.FormatterMojo::readFileAsString(java.io.File)",
            "net.revelc.code.formatter.xml.XMLFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.FormatterMojo::addCollectionFiles(org.apache.maven.model.Resource)",
            "net.revelc.code.formatter.json.JsonFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.FormatterMojo::createCodeFormatter()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.TimeUtil::printDuration(long)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.TimeUtil::printDuration(long)",
            "net.revelc.code.formatter.FormatterMojo::readFileAsString(java.io.File)",
            "net.revelc.code.formatter.xml.XMLFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.FormatterMojo::addCollectionFiles(org.apache.maven.model.Resource)",
            "net.revelc.code.formatter.json.JsonFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.FormatterMojo::createCodeFormatter()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.TimeUtil::printDuration(long)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.TimeUtil::printDuration(long)",
            "net.revelc.code.formatter.FormatterMojo::readFileAsString(java.io.File)",
            "net.revelc.code.formatter.xml.XMLFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.FormatterMojo::addCollectionFiles(org.apache.maven.model.Resource)",
            "net.revelc.code.formatter.json.JsonFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.FormatterMojo::createCodeFormatter()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.TimeUtil::printDuration(long)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.model.ConfigReader::read(java.io.InputStream)",
            "net.revelc.code.formatter.java.JavaFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.TimeUtil::printDuration(long)",
            "net.revelc.code.formatter.FormatterMojo::readFileAsString(java.io.File)",
            "net.revelc.code.formatter.xml.XMLFormatter::init(java.util.Map, net.revelc.code.formatter.ConfigurationSource)",
            "net.revelc.code.formatter.jsoup.JsoupBasedFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.FormatterMojo::addCollectionFiles(org.apache.maven.model.Resource)",
            "net.revelc.code.formatter.json.JsonFormatter::doFormat(java.lang.String, net.revelc.code.formatter.LineEnding)",
            "net.revelc.code.formatter.FormatterMojo::createCodeFormatter()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "net.revelc.code.formatter.ValidateMojo::execute()"
        ]
    }
]