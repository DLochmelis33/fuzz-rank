[
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.dtbook.DTBookHandler::startElement()",
            "com.adobe.epubcheck.ocf.OCFEncryptionFileHandler::startElement()",
            "com.adobe.epubcheck.tool.EpubChecker::printEpubCheckCompleted(com.adobe.epubcheck.api.Report)",
            "com.adobe.epubcheck.tool.EpubChecker::run(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::getSHAHash(java.util.zip.ZipEntry, java.util.zip.ZipFile)",
            "com.adobe.epubcheck.ops.OPSHandler30::isPalpable()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.dtbook.DTBookHandler::startElement()",
            "com.adobe.epubcheck.ocf.OCFEncryptionFileHandler::startElement()",
            "com.adobe.epubcheck.tool.EpubChecker::printEpubCheckCompleted(com.adobe.epubcheck.api.Report)",
            "com.adobe.epubcheck.tool.EpubChecker::run(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::getSHAHash(java.util.zip.ZipEntry, java.util.zip.ZipFile)",
            "com.adobe.epubcheck.ops.OPSHandler30::isPalpable()",
            "com.adobe.epubcheck.util.DateParserTest::testisISO8601Date()",
            "com.adobe.epubcheck.ocf.OCFContainerFileHandler::processRootFile()",
            "com.adobe.epubcheck.overlay.OverlayHandler::checkTime(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.overlay.SmilClock::toString(int)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "com.adobe.epubcheck.nav.NavHandler::startElement()",
            "com.adobe.epubcheck.overlay.OverlayHandler::startElement()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(com.adobe.epubcheck.api.EPUBLocation)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolveUri(com.thaiopensource.resolver.Identifier)",
            "com.thaiopensource.util.Localizer::getBundle()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.util.DateParserTest::main(java.lang.String[])",
            "com.adobe.epubcheck.overlay.SmilClock::toString()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolve(com.thaiopensource.resolver.Identifier, com.thaiopensource.resolver.Input)",
            "com.thaiopensource.util.Localizer::message(java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.util.DateParserTest::main(java.lang.String[])",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolve(com.thaiopensource.resolver.Identifier, com.thaiopensource.resolver.Input)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.thaiopensource.util.Localizer::message(java.lang.String, java.lang.Object[])",
            "com.adobe.epubcheck.overlay.SmilClock::toString()",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.dtbook.DTBookHandler::startElement()",
            "com.adobe.epubcheck.ocf.OCFEncryptionFileHandler::startElement()",
            "com.adobe.epubcheck.tool.EpubChecker::printEpubCheckCompleted(com.adobe.epubcheck.api.Report)",
            "com.adobe.epubcheck.tool.EpubChecker::run(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::getSHAHash(java.util.zip.ZipEntry, java.util.zip.ZipFile)",
            "com.adobe.epubcheck.ops.OPSHandler30::isPalpable()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.dtbook.DTBookHandler::startElement()",
            "com.adobe.epubcheck.ocf.OCFEncryptionFileHandler::startElement()",
            "com.adobe.epubcheck.tool.EpubChecker::printEpubCheckCompleted(com.adobe.epubcheck.api.Report)",
            "com.adobe.epubcheck.tool.EpubChecker::run(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::getSHAHash(java.util.zip.ZipEntry, java.util.zip.ZipFile)",
            "com.adobe.epubcheck.ops.OPSHandler30::isPalpable()",
            "com.adobe.epubcheck.util.DateParserTest::testisISO8601Date()",
            "com.adobe.epubcheck.ocf.OCFContainerFileHandler::processRootFile()",
            "com.adobe.epubcheck.overlay.OverlayHandler::checkTime(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.overlay.SmilClock::toString(int)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "com.adobe.epubcheck.nav.NavHandler::startElement()",
            "com.adobe.epubcheck.overlay.OverlayHandler::startElement()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(com.adobe.epubcheck.api.EPUBLocation)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolveUri(com.thaiopensource.resolver.Identifier)",
            "com.thaiopensource.util.Localizer::getBundle()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.util.DateParserTest::main(java.lang.String[])",
            "com.adobe.epubcheck.overlay.SmilClock::toString()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolve(com.thaiopensource.resolver.Identifier, com.thaiopensource.resolver.Input)",
            "com.thaiopensource.util.Localizer::message(java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.util.DateParserTest::main(java.lang.String[])",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolve(com.thaiopensource.resolver.Identifier, com.thaiopensource.resolver.Input)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.thaiopensource.util.Localizer::message(java.lang.String, java.lang.Object, java.lang.Object)",
            "com.adobe.epubcheck.overlay.SmilClock::toString()",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.dtbook.DTBookHandler::startElement()",
            "com.adobe.epubcheck.ocf.OCFEncryptionFileHandler::startElement()",
            "com.adobe.epubcheck.tool.EpubChecker::printEpubCheckCompleted(com.adobe.epubcheck.api.Report)",
            "com.adobe.epubcheck.tool.EpubChecker::run(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::getSHAHash(java.util.zip.ZipEntry, java.util.zip.ZipFile)",
            "com.adobe.epubcheck.ops.OPSHandler30::isPalpable()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.dtbook.DTBookHandler::startElement()",
            "com.adobe.epubcheck.ocf.OCFEncryptionFileHandler::startElement()",
            "com.adobe.epubcheck.tool.EpubChecker::printEpubCheckCompleted(com.adobe.epubcheck.api.Report)",
            "com.adobe.epubcheck.tool.EpubChecker::run(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::getSHAHash(java.util.zip.ZipEntry, java.util.zip.ZipFile)",
            "com.adobe.epubcheck.ops.OPSHandler30::isPalpable()",
            "com.adobe.epubcheck.util.DateParserTest::testisISO8601Date()",
            "com.adobe.epubcheck.ocf.OCFContainerFileHandler::processRootFile()",
            "com.adobe.epubcheck.overlay.OverlayHandler::checkTime(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.overlay.SmilClock::toString(int)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "com.adobe.epubcheck.nav.NavHandler::startElement()",
            "com.adobe.epubcheck.overlay.OverlayHandler::startElement()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(com.adobe.epubcheck.api.EPUBLocation)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolveUri(com.thaiopensource.resolver.Identifier)",
            "com.thaiopensource.util.Localizer::getBundle()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.util.DateParserTest::main(java.lang.String[])",
            "com.adobe.epubcheck.overlay.SmilClock::toString()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolve(com.thaiopensource.resolver.Identifier, com.thaiopensource.resolver.Input)",
            "com.thaiopensource.util.Localizer::message(java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.util.DateParserTest::main(java.lang.String[])",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolve(com.thaiopensource.resolver.Identifier, com.thaiopensource.resolver.Input)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.thaiopensource.util.Localizer::message(java.lang.String)",
            "com.adobe.epubcheck.overlay.SmilClock::toString()",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.dtbook.DTBookHandler::startElement()",
            "com.adobe.epubcheck.ocf.OCFEncryptionFileHandler::startElement()",
            "com.adobe.epubcheck.tool.EpubChecker::printEpubCheckCompleted(com.adobe.epubcheck.api.Report)",
            "com.adobe.epubcheck.tool.EpubChecker::run(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::getSHAHash(java.util.zip.ZipEntry, java.util.zip.ZipFile)",
            "com.adobe.epubcheck.ops.OPSHandler30::isPalpable()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.messages.DefaultSeverities::initialize()",
            "org.idpf.epubcheck.util.css.CssGrammar.CssSelectorConstructFactory::createSimpleSelector(org.idpf.epubcheck.util.css.CssToken, org.idpf.epubcheck.util.css.CssTokenList.CssTokenIterator, org.idpf.epubcheck.util.css.CssErrorHandler)",
            "com.adobe.epubcheck.opf.OPFItem::equals(java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(com.adobe.epubcheck.reporting.CheckMessage)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFChecker::checkDeclaredPackageDocuments(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.ncx.NCXHandler::startElement()",
            "com.adobe.epubcheck.overlay.SmilClock::<init>(java.lang.String)",
            "org.idpf.epubcheck.util.css.CssScanner::_uri()",
            "org.idpf.epubcheck.util.css.CssScanner::equals(int[], int[], boolean)",
            "com.adobe.epubcheck.opf.OPFHandler30::startElement()",
            "com.adobe.epubcheck.opf.OPFChecker::checkItem(com.adobe.epubcheck.opf.OPFItem, com.adobe.epubcheck.opf.OPFHandler)",
            "org.idpf.epubcheck.util.css.CssEscape::create()",
            "org.w3c.epubcheck.core.references.ResourceReferencesChecker::checkReferenceType(org.w3c.epubcheck.core.references.Reference, org.w3c.epubcheck.core.references.Resource, org.w3c.epubcheck.util.url.URLFragment)",
            "com.adobe.epubcheck.opf.OPFHandler30::endElement()",
            "com.adobe.epubcheck.ops.OPSHandler30::checkImage(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.OPFChecker::checkContent()",
            "com.adobe.epubcheck.ops.OPSHandler30::endElement()",
            "com.adobe.epubcheck.ocf.OCFChecker::checkMimetypeFile(com.adobe.epubcheck.ocf.OCFCheckerState)",
            "com.adobe.epubcheck.tool.EpubChecker::validateFile(java.lang.String, com.adobe.epubcheck.util.EPUBVersion, com.adobe.epubcheck.api.Report, com.adobe.epubcheck.api.EPUBProfile)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::preprocessAttributes(java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ops.OPSHandler30::startElement()",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::handleDocTypeUserInfo(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.util.Archive::createArchive()",
            "com.adobe.epubcheck.util.XmpReportImpl::generateReport()",
            "com.adobe.epubcheck.tool.EpubChecker::processArguments(java.lang.String[])",
            "com.adobe.epubcheck.util.XmlReportImpl::generateReport()",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::processPackage(org.xml.sax.Attributes)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.dtbook.DTBookHandler::startElement()",
            "com.adobe.epubcheck.ocf.OCFEncryptionFileHandler::startElement()",
            "com.adobe.epubcheck.tool.EpubChecker::printEpubCheckCompleted(com.adobe.epubcheck.api.Report)",
            "com.adobe.epubcheck.tool.EpubChecker::run(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::getSHAHash(java.util.zip.ZipEntry, java.util.zip.ZipFile)",
            "com.adobe.epubcheck.ops.OPSHandler30::isPalpable()",
            "com.adobe.epubcheck.util.DateParserTest::testisISO8601Date()",
            "com.adobe.epubcheck.ocf.OCFContainerFileHandler::processRootFile()",
            "com.adobe.epubcheck.overlay.OverlayHandler::checkTime(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.overlay.SmilClock::toString(int)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "com.adobe.epubcheck.nav.NavHandler::startElement()",
            "com.adobe.epubcheck.overlay.OverlayHandler::startElement()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(com.adobe.epubcheck.api.EPUBLocation)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolveUri(com.thaiopensource.resolver.Identifier)",
            "com.thaiopensource.util.Localizer::getBundle()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.tool.Checker::main(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.util.DateParserTest::main(java.lang.String[])",
            "com.adobe.epubcheck.overlay.SmilClock::toString()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolve(com.thaiopensource.resolver.Identifier, com.thaiopensource.resolver.Input)",
            "com.thaiopensource.util.Localizer::message(java.lang.String, java.lang.Object, java.lang.Object)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "com.adobe.epubcheck.tool.EpubChecker::processEpubFile(java.lang.String[])",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.xml.handlers.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.opf.MetadataSet.Metadata::equals(java.lang.Object)",
            "org.w3c.epubcheck.util.url.URLFragment::equals(java.lang.Object)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.ocf.OCFZipResources::iterator()",
            "com.adobe.epubcheck.api.EPUBLocation::compareTo(java.lang.Object)",
            "com.adobe.epubcheck.xml.handlers.DeclarationHandler::startDTD(java.lang.String, java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.xml.handlers.PreprocessingDefaultHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "com.adobe.epubcheck.util.DateParserTest::main(java.lang.String[])",
            "com.adobe.epubcheck.ops.OPSHandler30::lambda.updatePalpableState.3(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.reporting.CheckMessage::compareTo(java.lang.Object)",
            "org.idpf.epubcheck.util.saxon.SaxonSchemaReaderFactory::initTransformerFactory(javax.xml.transform.TransformerFactory)",
            "com.adobe.epubcheck.xml.handlers.ReportingErrorHandler::error(org.xml.sax.SAXParseException)",
            "com.adobe.epubcheck.xml.XMLValidator.BasicResolver::resolve(com.thaiopensource.resolver.Identifier, com.thaiopensource.resolver.Input)",
            "com.adobe.epubcheck.ocf.PackageDocumentPeekerHandler::endElement(java.lang.String, java.lang.String, java.lang.String)",
            "com.thaiopensource.util.Localizer::message(java.lang.String, java.lang.Object)",
            "com.adobe.epubcheck.overlay.SmilClock::toString()",
            "com.adobe.epubcheck.xml.handlers.DefaultResolver::resolveEntity(java.lang.String, java.lang.String)",
            "com.adobe.epubcheck.ocf.OCFZipResources.1::next()"
        ]
    }
]