[
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.examples.HtmlToPlainText::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::relaxed()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.helper.HttpConnection::post()",
            "org.jsoup.safety.Safelist::relaxed()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::next(java.lang.String)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.select.Elements::prev(java.lang.String)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.nodes.FormElement::submit()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.safety.Safelist::basicWithImages()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.select.Elements::prev(java.lang.String)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Elements::nextAll(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Element::hasText()",
            "org.jsoup.select.Elements::childNodesOfType(java.lang.Class)",
            "org.jsoup.nodes.Node::addSiblingHtml(int, java.lang.String)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.select.Elements)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.nodes.Element::closest(org.jsoup.select.Evaluator)",
            "org.jsoup.safety.Cleaner::isValidBodyHtml(java.lang.String)",
            "org.jsoup.helper.DataUtil::load(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::toggleClass(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.nodes.Document::normaliseTextNodes(org.jsoup.nodes.Element)",
            "org.jsoup.helper.DataUtil::load(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.Validate::ensureNotNull(java.lang.Object, java.lang.String, java.lang.Object[])",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Element::append(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.Jsoup::isValid(java.lang.String, org.jsoup.safety.Safelist)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.select.Elements::next()",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.select.Elements::eachText()",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.select.Elements::textNodes()",
            "org.jsoup.select.Elements::filter(org.jsoup.select.NodeFilter)",
            "org.jsoup.nodes.Element::closest(java.lang.String)",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::expectFirst(java.lang.String)",
            "org.jsoup.select.Elements::append(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.Object, java.lang.Object)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Element::before(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.Jsoup::isValid(java.lang.String, org.jsoup.safety.Safelist)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.select.Elements::prevAll(java.lang.String)",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.Object, java.lang.Object)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.select.Elements::eachText()",
            "org.jsoup.select.Elements::filter(org.jsoup.select.NodeFilter)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::closest(java.lang.String)",
            "org.jsoup.nodes.Element::expectFirst(java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.select.Elements::append(java.lang.String)",
            "org.jsoup.nodes.Element::after(java.lang.String)",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::dataNodes()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.examples.HtmlToPlainText::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::relaxed()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.helper.HttpConnection::post()",
            "org.jsoup.safety.Safelist::relaxed()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::prev(java.lang.String)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.select.Elements::prevAll(java.lang.String)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.nodes.FormElement::submit()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.safety.Safelist::basicWithImages()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.select.Elements::prevAll(java.lang.String)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Elements::next(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Element::hasText()",
            "org.jsoup.select.Elements::childNodesOfType(java.lang.Class)",
            "org.jsoup.nodes.Node::addSiblingHtml(int, java.lang.String)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.select.Elements)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.nodes.Element::closest(org.jsoup.select.Evaluator)",
            "org.jsoup.safety.Cleaner::isValidBodyHtml(java.lang.String)",
            "org.jsoup.helper.DataUtil::load(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::toggleClass(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.nodes.Document::normaliseTextNodes(org.jsoup.nodes.Element)",
            "org.jsoup.helper.DataUtil::load(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.Validate::ensureNotNull(java.lang.Object, java.lang.String, java.lang.Object[])",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Element::append(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.Jsoup::isValid(java.lang.String, org.jsoup.safety.Safelist)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.select.Elements::nextAll(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.select.Elements::eachText()",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.select.Elements::dataNodes()",
            "org.jsoup.select.Elements::filter(org.jsoup.select.NodeFilter)",
            "org.jsoup.nodes.Element::closest(java.lang.String)",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::expectFirst(java.lang.String)",
            "org.jsoup.select.Elements::append(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.Object, java.lang.Object)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Element::after(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.Jsoup::isValid(java.lang.String, org.jsoup.safety.Safelist)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.select.Elements::nextAll(java.lang.String)",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.Object, java.lang.Object)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.select.Elements::eachText()",
            "org.jsoup.select.Elements::filter(org.jsoup.select.NodeFilter)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::closest(java.lang.String)",
            "org.jsoup.nodes.Element::expectFirst(java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.select.Elements::append(java.lang.String)",
            "org.jsoup.nodes.Element::before(java.lang.String)",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::dataNodes()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.examples.HtmlToPlainText::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::relaxed()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.helper.HttpConnection::post()",
            "org.jsoup.safety.Safelist::relaxed()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::next(java.lang.String)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.select.Elements::nextAll(java.lang.String)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.nodes.FormElement::submit()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.safety.Safelist::basicWithImages()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.select.Elements::prev()",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Elements::prev(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Element::hasText()",
            "org.jsoup.select.Elements::childNodesOfType(java.lang.Class)",
            "org.jsoup.nodes.Node::addSiblingHtml(int, java.lang.String)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.select.Elements)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.nodes.Element::closest(org.jsoup.select.Evaluator)",
            "org.jsoup.safety.Cleaner::isValidBodyHtml(java.lang.String)",
            "org.jsoup.helper.DataUtil::load(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::toggleClass(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Document::normaliseTextNodes(org.jsoup.nodes.Element)",
            "org.jsoup.helper.DataUtil::load(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.Validate::ensureNotNull(java.lang.Object, java.lang.String, java.lang.Object[])",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::append(java.lang.String)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.Jsoup::isValid(java.lang.String, org.jsoup.safety.Safelist)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.select.Elements::prev(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.select.Elements::eachText()",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.select.Elements::textNodes()",
            "org.jsoup.select.Elements::filter(org.jsoup.select.NodeFilter)",
            "org.jsoup.nodes.Element::closest(java.lang.String)",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::expectFirst(java.lang.String)",
            "org.jsoup.select.Elements::append(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.Object, java.lang.Object)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Element::before(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.Jsoup::isValid(java.lang.String, org.jsoup.safety.Safelist)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.select.Elements::prevAll(java.lang.String)",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.Object, java.lang.Object)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.select.Elements::eachText()",
            "org.jsoup.select.Elements::filter(org.jsoup.select.NodeFilter)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::closest(java.lang.String)",
            "org.jsoup.nodes.Element::expectFirst(java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.select.Elements::append(java.lang.String)",
            "org.jsoup.nodes.Element::before(java.lang.String)",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::dataNodes()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.examples.HtmlToPlainText::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::relaxed()"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "org.jsoup.helper.HttpConnection::post()",
            "org.jsoup.safety.Safelist::relaxed()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::prev(java.lang.String)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.select.Elements::next()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.nodes.FormElement::submit()"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.safety.Safelist::basicWithImages()"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.select.Elements::prevAll(java.lang.String)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Elements::next(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.parser.Tag::equals(java.lang.Object)",
            "org.jsoup.examples.HtmlToPlainText.FormattingVisitor::tail(org.jsoup.nodes.Node, int)",
            "org.jsoup.parser.CharacterReader::containsIgnoreCase(java.lang.String)",
            "org.jsoup.parser.HtmlTreeBuilder::insert(org.jsoup.parser.Token.StartTag)",
            "org.jsoup.nodes.Attributes::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::cssSelector()",
            "org.jsoup.helper.HttpConnection.Response::writePost(org.jsoup.Connection.Request, java.io.OutputStream, java.lang.String)",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::siblings(java.lang.String, boolean, boolean)",
            "org.jsoup.helper.HttpConnection.Base::looksLikeUtf8(byte[])",
            "org.jsoup.helper.HttpConnection.Response::processResponseHeaders(java.util.Map)",
            "org.jsoup.nodes.FormElement::formData()",
            "org.jsoup.parser.Tokeniser::consumeCharacterReference(java.lang.Character, boolean)",
            "org.jsoup.parser.HtmlTreeBuilder::parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.DataUtil::parseInputStream(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection.Response::execute(org.jsoup.helper.HttpConnection.Request, org.jsoup.helper.HttpConnection.Response)",
            "org.jsoup.safety.Safelist::basic()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document, java.util.Map)",
            "org.jsoup.parser.TokenQueue::consumeToIgnoreCase(java.lang.String)",
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Node::wrap(java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.W3CDom::fromJsoup(org.jsoup.nodes.Element)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.nodes.Document::normaliseStructure(java.lang.String, org.jsoup.nodes.Element)",
            "org.jsoup.select.Selector::select(java.lang.String, java.lang.Iterable)",
            "org.jsoup.nodes.Attribute::html(java.lang.String, java.lang.String, java.lang.Appendable, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.NodeUtils::selectXpath(java.lang.String, org.jsoup.nodes.Element, java.lang.Class)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.parser.Tokeniser::unescapeEntities(boolean)",
            "org.jsoup.select.Selector::filterOut(java.util.Collection, java.util.Collection)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.nodes.Element::hasText()",
            "org.jsoup.select.Elements::childNodesOfType(java.lang.Class)",
            "org.jsoup.nodes.Node::addSiblingHtml(int, java.lang.String)",
            "org.jsoup.select.NodeTraversor::filter(org.jsoup.select.NodeFilter, org.jsoup.select.Elements)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.nodes.Element::closest(org.jsoup.select.Evaluator)",
            "org.jsoup.safety.Cleaner::isValidBodyHtml(java.lang.String)",
            "org.jsoup.helper.DataUtil::load(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::toggleClass(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.nodes.Document::normaliseTextNodes(org.jsoup.nodes.Element)",
            "org.jsoup.helper.DataUtil::load(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.helper.Validate::ensureNotNull(java.lang.Object, java.lang.String, java.lang.Object[])",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Element::append(java.lang.String)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.Jsoup::isValid(java.lang.String, org.jsoup.safety.Safelist)",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.select.Elements::prev()",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)",
            "org.jsoup.select.Elements::eachText()",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.select.Elements::dataNodes()",
            "org.jsoup.select.Elements::filter(org.jsoup.select.NodeFilter)",
            "org.jsoup.nodes.Element::closest(java.lang.String)",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.nodes.Element::expectFirst(java.lang.String)",
            "org.jsoup.select.Elements::append(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.Object, java.lang.Object)",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.nodes.Element::after(java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "org.jsoup.examples.ListLinks::main(java.lang.String[])",
            "org.jsoup.nodes.Range::equals(java.lang.Object)",
            "org.jsoup.nodes.Element::selectXpath(java.lang.String, java.lang.Class)",
            "org.jsoup.safety.Safelist::basicWithImages()",
            "org.jsoup.parser.Tag::hashCode()",
            "org.jsoup.Jsoup::isValid(java.lang.String, org.jsoup.safety.Safelist)",
            "org.jsoup.safety.Safelist.TypedValue::equals(java.lang.Object)",
            "org.jsoup.nodes.Attribute::equals(java.lang.Object)",
            "org.jsoup.select.Elements::prev(java.lang.String)",
            "org.jsoup.select.Elements::not(java.lang.String)",
            "org.jsoup.nodes.Document::normalise()",
            "org.jsoup.Jsoup::parse(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.Jsoup::parse(java.io.File, java.lang.String, java.lang.String, org.jsoup.parser.Parser)",
            "org.jsoup.nodes.Attribute::setKey(java.lang.String)",
            "org.jsoup.select.Elements::toggleClass(java.lang.String)",
            "org.jsoup.nodes.Attributes.Dataset::put(java.lang.Object, java.lang.Object)",
            "org.jsoup.select.Evaluator.CssNthEvaluator::toString()",
            "org.jsoup.nodes.Element::forEach(org.jsoup.helper.Consumer)",
            "org.jsoup.select.Elements::eachText()",
            "org.jsoup.select.Elements::filter(org.jsoup.select.NodeFilter)",
            "org.jsoup.nodes.Element::getElementById(java.lang.String)",
            "org.jsoup.nodes.Element::closest(java.lang.String)",
            "org.jsoup.nodes.Element::expectFirst(java.lang.String)",
            "org.jsoup.nodes.Node::hasSameValue(java.lang.Object)",
            "org.jsoup.nodes.FormElement::submit()",
            "org.jsoup.nodes.Entities::getByName(java.lang.String)",
            "org.jsoup.Jsoup::clean(java.lang.String, java.lang.String, org.jsoup.safety.Safelist, org.jsoup.nodes.Document.OutputSettings)",
            "org.jsoup.nodes.Entities::escape(java.lang.String)",
            "org.jsoup.nodes.Attribute::toString()",
            "org.jsoup.nodes.Element::wrap(java.lang.String)",
            "org.jsoup.select.Elements::prepend(java.lang.String)",
            "org.jsoup.select.Elements::append(java.lang.String)",
            "org.jsoup.nodes.Element::after(java.lang.String)",
            "org.jsoup.nodes.Attribute::createFromEncoded(java.lang.String, java.lang.String)",
            "org.jsoup.parser.TokenQueue::chompToIgnoreCase(java.lang.String)",
            "org.jsoup.safety.Safelist::relaxed()",
            "org.jsoup.safety.Safelist::<init>(org.jsoup.safety.Safelist)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String)",
            "org.jsoup.helper.HttpConnection::data(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)",
            "org.jsoup.nodes.Element::lastElementChild()",
            "org.jsoup.nodes.Element::firstElementChild()",
            "org.jsoup.safety.Safelist::removeEnforcedAttribute(java.lang.String, java.lang.String)",
            "org.jsoup.safety.Safelist::removeProtocols(java.lang.String, java.lang.String, java.lang.String[])",
            "org.jsoup.select.Elements::textNodes()",
            "org.jsoup.safety.Safelist::removeAttributes(java.lang.String, java.lang.String[])",
            "org.jsoup.helper.W3CDom::asString(org.w3c.dom.Document)"
        ]
    }
]