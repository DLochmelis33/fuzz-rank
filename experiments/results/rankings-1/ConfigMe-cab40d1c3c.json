[
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.CombiningLeafValueHandler::lambda.convert.0(ch.jalu.configme.utils.TypeInformation, java.lang.Object, ch.jalu.configme.beanmapper.leafvaluehandler.LeafValueHandler)",
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)",
            "ch.jalu.configme.migration.version.VersionMigrationService::performMigrations(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Iterable)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getComments(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.migration.version.VersionMigrationService::validateAndGroupMigrationsByFromVersion(java.lang.Iterable)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::validateProperties(java.lang.Class, java.util.Collection)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::getPropertyField(java.lang.reflect.Field)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::add(ch.jalu.configme.properties.Property)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, ch.jalu.configme.migration.version.VersionMigration[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, ch.jalu.configme.migration.version.VersionMigration[])",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.CombiningLeafValueHandler::lambda.convert.0(ch.jalu.configme.utils.TypeInformation, java.lang.Object, ch.jalu.configme.beanmapper.leafvaluehandler.LeafValueHandler)",
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)",
            "ch.jalu.configme.migration.version.VersionMigrationService::performMigrations(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Iterable)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getComments(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::getPropertyField(java.lang.reflect.Field)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::validateProperties(java.lang.Class, java.util.Collection)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::setCommentForPropertyField(java.lang.reflect.Field, java.lang.String)",
            "ch.jalu.configme.migration.version.VersionMigrationService::validateAndGroupMigrationsByFromVersion(java.lang.Iterable)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, ch.jalu.configme.migration.version.VersionMigration[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, ch.jalu.configme.migration.version.VersionMigration[])",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.CombiningLeafValueHandler::lambda.convert.0(ch.jalu.configme.utils.TypeInformation, java.lang.Object, ch.jalu.configme.beanmapper.leafvaluehandler.LeafValueHandler)",
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)",
            "ch.jalu.configme.migration.version.VersionMigrationService::performMigrations(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Iterable)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getComments(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.migration.version.VersionMigrationService::validateAndGroupMigrationsByFromVersion(java.lang.Iterable)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::validateProperties(java.lang.Class, java.util.Collection)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::getPropertyField(java.lang.reflect.Field)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::add(ch.jalu.configme.properties.Property)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, ch.jalu.configme.migration.version.VersionMigration[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, ch.jalu.configme.migration.version.VersionMigration[])",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.01,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.CombiningLeafValueHandler::lambda.convert.0(ch.jalu.configme.utils.TypeInformation, java.lang.Object, ch.jalu.configme.beanmapper.leafvaluehandler.LeafValueHandler)",
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.05,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.Mapper::convertToBean(java.lang.Object, java.lang.Class, ch.jalu.configme.properties.convertresult.ConvertErrorRecorder)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.1,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)"
        ]
    },
    {
        "strategyName": "BraindeadWithSkippingStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.beanmapper.leafvaluehandler.NumberLeafValueHandler::createMapOfTypeToTransformFunction()",
            "ch.jalu.configme.beanmapper.MapperImpl::handleSpecialTypes(ch.jalu.configme.beanmapper.MappingContext, java.lang.Object)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.MapperImpl::createExportValueForSpecialTypes(java.lang.Object, java.util.Set)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasCommentOnEveryProperty(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateHasAllEnumEntriesInComment(ch.jalu.configme.configurationdata.ConfigurationData, java.util.function.Predicate)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createYamlNode(java.lang.Object, java.lang.String, ch.jalu.configme.configurationdata.ConfigurationData, int)",
            "ch.jalu.configme.resource.YamlFileResource::exportProperties(ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::loadFile(boolean)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::getChildMap(java.util.Map, java.lang.String)",
            "ch.jalu.configme.configurationdata.PropertyListBuilder::collectEntries(java.util.Map, java.util.List)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateCommentLengthsAreWithinBounds(ch.jalu.configme.configurationdata.ConfigurationData, java.lang.Integer, java.lang.Integer)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClassInternal(java.lang.reflect.Type)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getPropertyName(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.Utils::createFileIfNotExists(java.nio.file.Path)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getWritableProperties(java.lang.Class)",
            "ch.jalu.configme.resource.YamlFileReader::collectKeysIntoSet(java.lang.String, java.util.Map, java.util.Set, boolean)",
            "ch.jalu.configme.migration.version.VersionMigrationService::performMigrations(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Iterable)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::getPropertyField(java.lang.reflect.Field)",
            "ch.jalu.configme.migration.PlainMigrationService::checkAndMigrate(ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::getComments(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::setCommentForPropertyField(java.lang.reflect.Field, java.lang.String)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::validateProperties(java.lang.Class, java.util.Collection)",
            "ch.jalu.configme.migration.version.VersionMigrationService::validateAndGroupMigrationsByFromVersion(java.lang.Iterable)"
        ]
    },
    {
        "strategyName": "MinCoverStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, ch.jalu.configme.migration.version.VersionMigration[])"
        ]
    },
    {
        "strategyName": "MinCoverWeightedStrategy",
        "topK": 0.2,
        "entryPoints": [
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validateConfigurationDataValidForMigrationService(ch.jalu.configme.configurationdata.ConfigurationData, ch.jalu.configme.resource.PropertyResource, ch.jalu.configme.migration.MigrationService)",
            "ch.jalu.configme.utils.SettingsHolderClassValidator::validate(java.lang.Class[])",
            "ch.jalu.configme.utils.TypeInformation::equals(java.lang.Object)",
            "ch.jalu.configme.properties.inlinearray.StandardInlineArrayConverters::convert(java.lang.String)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::collectAllProperties(java.lang.Class)",
            "ch.jalu.configme.configurationdata.ConfigurationDataBuilder::lambda.collectProperties.0(java.lang.reflect.Field)",
            "ch.jalu.configme.beanmapper.propertydescription.BeanDescriptionFactoryImpl::convert(java.beans.PropertyDescriptor)",
            "ch.jalu.configme.utils.MigrationUtils::moveProperty(ch.jalu.configme.properties.Property, ch.jalu.configme.properties.Property, ch.jalu.configme.resource.PropertyReader, ch.jalu.configme.configurationdata.ConfigurationData)",
            "ch.jalu.configme.resource.yaml.SnakeYamlNodeBuilderImpl::createCommentLines(java.lang.String)",
            "ch.jalu.configme.resource.YamlFileReader::getChildKeys(java.lang.String)",
            "ch.jalu.configme.utils.TypeInformation::getSafeToReadClass()",
            "ch.jalu.configme.resource.YamlFileReader::getKeys(boolean)",
            "ch.jalu.configme.SettingsManagerBuilder::withYamlFile(java.io.File, ch.jalu.configme.resource.YamlFileResourceOptions)",
            "ch.jalu.configme.migration.version.VersionMigrationService::<init>(ch.jalu.configme.properties.Property, ch.jalu.configme.migration.version.VersionMigration[])"
        ]
    }
]